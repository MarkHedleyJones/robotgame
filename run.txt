Game seed: 789940
Match seed: 789940-0
--------------------------- running turn 0 ---------------------------
--------------------------- running turn 1 ---------------------------
[((17, 10), 0.125, [(15, 15)]), ((8, 17), 0.125, [(9, 17)]), ((9, 17), 0.14285714285714285, [(8, 17)])]
There are 2 groups
[(17, 10), (15, 15)]
[(8, 17), (9, 17)]
frontline_radius = 0
( 3, 3) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
(17,10) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15, 4) (enemy)     vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 6, 2) (friendly)  vulnerability = 17 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability = 12 attack_ratio =  0 health_diffs =  0
( 9,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 2,12) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  32  29  29                              
 2                      29  30  31  31  31  31  31  30  29                      
 3              28  27  29  31  32  33  33  33  32  31  30  28  26              
 4              27  29  31  32  33  34  35  34  33  32  30  28  29              
 5          29  29  31  32  33  34  35  36  35  34  33  32  30  28  28          
 6          30  31  32  33  34  35  36  37  36  35  34  33  32  30  30          
 7      30  31  32  33  34  35  36  37  38  37  36  35  34  33  32  31  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  35  34  33  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  35  34  33  32      
10      31  31  33  34  35  36  37  38  39  38  37  36  35  34  33  32  31      
11      29  29  31  33  34  35  36  37  38  37  36  35  34  33  32  31  30      
12          30  29  31  33  34  35  36  37  36  35  34  33  32  31  30          
13          27  29  31  32  33  34  35  36  35  34  33  32  30  30  29          
14              29  30  31  32  33  34  35  34  33  32  30  28  28              
15              28  29  30  31  32  33  34  33  32  30  28  29  26              
16                      29  30  31  32  33  32  31  30  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(16, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [1]}
(9, 17) - {'options': [(9, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 2) - {'options': [(6, 3)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 15) - {'options': [(14, 15)], 'scores': [3]}
settle_sys returned with {(17, 10): {'options': [(16, 10)], 'scores': [1]}, (8, 17): {'options': [(8, 16)], 'scores': [1]}, (6, 2): {'options': [(6, 3)], 'scores': [1]}, (9, 17): {'options': [(9, 16)], 'scores': [1]}, (15, 15): {'options': [(14, 15)], 'scores': [3]}}
--------------------------- running turn 2 ---------------------------
[((16, 10), 0.16666666666666666, [(15, 15)]), ((8, 16), 0.25, [(9, 16), (15, 15)]), ((9, 16), 0.2857142857142857, [(8, 16), (15, 15)])]
There are 1 groups
[(9, 16), (8, 16), (16, 10), (15, 15)]
frontline_radius = 0
( 3,12) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
(16,10) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(14, 4) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 3) (friendly)  vulnerability = 15 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs =  0
( 8,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  30  30  30                              
 2                      29  30  30  30  33  30  30  30  29                      
 3              26  28  30  31  32  32  32  32  32  31  29  27  27              
 4              29  28  30  32  33  34  34  34  33  31  29  30  27              
 5          28  28  30  32  33  34  35  36  35  34  33  31  29  29  29          
 6          30  30  32  33  34  35  36  37  36  35  34  33  31  31  30          
 7      30  31  32  33  34  35  36  37  38  37  36  35  34  33  32  31  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  35  34  33  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  35  34  33  32      
10      31  32  32  34  35  36  37  38  39  38  37  36  35  34  33  32  31      
11      30  30  30  32  34  35  36  37  38  37  36  35  34  33  32  31  30      
12          28  31  30  32  34  35  36  37  36  35  34  33  31  31  30          
13          28  28  30  32  33  34  35  36  35  34  33  31  29  29  29          
14              28  30  31  32  33  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 3) - {'options': [(6, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 10) - {'options': [(16, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 15) - {'options': [(15, 14)], 'scores': [0]}
settle_sys returned with {(6, 3): {'options': [(6, 4)], 'scores': [1]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (8, 16): {'options': [(9, 16)], 'scores': [1]}, (16, 10): {'options': [(16, 9)], 'scores': [1]}, (15, 15): {'options': [(15, 14)], 'scores': [0]}}
--------------------------- running turn 3 ---------------------------
[((9, 16), 0.14285714285714285, [(9, 15)]), ((16, 9), 0.16666666666666666, [(15, 14)]), ((9, 15), 0.16666666666666666, [(9, 16)])]
There are 2 groups
[(9, 16), (9, 15)]
[(16, 9), (15, 14)]
frontline_radius = 0
( 6, 4) (friendly)  vulnerability = 14 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(14, 5) (enemy)     vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 9) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 4, 4) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,12) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  9 attack_ratio =  0 health_diffs =  8
(15,14) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = -8
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  31  31  30                              
 2                      29  29  29  32  31  31  31  30  29                      
 3              27  27  29  31  31  31  33  33  32  31  30  28  28              
 4              27  30  29  31  33  33  35  34  33  32  30  28  28              
 5          29  29  29  31  33  34  35  36  35  34  32  30  31  28  28          
 6          30  31  31  33  34  35  36  37  36  35  34  32  30  30  30          
 7      30  31  32  33  34  35  36  37  38  37  36  35  34  32  32  31  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  35  34  33  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  35  34  33  32      
10      31  32  33  33  35  36  37  38  39  38  37  36  35  34  33  32  31      
11      30  31  31  31  33  35  36  37  38  37  36  35  34  33  32  31  30      
12          29  29  32  31  33  35  36  37  36  35  34  33  31  31  30          
13          29  29  29  31  33  34  35  36  35  34  33  31  29  29  29          
14              29  29  31  32  33  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(15, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 4) - {'options': [(7, 4)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [3]}
settle_sys returned with {(16, 9): {'options': [(15, 9)], 'scores': [1]}, (6, 4): {'options': [(7, 4)], 'scores': [2]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (15, 14): {'options': [(14, 14)], 'scores': [3]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}}
--------------------------- running turn 4 ---------------------------
[((9, 15), 0.16666666666666666, [(9, 14)]), ((9, 14), 0.2, [(9, 15)])]
There are 1 groups
[(9, 14), (9, 15)]
frontline_radius = 0
( 8, 3) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,12) (enemy)     vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 4, 4) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 7, 4) (friendly)  vulnerability = 12 attack_ratio =  0 health_diffs =  0
(14,14) (enemy)     vulnerability =  8 attack_ratio =  0 health_diffs =  8
(15, 9) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -8
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  30  30  30  32  32  31  30  29                      
 3              27  27  29  30  30  33  32  32  32  31  30  29  28              
 4              27  30  29  31  32  32  34  34  33  32  31  29  29              
 5          29  29  29  31  33  34  34  36  35  34  33  31  29  29  29          
 6          30  31  31  33  34  35  36  37  36  35  33  31  32  29  29          
 7      30  31  32  33  34  35  36  37  38  37  36  35  33  31  31  31  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  35  33  33  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  35  34  33  32      
10      31  32  33  34  34  36  37  38  39  38  37  36  35  34  33  32  31      
11      30  31  32  32  32  34  36  37  38  37  36  35  34  33  32  31  30      
12          30  30  30  33  32  34  36  37  36  35  34  33  31  31  30          
13          29  30  30  30  32  34  35  36  35  34  33  31  29  29  29          
14              29  30  30  32  33  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 4) - {'options': [(7, 5)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
settle_sys returned with {(7, 4): {'options': [(7, 5)], 'scores': [2]}, (15, 14): {'options': [(14, 14)], 'scores': [3]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}}
--------------------------- running turn 5 ---------------------------
[((9, 14), 0.2, [(9, 13)]), ((9, 13), 0.25, [(9, 14)])]
There are 1 groups
[(9, 13), (9, 14)]
frontline_radius = 0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 7) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 5, 4) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7, 5) (friendly)  vulnerability = 10 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  7 attack_ratio =  0 health_diffs =  7
( 6,12) (enemy)     vulnerability =  9 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = -7
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      28  30  30  30  32  32  31  30  29                      
 3              28  28  28  29  30  33  32  32  32  31  30  29  28              
 4              28  28  31  30  31  32  34  34  33  32  31  30  29              
 5          29  30  30  30  32  34  34  36  35  34  33  32  30  30  29          
 6          30  31  32  32  34  35  36  37  36  35  34  32  30  30  30          
 7      30  31  32  33  34  35  36  37  38  37  36  34  32  33  30  30  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  34  32  32  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  34  34  33  32      
10      31  32  33  34  35  35  37  38  39  38  37  36  35  34  33  32  31      
11      30  31  32  33  33  33  35  37  38  37  36  35  34  33  32  31  30      
12          30  31  31  31  34  33  35  37  36  35  34  33  31  31  30          
13          29  30  31  31  31  33  35  36  35  34  33  31  29  29  29          
14              29  30  31  31  33  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 5) - {'options': [(7, 6)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [3]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (7, 5): {'options': [(7, 6)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (15, 14): {'options': [(14, 14)], 'scores': [3]}}
--------------------------- running turn 6 ---------------------------
[((9, 13), 0.3333333333333333, [(9, 12)]), ((9, 12), 0.5, [(9, 13)])]
There are 1 groups
[(9, 13), (9, 12)]
frontline_radius = 0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
(14, 7) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  7 attack_ratio =  0 health_diffs =  5
(13, 9) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = -5
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  29  31  31  33  32  31  30  29                      
 3              28  29  29  29  30  31  33  33  32  31  30  29  28              
 4              29  29  29  31  29  33  33  33  33  32  31  30  29              
 5          29  30  31  31  31  32  33  35  35  34  33  32  30  30  29          
 6          30  31  32  33  33  35  35  37  36  35  34  32  30  30  30          
 7      30  31  32  33  34  35  36  37  38  37  36  34  32  33  30  30  30      
 8      31  32  33  34  35  36  37  38  39  38  37  36  34  32  32  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  36  34  34  33  32      
10      31  32  33  34  35  36  36  38  39  38  37  36  35  34  33  32  31      
11      30  31  32  33  34  34  34  36  38  37  36  35  34  33  32  31  30      
12          30  31  32  32  32  35  34  36  36  35  34  33  31  31  30          
13          29  30  31  32  32  32  34  36  35  34  33  31  29  29  29          
14              29  30  31  32  32  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 6) - {'options': [(7, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [0]}, (7, 6): {'options': [(7, 7)], 'scores': [1]}, (15, 14): {'options': [(14, 14)], 'scores': [3]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}}
--------------------------- running turn 7 ---------------------------
[((9, 11), 0.3333333333333333, [(9, 12)]), ((9, 12), 0.5, [(9, 11)])]
There are 1 groups
[(9, 11), (9, 12)]
frontline_radius = 0
( 7,12) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  5
(15,14) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = -5
( 8, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 8) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  30  29                      
 3              28  29  30  30  32  32  34  33  32  31  30  29  28              
 4              29  30  30  30  31  32  34  34  33  32  31  30  29              
 5          29  30  30  30  32  30  34  34  34  34  33  32  31  30  29          
 6          30  31  32  32  32  33  34  36  36  35  34  33  31  31  30          
 7      30  31  32  33  34  34  36  36  38  37  36  35  33  31  31  31  30      
 8      31  32  33  34  35  36  37  38  39  38  37  35  33  34  31  31  31      
 9      32  33  34  35  36  37  38  39  40  39  38  37  35  33  33  33  32      
10      31  32  33  34  35  36  36  38  39  38  37  36  35  33  33  32  31      
11      30  31  32  33  34  34  34  36  38  37  36  35  34  33  32  31  30      
12          30  31  32  32  32  35  34  36  36  35  34  33  31  31  30          
13          29  30  31  32  32  32  34  36  35  34  33  31  29  29  29          
14              29  30  31  32  32  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 7) - {'options': [(7, 8)], 'scores': [1]}
settle_sys returned with {(15, 14): {'options': [(14, 14)], 'scores': [3]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (7, 7): {'options': [(7, 8)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}}
--------------------------- running turn 8 ---------------------------
[((9, 11), 0.3333333333333333, [(9, 10)]), ((11, 9), 0.3333333333333333, [(9, 10)]), ((9, 10), 0.75, [(9, 11), (11, 9), (7, 8)])]
There are 1 groups
[(9, 10), (9, 11), (7, 8), (11, 9)]
frontline_radius = 0
( 6, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs =  8
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  30  29                      
 3              28  29  30  31  32  33  34  33  32  31  30  29  28              
 4              29  30  31  31  33  33  35  34  33  32  31  30  29              
 5          29  30  31  31  31  32  33  35  35  34  33  32  31  30  29          
 6          30  31  31  31  33  31  35  35  35  35  34  32  32  31  30          
 7      30  31  32  33  33  33  34  35  37  37  36  34  32  32  32  31  30      
 8      31  32  33  34  35  35  37  37  39  38  36  34  35  32  32  32  31      
 9      32  33  34  35  36  37  38  39  40  39  38  36  34  34  34  33  32      
10      31  32  33  34  35  36  36  38  39  38  37  36  34  34  33  32  31      
11      30  31  32  33  34  34  34  36  38  37  36  35  34  33  32  31  30      
12          30  31  32  32  32  35  34  36  36  35  34  33  31  31  30          
13          29  30  31  32  32  32  34  36  35  34  33  31  29  29  29          
14              29  30  31  32  32  34  35  34  33  31  29  30  27              
15              28  29  30  31  32  33  34  33  32  31  29  27  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 8) - {'options': [(7, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
settle_sys returned with {(9, 10): {'options': [(9, 9)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (7, 8): {'options': [(7, 9)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}}
--------------------------- running turn 9 ---------------------------
[((9, 10), 1.0, [(9, 9), (10, 9), (7, 9)]), ((9, 9), 1.0, [(9, 10), (10, 9), (7, 9)]), ((10, 9), 1.0, [(9, 9), (9, 10), (7, 9)]), ((7, 9), 1.0, [(9, 9), (9, 10), (10, 9)])]
There are 1 groups
[(9, 10), (9, 9), (10, 9), (7, 9)]
frontline_radius = 0
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs =  8
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  30  29                      
 3              28  29  30  31  32  33  34  33  32  31  30  29  28              
 4              29  30  31  32  33  34  35  34  33  32  31  30  29              
 5          29  30  31  32  32  34  34  36  35  34  33  32  31  30  29          
 6          30  31  32  32  32  33  34  36  36  35  33  33  32  31  30          
 7      30  31  32  32  32  34  32  36  36  36  35  33  33  33  32  31  30      
 8      31  32  33  34  34  34  35  36  38  37  35  36  33  33  33  32  31      
 9      32  33  34  35  36  36  38  38  40  39  37  35  35  35  34  33  32      
10      31  32  33  34  35  36  37  37  39  38  37  35  35  34  33  32  31      
11      30  31  32  33  34  35  35  35  37  37  36  35  34  33  32  31  30      
12          30  31  32  33  33  33  36  35  35  35  34  32  32  31  30          
13          29  30  31  32  33  33  33  35  35  34  32  30  30  30  29          
14              29  30  31  32  33  33  35  34  32  30  31  28  28              
15              28  29  30  31  32  33  34  33  32  30  28  28  28              
16                      29  30  31  32  33  32  31  30  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}}
-------------------------- running turn 10 ---------------------------
[((8, 9), 1.0, [(9, 9)]), ((9, 10), 1.5, [(9, 9), (8, 9), (10, 9)]), ((9, 9), 1.5, [(9, 10), (8, 9), (10, 9)]), ((10, 9), 1.5, [(9, 9), (9, 10), (8, 9)])]
There are 1 groups
[(8, 9), (9, 10), (9, 9), (10, 9)]
frontline_radius = 0
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(13,13) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs =  8
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10  10  10  10                              
 2                      10  10  31  32  33  32  31  10  10                      
 3               0  10  30  31  32  33  34  33  32  31  30  10   0              
 4              10  30  31  32  33  34  35  34  33  32  31  30  10              
 5          10  30  31  32  33  34  35  36  35  34  33  32  31  30  10          
 6          10  31  32  33  33  35  35  37  36  34  34  33  32  31  10          
 7      10  31  32  33  33  33  34  35  37  36  34  34  34  33  32  31  10      
 8      10  32  33  33  33  35  33  37  36  35  37  34  34  34  33  32  10      
 9      10  33  34  35  35  35  36  36  39  38  36  36  36  35  34  33  10      
10      10  32  33  34  35  35  36  35  38  38  36  36  35  34  33  32  10      
11      10  31  32  33  34  34  34  37  36  36  36  35  33  33  32  31  10      
12          10  31  32  33  34  34  34  36  36  35  33  31  31  31  10          
13          10  30  31  32  33  34  34  36  35  33  31  32  29  29  10          
14              10  30  31  32  33  34  35  34  33  31  29  29  10              
15               0  10  30  31  32  33  34  33  32  31  29  10   0              
16                      10  10  31  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [3]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 9): {'options': [(9, 9)], 'scores': [3]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (10, 9): {'options': [(10, 10)], 'scores': [0]}}
-------------------------- running turn 11 ---------------------------
[((3, 3), 0.16666666666666666, [(6, 2)]), ((3, 14), 0.2, [(3, 15)]), ((3, 15), 0.25, [(3, 14)]), ((10, 10), 1.0, [(9, 10), (10, 9), (8, 9)]), ((9, 10), 1.5, [(10, 10), (8, 9), (10, 9)]), ((10, 9), 1.5, [(10, 10), (9, 10), (8, 9)])]
There are 3 groups
[(6, 2), (3, 3)]
[(3, 15), (3, 14)]
[(9, 10), (8, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 3,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 1) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 7, 1) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(12,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  8
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  2
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(11, 1) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6, 2) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 8, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -52
(16,13) (friendly)  vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 3,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  28  28  30                              
 2                      29  29  28  29  32  31  29  29  29                      
 3              28  29  30  31  31  32  34  33  31  31  30  29  28              
 4              29  30  31  32  33  34  35  34  33  32  31  30  29              
 5          29  30  31  32  33  34  35  36  35  34  33  32  31  30  29          
 6          30  31  32  33  34  34  35  37  36  34  34  33  32  31  30          
 7      30  31  32  33  34  34  33  34  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  33  35  36  35  35  37  34  34  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  36  36  36  35  34  33  32      
10      31  32  33  34  35  36  35  35  38  38  36  36  35  34  33  32  31      
11      30  31  32  33  34  34  34  37  36  36  36  34  34  33  32  31  30      
12          30  31  32  33  34  34  34  36  36  34  32  32  32  31  30          
13          29  30  31  32  33  34  34  36  34  32  33  30  30  30  29          
14              29  30  31  31  33  34  35  34  32  29  30  30  29              
15              28  29  29  29  31  33  34  33  31  28  29  29  28              
16                      27  30  29  31  33  31  29  30  27                      
17                              29  31  32  31  29                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 15) - {'options': [(4, 15)], 'scores': [1]}
(3, 14) - {'options': [(4, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 3) - {'options': [(3, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [4]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 2) - {'options': [(6, 3)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 13) - {'options': [(15, 13)], 'scores': [1]}
settle_sys returned with {(3, 15): {'options': [(4, 15)], 'scores': [1]}, (3, 3): {'options': [(3, 4)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (6, 2): {'options': [(6, 3)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (8, 9): {'options': [(9, 9)], 'scores': [4]}, (16, 13): {'options': [(15, 13)], 'scores': [1]}, (3, 14): {'options': [(4, 14)], 'scores': [1]}}
-------------------------- running turn 12 ---------------------------
[((3, 4), 0.16666666666666666, [(6, 3)]), ((4, 14), 0.3333333333333333, [(4, 15)]), ((4, 15), 0.5, [(4, 14)]), ((10, 10), 1.0, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 3 groups
[(6, 3), (3, 4)]
[(4, 15), (4, 14)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(12,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15,13) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 6,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 4,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  8
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 4,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 3) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  2
( 7, 2) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 3, 4) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              27  28  31  30  28                              
 2                      28  27  29  30  29  29  31  28  28                      
 3              28  29  30  30  29  30  33  32  30  30  30  29  28              
 4              29  30  31  32  32  33  35  34  32  32  31  30  29              
 5          29  30  31  32  33  34  35  36  35  34  33  32  31  30  29          
 6          30  31  32  33  34  34  35  37  36  34  34  33  32  31  30          
 7      30  31  32  33  34  34  33  34  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  33  35  36  35  35  37  34  34  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  36  36  36  35  34  33  32      
10      31  32  33  34  35  36  35  35  38  38  36  35  35  34  33  32  31      
11      30  31  32  33  34  34  34  37  36  36  35  33  33  33  32  31  30      
12          30  31  32  33  34  34  34  36  35  33  34  31  31  31  30          
13          29  30  31  32  32  34  34  36  35  33  30  31  31  30  29          
14              29  30  30  30  32  34  35  34  32  29  30  30  29              
15              28  28  28  31  30  32  34  32  30  31  28  28  28              
16                      28  28  30  32  33  32  30  28  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 3) - {'options': [(6, 4)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 13) - {'options': [(15, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 15) - {'options': [(4, 14)], 'scores': [2]}
(4, 14) - {'options': [(4, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 4) - {'options': [(4, 4)], 'scores': [1]}
settle_sys returned with {(9, 10): {'options': [(9, 9)], 'scores': [1]}, (15, 13): {'options': [(15, 12)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [0]}, (4, 15): {'options': [(4, 14)], 'scores': [2]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (4, 14): {'options': [(4, 13)], 'scores': [1]}, (6, 3): {'options': [(6, 4)], 'scores': [2]}, (3, 4): {'options': [(4, 4)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [0]}}
-------------------------- running turn 13 ---------------------------
[((4, 4), 0.2, [(6, 4)]), ((4, 13), 0.25, [(4, 14)]), ((6, 4), 0.3333333333333333, [(4, 4)]), ((4, 14), 0.3333333333333333, [(4, 13)]), ((10, 10), 1.0, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 3 groups
[(6, 4), (4, 4)]
[(4, 13), (4, 14)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
(15,12) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,15) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 10
(11,12) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs =  8
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 4, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 4,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  31  29  29                              
 2                      28  28  30  27  29  32  29  29  29                      
 3              28  29  30  29  28  32  31  30  31  31  30  29  28              
 4              29  30  31  32  31  32  34  33  33  32  31  30  29              
 5          29  30  31  32  33  34  34  36  35  34  33  32  31  30  29          
 6          30  31  32  33  34  35  35  37  36  34  34  33  32  31  30          
 7      30  31  32  33  34  35  34  35  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  35  34  33  37  36  35  37  34  34  34  33  32  31      
 9      32  33  34  35  35  35  37  34  38  38  36  36  36  35  34  33  32      
10      31  32  33  34  35  35  34  34  38  38  35  36  35  34  33  32  31      
11      30  31  32  33  34  34  33  37  36  35  34  34  34  33  32  31  30      
12          30  31  32  33  34  34  34  35  34  35  32  32  32  31  30          
13          29  30  31  32  32  34  34  36  34  32  32  31  31  30  29          
14              29  30  30  30  32  34  35  34  32  31  29  29  29              
15              28  28  28  31  30  32  34  33  31  29  30  27  27              
16                      28  28  30  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 12) - {'options': [(14, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 4) - {'options': [(6, 5)], 'scores': [1]}
(4, 4) - {'options': [(4, 5)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 13) - {'options': [(4, 12)], 'scores': [1]}
(4, 14) - {'options': [(4, 13)], 'scores': [1]}
settle_sys returned with {(15, 12): {'options': [(14, 12)], 'scores': [1]}, (6, 4): {'options': [(6, 5)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (4, 4): {'options': [(4, 5)], 'scores': [1]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (4, 14): {'options': [(4, 13)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (4, 13): {'options': [(4, 12)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 14 ---------------------------
[((4, 5), 0.2, [(6, 5)]), ((4, 12), 0.25, [(4, 13)]), ((4, 13), 0.3333333333333333, [(4, 12)]), ((6, 5), 0.3333333333333333, [(4, 5)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 3 groups
[(4, 5), (6, 5)]
[(4, 13), (4, 12)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 7, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 10
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 5,15) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 4,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 4, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -8
(13,14) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,12) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  28  29  30  30                              
 2                      29  28  26  29  31  29  30  30  29                      
 3              28  29  29  29  31  28  30  32  32  31  30  29  28              
 4              29  30  31  31  31  32  34  34  33  32  31  30  29              
 5          29  30  31  32  33  33  35  36  35  34  33  32  31  30  29          
 6          30  31  32  33  34  35  35  37  36  34  34  33  32  31  30          
 7      30  31  32  33  34  35  34  35  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  35  34  33  37  36  35  37  34  34  34  33  32  31      
 9      32  33  34  35  35  35  37  34  38  38  35  36  36  35  34  33  32      
10      31  32  33  34  35  35  34  34  38  37  34  35  35  34  33  32  31      
11      30  31  32  33  34  34  33  37  35  34  36  33  33  33  32  31  30      
12          30  31  32  33  34  34  34  36  35  33  33  32  32  31  30          
13          29  30  31  31  33  34  34  36  35  33  32  30  30  30  29          
14              29  29  29  31  33  34  35  34  32  30  31  28  28              
15              27  27  30  29  31  33  34  33  32  30  28  28  28              
16                      27  29  31  32  33  32  31  30  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 5) - {'options': [(5, 5)], 'scores': [1]}
(6, 5) - {'options': [(6, 6)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 13) - {'options': [(4, 12)], 'scores': [1]}
(4, 12) - {'options': [(5, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 12) - {'options': [(14, 11)], 'scores': [1]}
settle_sys returned with {(4, 13): {'options': [(4, 12)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (4, 5): {'options': [(5, 5)], 'scores': [1]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (14, 12): {'options': [(14, 11)], 'scores': [1]}, (4, 12): {'options': [(5, 12)], 'scores': [1]}, (6, 5): {'options': [(6, 6)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 15 ---------------------------
[((5, 5), 0.3333333333333333, [(6, 6)]), ((6, 6), 0.3333333333333333, [(5, 5)]), ((4, 12), 0.3333333333333333, [(5, 12)]), ((5, 12), 0.5, [(4, 12)]), ((10, 10), 1.0, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 3 groups
[(5, 5), (6, 6)]
[(5, 12), (4, 12)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
(14,11) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 10
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -8
( 7, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,14) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  8
( 5,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  31  31  30                              
 2                      29  30  29  29  30  31  31  30  29                      
 3              28  29  30  29  27  30  32  30  31  31  30  29  28              
 4              29  30  30  30  32  29  31  33  33  32  31  30  29              
 5          29  30  31  32  32  32  33  35  35  34  33  32  31  30  29          
 6          30  31  32  33  34  34  35  37  36  34  34  33  32  31  30          
 7      30  31  32  33  34  35  34  35  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  35  34  33  37  36  35  37  34  34  34  33  32  31      
 9      32  33  34  35  35  35  37  34  38  38  36  36  36  35  34  33  32      
10      31  32  33  34  35  35  34  34  38  38  35  36  35  34  33  32  31      
11      30  31  32  33  34  34  33  37  36  35  34  34  33  33  32  31  30      
12          30  31  32  32  34  34  34  35  34  35  31  30  31  31  30          
13          29  30  30  30  32  34  34  36  34  31  30  32  29  29  29          
14              28  28  31  30  32  34  35  34  32  31  29  29  29              
15              28  28  28  30  32  33  34  33  32  31  29  29  28              
16                      28  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 11) - {'options': [(14, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 5) - {'options': [(5, 6)], 'scores': [1]}
(6, 6) - {'options': [(6, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 12) - {'options': [(6, 12)], 'scores': [2]}
(4, 12) - {'options': [(4, 11)], 'scores': [1]}
settle_sys returned with {(14, 11): {'options': [(14, 10)], 'scores': [1]}, (5, 5): {'options': [(5, 6)], 'scores': [1]}, (6, 6): {'options': [(6, 7)], 'scores': [1]}, (5, 12): {'options': [(6, 12)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (4, 12): {'options': [(4, 11)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 16 ---------------------------
[((4, 11), 0.25, [(6, 12)]), ((5, 6), 0.3333333333333333, [(6, 7)]), ((6, 12), 0.3333333333333333, [(4, 11)]), ((6, 7), 0.5, [(5, 6)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 3 groups
[(6, 12), (4, 11)]
[(5, 6), (6, 7)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 6, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 7, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 5,14) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 4,11) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 4) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  31  32  31  30                              
 2                      29  28  29  31  32  32  31  30  29                      
 3              28  29  28  27  31  30  31  32  32  31  30  29  28              
 4              29  29  29  31  28  30  35  32  32  32  31  30  29              
 5          29  30  31  31  31  32  34  34  34  34  33  32  31  30  29          
 6          30  31  32  33  33  34  35  36  36  34  34  33  32  31  30          
 7      30  31  32  33  34  34  33  34  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  33  35  36  35  35  37  34  34  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  35  36  36  35  34  33  32      
10      31  32  33  34  35  36  35  35  38  37  34  35  34  34  33  32  31      
11      30  31  32  33  34  34  34  37  35  34  36  32  31  32  32  31  30      
12          30  31  32  32  34  34  34  36  35  32  31  33  30  30  30          
13          29  30  30  30  32  34  34  36  35  33  32  30  30  30  29          
14              28  28  31  30  32  34  35  34  33  32  30  30  29              
15              28  28  28  30  32  33  34  33  32  31  30  29  28              
16                      28  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 6) - {'options': [(5, 7)], 'scores': [1]}
(6, 7) - {'options': [(6, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(7, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 11) - {'options': [(4, 10)], 'scores': [1]}
settle_sys returned with {(14, 10): {'options': [(14, 9)], 'scores': [1]}, (6, 7): {'options': [(6, 7)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (5, 6): {'options': [(5, 7)], 'scores': [1]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (4, 11): {'options': [(4, 10)], 'scores': [1]}, (6, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}}
-------------------------- running turn 17 ---------------------------
[((4, 10), 0.25, [(5, 7)]), ((5, 7), 0.3333333333333333, [(6, 7)]), ((6, 7), 0.5, [(5, 7)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 2 groups
[(4, 10), (5, 7), (6, 7)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 4,10) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -32
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 32
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -50
( 5, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 5,13) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 7,12) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 6, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 5) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  30  32  33  32  31  30  29                      
 3              28  29  30  29  30  32  33  33  32  31  30  29  28              
 4              29  30  29  28  32  31  32  33  33  32  31  30  29              
 5          29  30  30  30  32  29  31  36  33  33  33  32  31  30  29          
 6          30  31  32  32  32  32  34  35  35  34  34  33  32  31  30          
 7      30  31  32  33  34  33  33  34  36  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  33  35  36  35  35  37  34  34  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  35  36  35  35  34  33  32      
10      31  32  33  34  35  36  35  35  38  37  34  34  33  33  33  32  31      
11      30  31  32  33  33  34  34  37  35  34  35  31  33  31  31  31  30      
12          30  31  31  31  33  34  34  36  35  33  32  31  31  31  30          
13          29  29  29  32  31  33  34  36  35  33  33  31  31  30  29          
14              29  29  29  31  33  34  35  34  33  32  31  30  29              
15              28  29  29  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 10) - {'options': [(5, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(5, 8)], 'scores': [0]}
(6, 7) - {'options': [(5, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 12) - {'options': [(7, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 9) - {'options': [(13, 9)], 'scores': [0]}
settle_sys returned with {(4, 10): {'options': [(5, 10)], 'scores': [1]}, (6, 7): {'options': [(5, 7)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (5, 7): {'options': [(5, 8)], 'scores': [0]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (14, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}}
-------------------------- running turn 18 ---------------------------
[((5, 7), 0.6666666666666666, [(5, 8), (5, 10)]), ((5, 10), 1.0, [(5, 8), (5, 7), (7, 12), (9, 10)]), ((5, 8), 1.0, [(5, 7), (5, 10)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 1 groups
[(5, 10), (10, 10), (7, 12), (5, 7), (9, 9), (9, 10), (10, 9), (5, 8)]
frontline_radius = 0
( 7, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -40
( 5, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
( 7,12) (friendly)  vulnerability =  4 attack_ratio = -1 health_diffs = -50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 6,13) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 5, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  30  29                      
 3              28  29  30  30  31  32  34  33  32  31  30  29  28              
 4              29  30  30  29  29  31  34  34  33  32  31  30  29              
 5          29  30  30  29  30  30  32  33  34  34  33  32  31  30  29          
 6          30  31  32  32  31  30  32  36  36  34  34  33  32  31  30          
 7      30  31  32  33  34  33  32  33  37  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  33  35  36  35  35  37  34  33  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  35  35  34  34  34  33  32      
10      31  32  33  34  35  36  35  35  38  37  33  33  35  32  32  32  31      
11      30  31  32  33  34  33  34  37  35  34  36  32  31  32  32  31  30      
12          30  31  32  32  32  33  34  36  35  33  33  32  32  31  30          
13          29  30  30  30  33  32  33  36  35  33  33  32  31  30  29          
14              29  30  30  30  32  34  35  34  33  32  31  30  29              
15              28  29  30  30  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(5, 7)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [1]}
(5, 8) - {'options': [(5, 9)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 12) - {'options': [(7, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys returned with {(5, 10): {'options': [(6, 10)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (7, 12): {'options': [(7, 11)], 'scores': [1]}, (5, 7): {'options': [(5, 7)], 'scores': [0]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (5, 8): {'options': [(5, 9)], 'scores': [2]}}
-------------------------- running turn 19 ---------------------------
[((5, 7), 0.5, [(5, 9)]), ((5, 9), 0.6666666666666666, [(6, 10), (5, 7)]), ((6, 10), 1.0, [(5, 9), (7, 11), (9, 10)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 1 groups
[(5, 9), (5, 7), (10, 10), (6, 10), (9, 9), (9, 10), (7, 11), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 6, 6) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -1
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -42
( 5, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,11) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -8
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -2
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  2
( 6,13) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  30  29                      
 3              28  29  30  31  32  33  34  33  32  31  30  29  28              
 4              29  30  31  31  32  33  35  34  33  32  31  30  29              
 5          29  30  31  31  30  30  32  35  35  34  33  32  31  30  29          
 6          30  31  31  30  31  30  32  34  35  34  34  33  32  31  30          
 7      30  31  32  33  33  31  29  31  36  36  34  34  34  33  32  31  30      
 8      31  32  33  34  34  32  34  35  35  35  37  34  33  34  33  32  31      
 9      32  33  34  35  36  36  35  35  39  38  35  35  34  34  34  33  32      
10      31  32  33  34  35  36  35  35  38  37  33  33  35  32  32  32  31      
11      30  31  32  33  34  33  34  37  35  34  36  32  31  32  32  31  30      
12          30  31  32  32  32  33  34  36  35  33  33  32  32  31  30          
13          29  30  30  30  33  32  33  36  35  33  33  32  31  30  29          
14              29  30  30  30  32  34  35  34  33  32  31  30  29              
15              28  29  30  30  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(6, 9)], 'scores': [0]}
(6, 10) - {'options': [(6, 10)], 'scores': [0]}
(5, 7) - {'options': [(5, 8)], 'scores': [1]}
(7, 11) - {'options': [(8, 11)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [0]}, (5, 7): {'options': [(5, 8)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (7, 11): {'options': [(8, 11)], 'scores': [3]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}}
-------------------------- running turn 20 ---------------------------
[((6, 9), 1.0, [(6, 10)]), ((6, 10), 1.0, [(6, 9), (7, 11)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((9, 10), 1.5, [(9, 9), (10, 10), (10, 9)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)])]
There are 2 groups
[(7, 11), (6, 9), (6, 10)]
[(9, 10), (9, 9), (10, 9), (10, 10)]
frontline_radius = 0
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -50
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 6, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 10
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -44
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 5, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs =  0
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 7,11) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -56
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -1
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
( 6,12) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 16
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10  10  10  10                              
 2                      10  10  31  32  33  32  31  10  10                      
 3               0  10  30  31  32  33  34  33  32  31  30  10   0              
 4              10  30  31  31  33  34  35  34  33  32  31  30  10              
 5          10  30  31  31  31  32  34  36  35  34  33  32  31  30  10          
 6          10  31  31  31  32  30  31  36  36  34  34  33  32  31  10          
 7      10  31  32  33  31  28  31  33  34  35  34  34  34  33  32  31  10      
 8      10  32  33  33  33  33  30  34  35  35  37  34  33  34  33  32  10      
 9      10  33  34  35  35  35  35  35  39  38  35  35  34  34  34  33  10      
10      10  32  33  34  35  34  36  35  38  37  33  33  35  32  32  32  10      
11      10  31  32  33  33  32  33  37  35  34  36  32  31  32  32  31  10      
12          10  31  31  31  34  32  33  36  35  33  33  32  32  31  10          
13          10  30  31  31  31  33  34  36  35  33  33  32  31  30  10          
14              10  30  31  31  33  34  35  34  33  32  31  30  10              
15               0  10  30  31  32  33  34  33  32  31  30  10   0              
16                      10  10  31  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 11) - {'options': [(8, 11)], 'scores': [4]}
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(6, 10) - {'options': [(7, 10)], 'scores': [2]}
(5, 8) - {'options': [(5, 9)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (6, 10): {'options': [(7, 10)], 'scores': [2]}, (9, 9): {'options': [(10, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (5, 8): {'options': [(5, 9)], 'scores': [2]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (7, 11): {'options': [(8, 11)], 'scores': [4]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}}
-------------------------- running turn 21 ---------------------------
[((2, 5), 0.25, [(2, 6)]), ((2, 6), 0.6, [(2, 5), (1, 9), (5, 8)]), ((7, 11), 1.0, [(7, 10)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 9)]), ((9, 9), 1.5, [(9, 10), (10, 9), (10, 10)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)]), ((7, 10), 1.5, [(7, 11), (9, 10), (6, 9)]), ((9, 10), 2.0, [(9, 9), (10, 10), (10, 9), (7, 10)])]
There are 2 groups
[(2, 5), (2, 6), (1, 9), (5, 8)]
[(6, 9), (10, 10), (9, 9), (9, 10), (7, 10), (7, 11), (10, 9)]
frontline_radius = 0
( 6, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -43
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -32
(17, 7) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -16
( 2, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 8) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -33
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 5,12) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(13,16) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 15
( 1,10) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7, 1) (friendly)  vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -2 health_diffs = -84
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 15
(15, 4) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 1, 9) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -1
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -57
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 32
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 4, 3) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      28  30  31  32  33  32  30  28  29                      
 3              26  29  28  30  32  33  34  33  32  30  28  27  26              
 4              28  28  30  32  33  34  35  34  33  32  29  28  29              
 5          29  30  30  32  32  34  35  35  35  34  33  32  30  28  28          
 6          30  31  32  32  31  33  34  35  35  34  34  33  32  30  29          
 7      30  31  32  32  31  32  29  31  37  34  33  34  34  33  31  29  30      
 8      30  32  33  33  31  31  32  34  33  34  37  34  33  34  33  31  29      
 9      30  32  34  35  35  33  34  35  38  38  35  35  34  34  34  33  31      
10      31  30  32  34  34  35  35  35  38  37  33  33  35  32  32  32  31      
11      28  30  32  32  32  33  34  37  35  34  36  32  31  32  32  31  30      
12          30  30  30  33  32  33  34  36  35  33  33  32  32  31  30          
13          29  30  30  30  32  34  34  36  35  33  33  32  31  30  29          
14              29  30  30  32  33  34  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
(6, 9) - {'options': [(6, 10)], 'scores': [2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (10, 11)], 'scores': [1, 1, 0, -3]}
(9, 9) - {'options': [(9, 10), (9, 9), (10, 9), (8, 9)], 'scores': [0, 0, 0, -3]}
(9, 10) - {'options': [(9, 10), (9, 9), (10, 10), (9, 11)], 'scores': [0, 0, -1, -3]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 10), (11, 9)], 'scores': [0, 0, -1, -3]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [3]}
(5, 8) - {'options': [(5, 9)], 'scores': [4]}
(6, 9) - {'options': [(6, 10)], 'scores': [2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [3]}
(5, 8) - {'options': [(5, 9)], 'scores': [4]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(6, 10)], 'scores': [2]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(9, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 10): {'options': [(8, 10)], 'scores': [0]}
(7, 11): {'options': [(8, 11)], 'scores': [3]}
(5, 8): {'options': [(5, 9)], 'scores': [4]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 
12                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 
12                                 

System can be split into 8 systems
Solving system # 0
(6, 9) - {'options': [(6, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(5, 8) - {'options': [(5, 9)], 'scores': [4]}
This system has 1 move so it already solved!
Solving system # 5
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(7, 11) - {'options': [(8, 11)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 7
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(6, 10)], 'scores': [2]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(9, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 10): {'options': [(8, 10)], 'scores': [0]}
(7, 11): {'options': [(8, 11)], 'scores': [3]}
(5, 8): {'options': [(5, 9)], 'scores': [4]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 
12                                 


The initial system score was 284
The maximum obtainable for the system is 293
The score gain were looking for is 9
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 
12                                 

Cell Scores:
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 
12                                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(6, 9) - {'options': [(6, 10)], 'scores': [2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [3]}
(5, 8) - {'options': [(5, 9)], 'scores': [4]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 5) - {'options': [(2, 6)], 'scores': [1]}
(2, 6) - {'options': [(2, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 1) - {'options': [(8, 1)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 16) - {'options': [(13, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(2, 9)], 'scores': [2]}
settle_sys returned with {(6, 9): {'options': [(6, 10)], 'scores': [2]}, (2, 6): {'options': [(2, 7)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (7, 1): {'options': [(8, 1)], 'scores': [1]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (13, 16): {'options': [(13, 15)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (5, 8): {'options': [(5, 9)], 'scores': [4]}, (7, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [3]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (2, 5): {'options': [(2, 6)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (1, 9): {'options': [(2, 9)], 'scores': [2]}}
-------------------------- running turn 22 ---------------------------
[((2, 6), 0.5, [(2, 7), (1, 9)]), ((2, 7), 0.6666666666666666, [(2, 6), (1, 9)]), ((8, 10), 1.0, [(9, 10)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)]), ((10, 10), 2.0, [(9, 10), (10, 9), (8, 10), (9, 9)]), ((9, 9), 2.0, [(9, 10), (10, 9), (8, 10), (10, 10)]), ((9, 10), 2.0, [(10, 10), (8, 10), (9, 9), (10, 9)])]
There are 2 groups
[(2, 7), (2, 6), (1, 9)]
[(9, 10), (9, 9), (8, 10), (10, 9), (10, 10)]
frontline_radius = 0
( 6, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 15
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -32
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -66
( 5, 8) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -16
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 4, 4) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  2 health_diffs = 25
(16, 7) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  3 attack_ratio = -2 health_diffs = -84
(13,15) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 2,10) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 1, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 6,12) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 41
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 2, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -65
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 32
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -8
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  29  27                      
 3              27  27  29  31  32  33  34  33  31  29  29  25  26              
 4              27  30  29  31  33  34  35  34  33  30  27  29  27              
 5          29  29  29  31  32  33  35  35  35  34  33  30  29  29  28          
 6          30  31  31  32  30  32  33  35  35  34  34  33  31  30  28          
 7      30  31  32  32  30  31  31  30  36  34  33  34  34  32  30  31  28      
 8      31  31  33  33  32  32  30  35  34  34  37  34  33  34  32  30  30      
 9      31  31  33  35  35  34  35  36  38  38  35  35  34  34  34  32  32      
10      29  32  31  33  35  34  36  35  38  37  33  33  35  32  32  32  31      
11      29  29  31  33  33  32  33  37  35  34  36  32  31  32  32  31  30      
12          29  31  31  31  34  32  33  36  35  33  33  32  32  31  30          
13          29  30  31  31  31  33  34  36  35  33  33  32  31  30  29          
14              29  30  31  31  33  34  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 7) - {'options': [(3, 7)], 'scores': [1]}
(2, 6) - {'options': [(2, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 9) - {'options': [(7, 9)], 'scores': [1]}
(5, 8) - {'options': [(5, 9)], 'scores': [3]}
determine_ideal_outcome called with [(10, 10), (9, 9), (8, 10), (9, 10), (7, 11), (10, 9)]


=> INITIAL
BOT Positions:
6 participants
     6   7   8   9  10  11  
 8                         
 9           -   X   X     
10       -   X   X   X     
11       X   -             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     6   7   8   9  10  11  
 8                         
 9           -   X   X     
10       -   X   X   X     
11       X   -             
12                         

determine_ideal_outcome called with [(10, 10), (9, 9), (8, 10), (9, 10), (7, 11), (10, 9)]
outcome = 
num_optional - 1
optional - [(8, 9), (7, 10)]
occupied - [(9, 9), (9, 10), (10, 9), (10, 10), (8, 11)]
available_bots - [(10, 10), (9, 9), (8, 10), (9, 10), (7, 11), (10, 9)]
levels - {36: [(8, 9), (7, 10)], 37: [(10, 10), (8, 11)], 38: [(9, 9), (9, 10), (10, 9)]}
max_score - 224

-------------------------------------
TARGET system:
6 participants
()
     6   7   8   9  10  11  
 8                         
 9           1   X   X     
10       1       X   X     
11           X             
12                         


The initial system score was 219
The maximum obtainable for the system is 224
The score gain were looking for is 5
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 10), (7, 11)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 10), (9, 9), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(10, 10), (9, 9), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 9)]
current_bots_outside = [(8, 10), (7, 11)]
target_occupied_not_occupied = [(8, 11)]
target_occupied_with_bot_now_or_definite_bot_next = [(10, 10), (9, 9), (9, 10), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     6   7   8   9  10  11  
 8                         
 9           -   0   0     
10       -   X   0   0     
11       X   =             
12                         

Cell Scores:
     6   7   8   9  10  11  
 8                         
 9          34  38  38     
10      34  34  38  37     
11      33  37             
12                         

The system now has a total of 864 options
Optional squares exist
1 bots need to move into optional
And 1 bots need to move into occupied

System result = ...
The system has a total of 864 options
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 10), (9, 9), (10, 9), (8, 9)], 'scores': [0, 0, 0, -2]}
(8, 10) - {'options': [(9, 10), (8, 11), (8, 9), (7, 10)], 'scores': [3, 2, 1, 1]}
(9, 10) - {'options': [(9, 10), (9, 9), (10, 10)], 'scores': [0, 0, -1]}
(7, 11) - {'options': [(8, 11), (7, 10)], 'scores': [4, 3]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 10)], 'scores': [0, 0, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 864 combinations
Ran full set of options and didnt find top result
Score is 5
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 11)], 'scores': [2]}
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
(7, 11) - {'options': [(7, 10)], 'scores': [3]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(8, 2)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 15) - {'options': [(13, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 8)], 'scores': [0]}
settle_sys returned with {(2, 7): {'options': [(3, 7)], 'scores': [1]}, (6, 9): {'options': [(7, 9)], 'scores': [1]}, (2, 6): {'options': [(2, 7)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (8, 1): {'options': [(8, 2)], 'scores': [1]}, (13, 15): {'options': [(13, 14)], 'scores': [1]}, (8, 10): {'options': [(8, 11)], 'scores': [2]}, (9, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [0]}, (5, 8): {'options': [(5, 9)], 'scores': [3]}, (7, 11): {'options': [(7, 10)], 'scores': [3]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}, (1, 9): {'options': [(1, 8)], 'scores': [0]}}
-------------------------- running turn 23 ---------------------------
[((5, 8), 0.5, [(6, 9)]), ((2, 7), 0.6666666666666666, [(3, 7), (1, 8)]), ((1, 8), 0.6666666666666666, [(2, 7), (3, 7)]), ((6, 9), 1.0, [(5, 8), (7, 10)]), ((3, 7), 1.0, [(2, 7), (1, 8), (5, 8)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)]), ((7, 10), 1.5, [(8, 10), (9, 10), (6, 9)]), ((9, 10), 1.6666666666666667, [(10, 10), (8, 10), (9, 9), (10, 9), (7, 10)]), ((10, 10), 2.0, [(9, 10), (10, 9), (8, 10), (9, 9)]), ((8, 10), 2.0, [(9, 10), (7, 10), (9, 9), (10, 10)]), ((9, 9), 2.0, [(9, 10), (10, 9), (8, 10), (10, 10)])]
There are 1 groups
[(6, 9), (10, 10), (8, 10), (9, 9), (9, 10), (10, 9), (7, 10), (3, 7), (5, 8)]
frontline_radius = 0
( 6, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -34
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 3, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 8) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -15
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(14, 5) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12, 3) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 2) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 4, 5) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 2,10) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 40
(15, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 2, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
(13,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  8
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 1, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(13, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 34
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  30  28  28                      
 3              28  28  30  31  32  33  34  32  30  31  28  27  28              
 4              28  28  30  32  33  34  35  34  32  30  29  28  28              
 5          28  28  31  30  31  34  35  35  35  34  31  30  31  27  28          
 6          30  30  30  31  32  33  34  35  35  34  34  32  29  28  29          
 7      30  31  32  31  32  34  30  31  37  34  33  34  33  30  32  29  29      
 8      31  31  33  34  33  31  34  35  33  34  37  34  33  33  31  31  31      
 9      31  31  33  35  36  35  35  36  38  38  35  35  34  34  33  33  32      
10      29  32  31  33  35  35  36  36  39  37  33  33  35  32  32  32  31      
11      29  29  31  33  33  33  34  35  36  35  36  32  31  32  32  31  30      
12          29  31  31  31  33  31  35  35  34  33  33  32  32  31  30          
13          29  30  31  31  31  32  33  35  35  33  33  32  31  30  29          
14              29  30  31  31  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 7) - {'options': [(3, 7)], 'scores': [1]}
(3, 7) - {'options': [(3, 8)], 'scores': [1]}
(1, 8) - {'options': [(2, 8)], 'scores': [0]}
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (10, 11)], 'scores': [2, 1, 0, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (7, 10), (8, 11)], 'scores': [3, 0, 0, 0, -1]}
(9, 9) - {'options': [(9, 10), (9, 9), (10, 9), (8, 9), (9, 8)], 'scores': [1, 0, 0, -2, -5]}
(9, 10) - {'options': [(9, 10), (9, 9), (10, 10), (9, 11)], 'scores': [0, -1, -2, -3]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 10), (11, 9)], 'scores': [0, 0, -1, -3]}
(7, 10) - {'options': [(8, 10), (7, 10), (6, 10)], 'scores': [0, 0, -1]}
(5, 8) - {'options': [(5, 9)], 'scores': [3]}
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [2]}
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(5, 8) - {'options': [(5, 9)], 'scores': [3]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(6, 9)], 'scores': [0]}
(10, 10): {'options': [(9, 10)], 'scores': [2]}
(8, 10): {'options': [(8, 9)], 'scores': [0]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 9)], 'scores': [-1]}
(10, 9): {'options': [(10, 10)], 'scores': [-1]}
(7, 10): {'options': [(8, 10)], 'scores': [0]}
(5, 8): {'options': [(5, 9)], 'scores': [3]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 

System can be split into 8 systems
Solving system # 0
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(10, 10) - {'options': [(9, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 5
(5, 8) - {'options': [(5, 9)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 6
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(6, 9)], 'scores': [0]}
(10, 10): {'options': [(9, 10)], 'scores': [2]}
(8, 10): {'options': [(8, 9)], 'scores': [0]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 9)], 'scores': [-1]}
(10, 9): {'options': [(10, 10)], 'scores': [-1]}
(7, 10): {'options': [(8, 10)], 'scores': [0]}
(5, 8): {'options': [(5, 9)], 'scores': [3]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 


The initial system score was 292
The maximum obtainable for the system is 295
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 

Cell Scores:
     4   5   6   7   8   9  10  11  
 7                                 
 8                                 
 9                                 
10                                 
11                                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [2]}
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-1]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(5, 8) - {'options': [(5, 9)], 'scores': [3]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 2) - {'options': [(9, 2)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 10)], 'scores': [1]}
settle_sys returned with {(2, 7): {'options': [(3, 7)], 'scores': [1]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (8, 2): {'options': [(9, 2)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [2]}, (13, 14): {'options': [(13, 13)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [0]}, (9, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [-1]}, (1, 8): {'options': [(2, 8)], 'scores': [0]}, (5, 8): {'options': [(5, 9)], 'scores': [3]}, (7, 10): {'options': [(8, 10)], 'scores': [0]}, (3, 7): {'options': [(3, 8)], 'scores': [1]}, (13, 9): {'options': [(13, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [-1]}}
-------------------------- running turn 24 ---------------------------
[((13, 13), 0.25, [(13, 10)]), ((5, 9), 1.0, [(6, 9), (3, 8), (8, 9)]), ((6, 9), 1.0, [(5, 9), (8, 9)]), ((2, 8), 1.0, [(3, 8)]), ((3, 8), 1.0, [(3, 7), (2, 8)]), ((3, 7), 1.0, [(3, 8), (2, 8)]), ((9, 10), 1.6666666666666667, [(10, 10), (8, 10), (9, 9), (8, 9), (10, 9)]), ((10, 10), 2.0, [(9, 10), (10, 9), (8, 10), (9, 9)]), ((8, 10), 2.0, [(9, 10), (8, 9), (9, 9), (10, 10)]), ((8, 9), 2.0, [(8, 10), (9, 9)]), ((10, 9), 2.0, [(9, 9), (10, 10), (9, 10), (8, 9)]), ((9, 9), 2.5, [(9, 10), (8, 9), (10, 9), (8, 10), (10, 10)])]
There are 2 groups
[(13, 10), (13, 13)]
[(5, 9), (6, 9), (9, 10), (10, 10), (2, 8), (8, 10), (9, 9), (3, 8), (3, 7), (8, 9), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 16
(13,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 3, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -42
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  5 attack_ratio = -1 health_diffs = -50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,11) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 4, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 25
( 9, 2) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -2
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -40
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  29                              
 2                      29  30  31  32  33  31  29  29  29                      
 3              28  29  30  31  32  33  33  31  32  29  29  29  28              
 4              29  29  31  32  33  34  35  33  31  31  31  29  29              
 5          29  29  29  31  32  33  35  35  35  33  33  31  28  29  29          
 6          29  29  32  30  30  32  33  35  35  34  33  30  30  28  29          
 7      30  30  31  30  30  33  32  30  36  34  33  33  31  31  29  30  30      
 8      30  30  32  33  34  32  32  36  34  34  37  33  33  31  32  32  31      
 9      30  33  32  34  36  35  36  37  38  38  34  34  35  34  34  33  32      
10      30  30  32  34  34  34  36  36  39  36  32  35  33  33  33  32  31      
11      30  30  32  32  32  35  33  34  36  35  35  31  32  33  32  31  30      
12          30  31  32  32  31  32  36  35  34  33  32  33  32  31  30          
13          29  30  31  32  32  33  33  35  35  33  33  32  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
System has been reduced
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(7, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11)], 'scores': [0, -1, -3]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (10, 11)], 'scores': [3, 2, 0, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [3, 1, 0]}
(9, 9) - {'options': [(9, 10), (9, 9), (10, 9), (8, 9), (9, 8)], 'scores': [1, 0, 0, -1, -4]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8)], 'scores': [1, 0, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 10), (10, 8)], 'scores': [0, 0, -2, -4]}
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(7, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-3]}
(10, 10) - {'options': [(9, 10)], 'scores': [3]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-2]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(6, 9): {'options': [(7, 9)], 'scores': [1]}
(9, 10): {'options': [(9, 11)], 'scores': [-3]}
(10, 10): {'options': [(9, 10)], 'scores': [3]}
(8, 10): {'options': [(8, 9)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(8, 9): {'options': [(9, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [-2]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 8                                 
 9                                 
10                                 
11                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 8                                 
 9                                 
10                                 
11                                 

System can be split into 8 systems
Solving system # 0
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(10, 10) - {'options': [(9, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 10) - {'options': [(9, 11)], 'scores': [-3]}
This system has 1 move so it already solved!
Solving system # 6
(8, 9) - {'options': [(9, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 7
(10, 9) - {'options': [(10, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(6, 9): {'options': [(7, 9)], 'scores': [1]}
(9, 10): {'options': [(9, 11)], 'scores': [-3]}
(10, 10): {'options': [(9, 10)], 'scores': [3]}
(8, 10): {'options': [(8, 9)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(8, 9): {'options': [(9, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     4   5   6   7   8   9  10  11  
 8                                 
 9                                 
10                                 
11                                 


The initial system score was 295
The maximum obtainable for the system is 296
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     4   5   6   7   8   9  10  11  
 8                                 
 9                                 
10                                 
11                                 

Cell Scores:
     4   5   6   7   8   9  10  11  
 8                                 
 9                                 
10                                 
11                                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(7, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-3]}
(10, 10) - {'options': [(9, 10)], 'scores': [3]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 13) - {'options': [(12, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 8) - {'options': [(4, 8)], 'scores': [1]}
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(3, 7) - {'options': [(3, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 10) - {'options': [(13, 9)], 'scores': [2]}
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(7, 9)], 'scores': [1]}, (13, 13): {'options': [(12, 13)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [3]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [-3]}, (3, 8): {'options': [(4, 8)], 'scores': [1]}, (3, 7): {'options': [(3, 8)], 'scores': [1]}, (8, 9): {'options': [(9, 9)], 'scores': [1]}, (13, 10): {'options': [(13, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 10)], 'scores': [-2]}}
-------------------------- running turn 25 ---------------------------
[((3, 8), 1.0, [(2, 8), (4, 8)]), ((2, 8), 1.0, [(3, 8)]), ((7, 9), 1.0, [(8, 9)]), ((5, 9), 1.3333333333333333, [(7, 9), (4, 8), (3, 8), (8, 9)]), ((4, 8), 1.5, [(3, 8), (5, 9), (2, 8)]), ((9, 11), 1.5, [(9, 10), (8, 10), (10, 10)]), ((10, 9), 1.5, [(10, 10), (9, 10), (8, 9)]), ((9, 10), 2.0, [(9, 11), (8, 10), (10, 10), (8, 9), (10, 9), (7, 9)]), ((10, 10), 2.0, [(9, 10), (10, 9), (9, 11), (8, 10)]), ((8, 9), 2.0, [(8, 10), (7, 9)]), ((8, 10), 2.5, [(9, 10), (8, 9), (9, 11), (7, 9), (10, 10)])]
There are 2 groups
[(3, 8), (2, 8), (5, 9), (4, 8)]
[(5, 9), (9, 10), (4, 8), (10, 10), (8, 10), (8, 9), (9, 11), (10, 9), (7, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 35
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 4, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -51
(10, 3) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  5 attack_ratio = -1 health_diffs = -50
(12,13) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 25
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,11) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -67
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,12) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -25
( 9, 2) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 10
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -15
(13, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  2
(14, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 45
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  32  33  30  30  30  29  28              
 4              29  29  31  32  33  34  34  32  32  32  30  30  29              
 5          29  29  29  31  32  34  35  35  34  34  32  30  30  30  29          
 6          29  29  32  30  31  33  34  35  35  33  32  33  29  30  30          
 7      30  30  31  30  31  34  30  31  37  34  33  32  31  30  31  31  30      
 8      30  30  32  33  33  31  34  35  33  34  36  31  30  34  31  31  31      
 9      30  33  32  34  36  34  35  36  38  37  33  36  33  32  33  33  32      
10      30  30  32  34  34  34  35  36  39  37  33  33  34  33  33  32  31      
11      30  30  32  32  32  35  33  34  36  35  36  32  33  33  32  31  30      
12          30  31  32  32  31  32  36  35  34  33  33  33  32  31  30          
13          29  30  31  32  32  33  33  35  35  33  33  32  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(8, 9), (10, 10), (8, 10), (9, 10), (9, 11), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
6 participants
     6   7   8   9  10  11  
 8                         
 9           X   -   X     
10           X   X   X     
11               X         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     6   7   8   9  10  11  
 8                         
 9           X   -   X     
10           X   X   X     
11               X         
12                         

System can be split into 2 systems
Solving system # 0
(8, 9) - {'options': [(9, 9), (8, 10)], 'scores': [2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10)], 'scores': [2, 0, 0]}
(8, 10) - {'options': [(9, 10), (8, 10)], 'scores': [3, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (10, 10), (9, 11), (8, 10)], 'scores': [0, -1, -2, -3, -3]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [3, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 10)], 'scores': [1, 0, 0]}
This subsystem has less than 10000 options, solving
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [1]}
Solving system # 1
(7, 9) - {'options': [(8, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         


The initial system score was 256
The maximum obtainable for the system is 259
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         

Cell Scores:
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         

System can be split into 7 systems
Solving system # 0
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(7, 9) - {'options': [(8, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         


The initial system score was 256
The maximum obtainable for the system is 259
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         

Cell Scores:
     6   7   8   9  10  11  
 8                         
 9                         
10                         
11                         
12                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [1]}


The system did not get simpler in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(4, 8): {'options': [(4, 9)], 'scores': [1]}
(2, 8): {'options': [(2, 9)], 'scores': [3]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(3, 8): {'options': [(4, 8)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  
 7                                             
 8                                             
 9                                             
10                                             
11                                             
12                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  
 7                                             
 8                                             
 9                                             
10                                             
11                                             
12                                             

System can be split into 11 systems
Solving system # 0
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(3, 8) - {'options': [(4, 8)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 4
(4, 8) - {'options': [(4, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 8
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 9
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 10
(7, 9) - {'options': [(8, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(4, 8): {'options': [(4, 9)], 'scores': [1]}
(2, 8): {'options': [(2, 9)], 'scores': [3]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(3, 8): {'options': [(4, 8)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     1   2   3   4   5   6   7   8   9  10  11  
 7                                             
 8                                             
 9                                             
10                                             
11                                             
12                                             


The initial system score was 387
The maximum obtainable for the system is 395
The score gain were looking for is 8
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  
 7                                             
 8                                             
 9                                             
10                                             
11                                             
12                                             

Cell Scores:
     1   2   3   4   5   6   7   8   9  10  11  
 7                                             
 8                                             
 9                                             
10                                             
11                                             
12                                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(4, 8) - {'options': [(4, 9)], 'scores': [1]}
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(3, 8) - {'options': [(4, 8)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 13) - {'options': [(12, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [3]}
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (3, 8): {'options': [(4, 8)], 'scores': [1]}, (4, 8): {'options': [(4, 9)], 'scores': [1]}, (12, 13): {'options': [(12, 13)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [3]}, (8, 9): {'options': [(9, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [1]}}
-------------------------- running turn 26 ---------------------------
[((4, 9), 1.0, [(5, 9), (4, 8)]), ((7, 9), 1.0, [(8, 9)]), ((5, 9), 1.5, [(4, 9), (7, 9), (4, 8)]), ((4, 8), 1.5, [(4, 9), (5, 9), (2, 8)]), ((9, 11), 1.5, [(9, 10), (8, 10), (10, 10)]), ((10, 10), 2.0, [(9, 10), (10, 9), (9, 11), (8, 10)]), ((8, 9), 2.0, [(8, 10), (7, 9)]), ((10, 9), 2.0, [(10, 10), (9, 10), (8, 9), (12, 9)]), ((8, 10), 2.5, [(9, 10), (8, 9), (9, 11), (7, 9), (10, 10)]), ((9, 10), 2.5, [(9, 11), (8, 10), (10, 10), (8, 9), (10, 9)])]
There are 1 groups
[(5, 9), (4, 9), (4, 8), (2, 8), (8, 10), (8, 9), (9, 10), (10, 9), (7, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -65
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -42
( 4, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -13
( 8, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -94
(12, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
(12,13) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  8
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -60
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 25
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 7, 9) (friendly)  vulnerability =  1 attack_ratio = -2 health_diffs = -160
( 4, 6) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9, 2) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -25
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  5
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -5
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 12
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  32  33  30  30  30  29  28              
 4              29  29  31  32  33  34  34  32  32  32  31  30  29              
 5          29  29  29  31  33  34  35  36  34  34  33  31  30  30  29          
 6          29  29  32  31  32  34  35  36  36  34  33  30  29  30  30          
 7      30  30  31  31  32  32  32  33  35  35  33  31  32  31  29  30  30      
 8      30  30  32  32  32  32  32  33  35  33  36  32  31  31  32  32  31      
 9      30  33  32  34  34  32  33  35  37  37  34  34  34  34  34  33  32      
10      30  30  32  33  33  35  34  35  38  36  32  35  33  33  33  32  31      
11      30  30  32  33  33  33  34  35  36  35  35  31  32  33  32  31  30      
12          30  31  32  33  32  33  36  35  34  33  32  33  32  31  30          
13          29  30  31  32  33  33  33  35  35  33  33  32  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
Awarded move for (8, 9)  to (9, 9)
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(4, 9) - {'options': [(4, 10)], 'scores': [-1]}
(4, 8) - {'options': [(4, 9)], 'scores': [2]}
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (10, 11), (11, 10)], 'scores': [2, 1, 0, -1, -4]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 11), (8, 10), (7, 10)], 'scores': [3, 0, 0, 0, -1]}
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [2, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 10), (9, 11), (10, 10), (8, 10)], 'scores': [0, -2, -2, -3]}
(12, 9) - {'options': [(12, 10)], 'scores': [1]}
(10, 9) - {'options': [(10, 9), (10, 10), (11, 9)], 'scores': [0, -1, -3]}
(7, 9) - {'options': [(8, 9), (7, 10), (7, 9)], 'scores': [2, 1, 0]}
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(4, 9) - {'options': [(4, 10)], 'scores': [-1]}
(4, 8) - {'options': [(4, 9)], 'scores': [2]}
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [3]}
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-2]}
(12, 9) - {'options': [(12, 10)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [2]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(4, 9): {'options': [(4, 10)], 'scores': [-1]}
(4, 8): {'options': [(4, 9)], 'scores': [2]}
(2, 8): {'options': [(2, 9)], 'scores': [3]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(9, 10)], 'scores': [3]}
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(9, 11): {'options': [(8, 11)], 'scores': [-1]}
(9, 10): {'options': [(9, 11)], 'scores': [-2]}
(12, 9): {'options': [(12, 10)], 'scores': [1]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [2]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  12  13  
 7                                                     
 8                                                     
 9                                                     
10                                                     
11                                                     
12                                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  12  13  
 7                                                     
 8                                                     
 9                                                     
10                                                     
11                                                     
12                                                     

System can be split into 12 systems
Solving system # 0
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(4, 9) - {'options': [(4, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 4
(4, 8) - {'options': [(4, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(8, 10) - {'options': [(9, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 6
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 7
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 8
(9, 10) - {'options': [(9, 11)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 9
(12, 9) - {'options': [(12, 10)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 10
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 11
(7, 9) - {'options': [(8, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(5, 9)], 'scores': [0]}
(4, 9): {'options': [(4, 10)], 'scores': [-1]}
(4, 8): {'options': [(4, 9)], 'scores': [2]}
(2, 8): {'options': [(2, 9)], 'scores': [3]}
(10, 10): {'options': [(10, 10)], 'scores': [0]}
(8, 10): {'options': [(9, 10)], 'scores': [3]}
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(9, 11): {'options': [(8, 11)], 'scores': [-1]}
(9, 10): {'options': [(9, 11)], 'scores': [-2]}
(12, 9): {'options': [(12, 10)], 'scores': [1]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
(7, 9): {'options': [(8, 9)], 'scores': [2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     1   2   3   4   5   6   7   8   9  10  11  12  13  
 7                                                     
 8                                                     
 9                                                     
10                                                     
11                                                     
12                                                     


The initial system score was 414
The maximum obtainable for the system is 423
The score gain were looking for is 9
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     1   2   3   4   5   6   7   8   9  10  11  12  13  
 7                                                     
 8                                                     
 9                                                     
10                                                     
11                                                     
12                                                     

Cell Scores:
     1   2   3   4   5   6   7   8   9  10  11  12  13  
 7                                                     
 8                                                     
 9                                                     
10                                                     
11                                                     
12                                                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(4, 9) - {'options': [(4, 10)], 'scores': [-1]}
(4, 8) - {'options': [(4, 9)], 'scores': [2]}
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [3]}
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-2]}
(12, 9) - {'options': [(12, 10)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 13) - {'options': [(12, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (4, 9): {'options': [(4, 10)], 'scores': [-1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (12, 13): {'options': [(12, 13)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (4, 8): {'options': [(4, 9)], 'scores': [2]}, (8, 10): {'options': [(9, 10)], 'scores': [3]}, (8, 9): {'options': [(9, 9)], 'scores': [2]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (9, 10): {'options': [(9, 11)], 'scores': [-2]}, (12, 9): {'options': [(12, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [2]}}
-------------------------- running turn 27 ---------------------------
[((5, 9), 1.0, [(4, 9), (4, 10)]), ((4, 9), 1.0, [(4, 10), (5, 9)]), ((4, 10), 1.0, [(4, 9), (5, 9)]), ((8, 11), 1.0, [(9, 11)]), ((10, 9), 1.5, [(9, 9), (10, 10), (9, 10)]), ((9, 9), 2.0, [(9, 10), (10, 9)]), ((9, 11), 2.0, [(9, 10), (8, 11), (9, 9), (10, 10)]), ((10, 10), 2.5, [(9, 10), (10, 9), (12, 10), (9, 11), (9, 9)]), ((9, 10), 2.5, [(9, 11), (9, 9), (10, 10), (8, 11), (10, 9)])]
There are 2 groups
[(5, 9), (4, 9), (4, 10)]
[(10, 10), (8, 11), (9, 9), (9, 10), (9, 11), (12, 10), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -65
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -47
( 2, 8) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -13
(13, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -1
(12,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
(12,10) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -60
( 4,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 15
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 15
( 4, 6) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  4 attack_ratio = -1 health_diffs = -65
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -52
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  2
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  32  33  30  30  30  29  28              
 4              29  29  31  32  33  34  34  32  32  32  31  30  29              
 5          29  29  29  31  33  34  35  36  34  34  33  32  31  30  29          
 6          29  29  32  31  32  34  35  36  36  34  34  32  31  31  30          
 7      30  30  31  31  32  32  32  33  35  35  34  33  31  30  31  31  30      
 8      30  30  32  32  32  32  32  33  35  33  35  31  32  32  30  31  31      
 9      30  33  32  34  34  32  33  35  37  37  35  34  33  32  33  33  32      
10      30  30  32  33  33  35  34  35  38  37  33  33  33  33  33  32  31      
11      30  30  32  33  33  33  34  35  36  34  34  33  31  32  32  31  30      
12          30  31  32  33  32  33  36  35  34  32  31  32  32  31  30          
13          29  30  31  32  33  33  33  35  35  33  32  32  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(4, 9) - {'options': [(4, 9)], 'scores': [0]}
(4, 10) - {'options': [(5, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 13) - {'options': [(11, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(12, 10) - {'options': [(12, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 10): {'options': [(9, 10)], 'scores': [1]}
(8, 11): {'options': [(8, 12)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 9)], 'scores': [-1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(12, 10): {'options': [(12, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [0]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

System can be split into 7 systems
Solving system # 0
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(12, 10) - {'options': [(12, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 6
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 10): {'options': [(9, 10)], 'scores': [1]}
(8, 11): {'options': [(8, 12)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 9)], 'scores': [-1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(12, 10): {'options': [(12, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             


The initial system score was 253
The maximum obtainable for the system is 255
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

Cell Scores:
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(12, 10) - {'options': [(12, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (4, 9): {'options': [(4, 9)], 'scores': [0]}, (4, 10): {'options': [(5, 10)], 'scores': [0]}, (12, 13): {'options': [(11, 13)], 'scores': [1]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (8, 11): {'options': [(8, 12)], 'scores': [1]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (9, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [-1]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (12, 10): {'options': [(12, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [0]}}
-------------------------- running turn 28 ---------------------------
[((5, 9), 1.0, [(5, 10), (4, 9)]), ((4, 9), 1.0, [(5, 9), (5, 10)]), ((8, 11), 1.0, [(9, 11)]), ((5, 10), 1.0, [(5, 9)]), ((10, 10), 2.0, [(9, 10), (10, 9), (9, 11), (9, 9)]), ((9, 9), 2.0, [(9, 10), (10, 9)]), ((9, 11), 2.0, [(9, 10), (8, 11), (9, 9), (10, 10)]), ((10, 9), 2.0, [(9, 9), (10, 10), (9, 10), (12, 9)]), ((9, 10), 2.5, [(9, 11), (9, 9), (10, 10), (8, 11), (10, 9)])]
There are 2 groups
[(5, 9), (4, 9), (5, 10)]
[(10, 10), (8, 11), (9, 9), (9, 10), (9, 11), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -65
( 4, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -42
( 2, 8) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -11
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -1
(12, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -95
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -35
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 35
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -52
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 17
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  4 attack_ratio = -1 health_diffs = -67
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -54
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  5
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 12
(13, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 45
(11,13) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  32  33  30  30  30  29  28              
 4              29  30  31  32  33  34  34  32  32  32  31  30  29              
 5          29  30  30  32  33  34  35  36  34  34  33  32  31  30  29          
 6          30  30  30  32  33  35  35  36  36  34  34  33  32  31  30          
 7      30  29  30  33  31  32  33  34  35  35  34  34  33  32  32  31  30      
 8      30  30  31  31  32  33  30  34  36  33  36  33  31  31  32  32  31      
 9      30  33  32  33  33  31  35  34  36  37  34  33  33  33  31  32  32      
10      30  30  32  33  33  34  33  34  38  37  34  33  30  30  32  32  31      
11      30  30  32  33  33  33  33  35  36  35  35  31  32  30  31  31  30      
12          30  31  32  33  32  33  36  35  34  33  32  31  31  31  30          
13          29  30  31  32  33  33  33  35  35  33  33  31  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 10)], 'scores': [0]}
(4, 9) - {'options': [(5, 9)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [1]}
Awarded move for (12, 9)  to (11, 9)
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [-2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 10): {'options': [(9, 10)], 'scores': [1]}
(8, 11): {'options': [(8, 12)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [1]}
(9, 10): {'options': [(9, 9)], 'scores': [-2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(12, 9): {'options': [(11, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [0]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

System can be split into 7 systems
Solving system # 0
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 9) - {'options': [(10, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 9)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 6
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 10): {'options': [(9, 10)], 'scores': [1]}
(8, 11): {'options': [(8, 12)], 'scores': [1]}
(9, 9): {'options': [(10, 9)], 'scores': [1]}
(9, 10): {'options': [(9, 9)], 'scores': [-2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(12, 9): {'options': [(11, 9)], 'scores': [1]}
(10, 9): {'options': [(10, 10)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             


The initial system score was 252
The maximum obtainable for the system is 254
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

Cell Scores:
     7   8   9  10  11  12  13  
 8                             
 9                             
10                             
11                             
12                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
(9, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [-2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 13) - {'options': [(10, 13)], 'scores': [2]}
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (8, 11): {'options': [(8, 12)], 'scores': [1]}, (9, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [-2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [0]}, (11, 13): {'options': [(10, 13)], 'scores': [2]}}
-------------------------- running turn 29 ---------------------------
[((10, 13), 0.6666666666666666, [(9, 11), (10, 10)]), ((5, 9), 1.0, [(5, 10), (4, 9)]), ((4, 9), 1.0, [(5, 9), (5, 10)]), ((11, 9), 1.0, [(10, 9)]), ((5, 10), 1.0, [(5, 9)]), ((8, 11), 1.0, [(9, 11)]), ((9, 9), 2.0, [(9, 10), (10, 9)]), ((9, 11), 2.0, [(9, 10), (8, 11), (9, 9), (10, 10)]), ((10, 9), 2.0, [(11, 9), (9, 9), (10, 10), (9, 10)]), ((10, 10), 2.5, [(9, 10), (10, 9), (9, 11), (11, 9), (9, 9)]), ((9, 10), 2.5, [(9, 11), (9, 9), (10, 10), (8, 11), (10, 9)])]
There are 2 groups
[(10, 10), (10, 13), (11, 9), (9, 9), (9, 10), (9, 11), (8, 11), (10, 9)]
[(5, 9), (4, 9), (5, 10)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -57
( 4, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -42
( 2, 8) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  2
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -11
(10, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -2
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -35
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 45
(10,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -44
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 19
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -45
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  4 attack_ratio = -1 health_diffs = -69
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -54
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  5
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(13, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  32  33  30  30  30  29  28              
 4              29  30  31  32  33  34  34  32  32  32  31  30  29              
 5          29  30  30  32  33  34  35  36  34  34  33  32  31  30  29          
 6          30  30  30  32  33  35  35  36  36  34  34  33  32  31  30          
 7      30  29  30  33  31  32  33  34  35  35  34  34  33  33  32  31  30      
 8      30  30  31  31  32  33  30  34  36  33  36  33  31  32  33  32  31      
 9      30  33  32  33  33  31  35  34  36  37  34  33  33  30  32  33  32      
10      30  30  32  33  33  34  33  34  38  37  33  31  31  31  30  31  31      
11      30  30  32  33  33  33  33  35  36  35  36  32  29  30  31  31  30      
12          30  31  32  33  32  33  36  35  34  33  33  32  31  31  30          
13          29  30  31  32  33  33  33  35  35  33  33  32  31  30  29          
14              29  30  31  32  33  33  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 10)], 'scores': [0]}
(4, 9) - {'options': [(5, 9)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [1]}
determine_ideal_outcome called with [(10, 10), (8, 11), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  12  
 8           -       -     
 9           X   X   X     
10           X   X         
11       X   X             
12       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  12  
 8           -       -     
 9           X   X   X     
10           X   X         
11       X   X             
12       -                 

determine_ideal_outcome called with [(10, 10), (8, 11), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)]
outcome = 
num_optional - 4
optional - [(8, 12), (11, 8), (9, 8), (9, 9), (9, 11)]
occupied - [(9, 10), (10, 10), (10, 9)]
available_bots - [(10, 10), (8, 11), (11, 9), (9, 9), (9, 10), (9, 11), (10, 9)]
levels - {36: [(8, 12), (11, 8), (9, 8), (9, 9), (9, 11)], 37: [(10, 10), (10, 9)], 38: [(9, 10)]}
max_score - 256

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  12  
 8           4       4     
 9           4   X         
10           X   X         
11           4             
12       4                 


The initial system score was 253
The maximum obtainable for the system is 256
The score gain were looking for is 3
bots_in_optional = [(9, 9), (9, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 11), (11, 9)]
bots_outside_system_moving_to_optional  = [(8, 11)]
bots_in_occupied = [(10, 10), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 3
current_bots_in_optional = [(9, 9), (9, 11), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 9), (9, 11)]
current_bots_in_occupied = [(10, 10), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (10, 9)]
current_bots_outside = [(11, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 10), (9, 10), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  12  
 8           -       -     
 9           ?   0   X     
10           0   0         
11       X   ?             
12       -                 

Cell Scores:
     7   8   9  10  11  12  
 8          34      35     
 9          36  38  36     
10          37  37         
11      36  34             
12      33                 

The system now has a total of 864 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 864 options
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10)], 'scores': [1, 0, 0]}
(8, 11) - {'options': [(9, 11), (8, 12)], 'scores': [1, 1]}
(11, 9) - {'options': [(10, 9), (11, 8)], 'scores': [3, 2]}
(9, 9) - {'options': [(9, 10), (10, 9), (9, 8)], 'scores': [2, 1, 0]}
(9, 10) - {'options': [(9, 10), (10, 10), (9, 11), (9, 9)], 'scores': [0, -1, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 9), (10, 10), (9, 9)], 'scores': [0, 0, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 864 combinations
Ran full set of options and didnt find top result
Score is 3
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(8, 12)], 'scores': [1]}
(11, 9) - {'options': [(10, 9)], 'scores': [3]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(2, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 13) - {'options': [(9, 13)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [3]}, (10, 13): {'options': [(9, 13)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [3]}, (9, 9): {'options': [(9, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [-2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [1]}, (8, 11): {'options': [(8, 12)], 'scores': [1]}, (10, 9): {'options': [(10, 10)], 'scores': [0]}}
-------------------------- running turn 30 ---------------------------
[((5, 9), 1.0, [(5, 10), (4, 9)]), ((9, 13), 1.0, [(9, 11), (9, 10), (8, 11)]), ((8, 11), 1.0, [(9, 11), (9, 10)]), ((5, 10), 1.0, [(5, 9)]), ((10, 9), 1.0, [(10, 10), (9, 10)]), ((4, 9), 1.5, [(5, 9), (5, 10), (2, 9)]), ((10, 10), 1.5, [(9, 10), (10, 9), (9, 11)]), ((9, 10), 2.0, [(9, 11), (10, 10), (8, 11), (10, 9)]), ((9, 11), 2.0, [(9, 10), (8, 11), (9, 13), (10, 10)])]
There are 2 groups
[(5, 9), (4, 9), (5, 10), (2, 9)]
[(9, 13), (10, 10), (8, 11), (9, 10), (9, 11), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -49
( 4, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -42
( 7,12) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -19
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -11
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  2
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -34
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(10, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 2,10) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -2
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 9,13) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -1
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 9, 2) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10  10   9  10                              
 2                      10  10  31  32  32  30  30  10  10                      
 3               0  10  30  31  32  32  32  33  30  30  30  10   0              
 4              10  30  31  32  33  34  34  32  32  32  31  30  10              
 5          10  30  30  32  33  34  35  36  34  34  33  32  31  30  10          
 6          10  30  30  32  33  35  35  36  36  34  34  32  32  31  10          
 7      10  30  30  33  31  32  33  34  35  35  34  33  32  31  32  31  10      
 8      10  31  32  31  32  33  30  34  36  33  35  31  33  30  31  32  10      
 9       9  31  33  34  33  31  35  34  36  37  34  32  31  34  32  32  10      
10       8  32  31  32  33  34  32  35  38  36  32  35  31  31  32  32  10      
11       9  29  31  33  33  32  32  36  37  35  35  31  32  32  32  31  10      
12           9  31  32  32  31  35  34  36  35  33  32  33  32  31  10          
13          10  30  31  32  32  32  34  36  35  33  33  32  31  30  10          
14              10  30  31  32  32  34  35  34  33  32  31  30  10              
15               0  10  30  31  32  33  34  33  32  31  30  10   0              
16                      10  10  31  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 10)], 'scores': [0]}
(4, 9) - {'options': [(4, 9)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [1]}
(2, 9) - {'options': [(3, 9)], 'scores': [2]}
determine_ideal_outcome called with [(9, 13), (10, 10), (8, 11), (9, 10), (9, 11), (10, 9)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  11  
 8                     
 9           -   X     
10           X   X     
11       X   X         
12           -         
13           X         
14                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  11  
 8                     
 9           -   X     
10           X   X     
11       X   X         
12           -         
13           X         
14                     

determine_ideal_outcome called with [(9, 13), (10, 10), (8, 11), (9, 10), (9, 11), (10, 9)]
outcome = 
num_optional - 3
optional - [(9, 13), (10, 10), (8, 11), (9, 9), (9, 12)]
occupied - [(9, 10), (9, 11), (10, 9)]
available_bots - [(9, 13), (10, 10), (8, 11), (9, 10), (9, 11), (10, 9)]
levels - {36: [(9, 13), (10, 10), (8, 11), (9, 9), (9, 12)], 37: [(9, 11), (10, 9)], 38: [(9, 10)]}
max_score - 220

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  11  
 8                     
 9           3   X     
10           X   3     
11       3   X         
12           3         
13           3         
14                     


The initial system score was 220
The maximum obtainable for the system is 220
The score gain were looking for is 0
bots_in_optional = [(9, 13), (10, 10), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 11), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(9, 13), (10, 10), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 10), (8, 11)]
current_bots_in_occupied = [(9, 10), (9, 11), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 11), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 11), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  11  
 8                     
 9           -   0     
10           0   ?     
11       ?   0         
12           -         
13           ?         
14                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9          36  38     
10          37  36     
11      35  34         
12          32         
13          31         
14                     

The system now has a total of 576 options
Optional squares exist

System result = ...
The system has a total of 576 options
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [0, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10)], 'scores': [2, 1, 0]}
(8, 11) - {'options': [(9, 11), (8, 11)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (10, 10), (9, 9)], 'scores': [0, -1, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (9, 12)], 'scores': [1, 0, -1, -1]}
(10, 9) - {'options': [(10, 9), (9, 9), (10, 10)], 'scores': [0, -1, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 576 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [2]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [-2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 2)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [0]}, (4, 9): {'options': [(4, 9)], 'scores': [0]}, (2, 9): {'options': [(3, 9)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [0]}, (9, 2): {'options': [(9, 2)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [2]}, (9, 10): {'options': [(9, 9)], 'scores': [-2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 31 ---------------------------
[((17, 10), 0.3333333333333333, [(17, 8)]), ((16, 5), 0.42857142857142855, [(16, 6), (17, 8), (17, 10)]), ((16, 6), 0.5, [(16, 5), (17, 8), (17, 10)]), ((17, 8), 0.6, [(17, 10), (16, 6), (16, 5)]), ((5, 10), 1.0, [(5, 9)]), ((3, 9), 1.0, [(4, 9)]), ((10, 9), 1.0, [(9, 9), (9, 10)]), ((5, 9), 1.5, [(5, 10), (4, 9), (3, 9)]), ((4, 9), 1.5, [(5, 9), (3, 9), (5, 10)]), ((8, 11), 1.5, [(9, 11), (9, 10), (9, 12)]), ((9, 12), 1.5, [(9, 11), (9, 10), (8, 11)]), ((9, 9), 2.0, [(9, 10), (10, 9)]), ((9, 11), 2.0, [(9, 10), (8, 11), (9, 12), (9, 9)]), ((9, 10), 2.5, [(9, 11), (9, 9), (8, 11), (10, 9), (9, 12)])]
There are 3 groups
[(17, 10), (16, 6), (17, 8), (16, 5)]
[(5, 9), (3, 9), (4, 9), (5, 10)]
[(8, 11), (9, 9), (9, 10), (9, 11), (9, 12), (10, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -40
( 4, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  8
(16, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -19
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -20
(17, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -34
( 6, 2) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 2,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9, 1) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 46
( 3,10) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -52
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -35
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -39
(17,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  2
(14,15) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
(16,12) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(16, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
( 9, 2) (friendly)  vulnerability =  7 attack_ratio = -1 health_diffs = -50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -45
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 10
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  32  28  29                              
 2                      27  30  29  30  30  29  30  30  29                      
 3              26  28  29  29  31  32  31  33  30  30  30  29  28              
 4              29  28  30  31  33  34  34  32  32  32  31  30  29              
 5          28  28  29  32  33  34  35  36  34  34  33  32  31  30  29          
 6          30  29  30  32  33  35  36  36  36  34  33  33  32  31  30          
 7      30  30  30  33  31  32  34  35  36  35  33  32  32  33  32  31  30      
 8      31  32  31  31  32  34  31  32  37  33  34  32  30  32  33  32  31      
 9      32  32  32  33  33  30  34  36  35  36  32  30  34  33  33  33  32      
10      30  29  33  31  32  34  31  34  37  36  32  33  31  32  33  31  31      
11      29  28  29  32  33  32  32  35  37  35  35  31  31  33  31  29  29      
12          30  28  31  32  31  35  34  36  35  33  32  33  31  29  30          
13          27  29  31  32  32  32  34  36  35  33  33  32  31  29  27          
14              29  30  31  32  32  34  35  34  33  32  31  30  29              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(3, 9) - {'options': [(3, 10)], 'scores': [1]}
(4, 9) - {'options': [(4, 9)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 9)], 'scores': [1]}
(17, 8) - {'options': [(16, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 6) - {'options': [(15, 6)], 'scores': [1]}
(16, 5) - {'options': [(16, 6)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 11) - {'options': [(9, 11)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 1)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 15) - {'options': [(13, 15)], 'scores': [1]}
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (17, 8): {'options': [(16, 8)], 'scores': [1]}, (4, 9): {'options': [(4, 9)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [2]}, (16, 6): {'options': [(15, 6)], 'scores': [1]}, (17, 10): {'options': [(17, 9)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [2]}, (9, 9): {'options': [(9, 8)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 2): {'options': [(9, 1)], 'scores': [2]}, (9, 11): {'options': [(9, 12)], 'scores': [-1]}, (14, 15): {'options': [(13, 15)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (16, 5): {'options': [(16, 6)], 'scores': [1]}, (3, 9): {'options': [(3, 10)], 'scores': [1]}, (9, 12): {'options': [(9, 13)], 'scores': [0]}}
-------------------------- running turn 32 ---------------------------
[((15, 6), 0.5, [(16, 6), (16, 8)]), ((10, 9), 0.5, [(9, 10)]), ((16, 8), 0.6, [(16, 6), (17, 9), (15, 6)]), ((16, 6), 0.6, [(15, 6), (16, 8), (17, 9)]), ((17, 9), 0.6, [(16, 8), (16, 6), (15, 6)]), ((5, 9), 1.0, [(5, 10), (4, 9)]), ((5, 10), 1.0, [(5, 9)]), ((9, 13), 1.0, [(9, 12), (9, 11), (9, 10)]), ((4, 9), 1.5, [(5, 9), (3, 10), (5, 10)]), ((9, 10), 1.5, [(9, 11), (10, 9), (9, 12)]), ((9, 11), 1.5, [(9, 10), (9, 12), (9, 13)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 10)])]
There are 3 groups
[(16, 6), (15, 6), (16, 8), (17, 9)]
[(9, 10), (9, 13), (9, 11), (9, 12), (10, 9)]
[(5, 9), (3, 10), (4, 9), (5, 10)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -31
( 4, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 4, 4) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
(16, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -16
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -25
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  0
(15,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -35
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 1) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
(10, 3) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 3,10) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  2
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -35
( 6, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 9) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -39
(12, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,15) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 25
( 3,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
(16, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(17, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  31  30  29  30                              
 2                      28  28  29  30  31  30  30  30  29                      
 3              27  26  27  31  30  30  32  33  30  30  30  29  28              
 4              27  30  28  29  32  34  34  32  32  32  31  30  29              
 5          29  29  28  31  32  34  35  36  34  34  32  32  31  30  29          
 6          30  30  29  32  33  35  36  36  36  33  32  32  32  31  30          
 7      30  30  30  33  31  32  34  35  36  34  32  33  32  32  32  31  30      
 8      31  32  32  31  32  34  31  32  37  34  33  30  32  34  33  32  31      
 9      32  33  33  34  33  30  34  36  35  34  31  34  34  34  34  33  32      
10      31  31  30  32  33  34  31  34  36  35  33  31  33  34  32  32  31      
11      29  28  30  30  32  32  32  35  37  34  34  31  33  32  30  30  30      
12          27  29  29  31  31  35  34  36  35  32  33  32  30  31  28          
13          28  27  30  32  32  32  34  36  35  33  33  32  30  28  28          
14              28  30  31  32  32  34  35  34  33  32  31  30  28              
15              28  29  30  31  32  33  34  33  32  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 10)], 'scores': [0]}
(3, 10) - {'options': [(3, 9)], 'scores': [3]}
(4, 9) - {'options': [(4, 9)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 6) - {'options': [(15, 6)], 'scores': [1]}
(15, 6) - {'options': [(15, 7)], 'scores': [1]}
(16, 8) - {'options': [(15, 8)], 'scores': [1]}
(17, 9) - {'options': [(16, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(9, 2)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 15) - {'options': [(13, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [0]}, (13, 15): {'options': [(13, 14)], 'scores': [1]}, (4, 9): {'options': [(4, 9)], 'scores': [0]}, (9, 1): {'options': [(9, 2)], 'scores': [1]}, (16, 6): {'options': [(15, 6)], 'scores': [1]}, (3, 10): {'options': [(3, 9)], 'scores': [3]}, (16, 8): {'options': [(15, 8)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (5, 10): {'options': [(6, 10)], 'scores': [1]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (17, 9): {'options': [(16, 9)], 'scores': [1]}}
-------------------------- running turn 33 ---------------------------
[((15, 6), 0.6, [(15, 7), (15, 8), (16, 9)]), ((16, 9), 0.75, [(15, 8), (15, 7), (15, 6)]), ((15, 8), 0.75, [(15, 7), (16, 9), (15, 6)]), ((15, 7), 0.75, [(15, 6), (15, 8), (16, 9)]), ((9, 13), 1.0, [(9, 12), (9, 11), (9, 10)]), ((9, 9), 1.0, [(9, 10)]), ((5, 10), 1.0, [(5, 9)]), ((3, 9), 1.0, [(4, 9), (5, 9), (5, 10)]), ((5, 9), 1.5, [(5, 10), (4, 9), (3, 9)]), ((4, 9), 1.5, [(5, 9), (3, 9), (5, 10)]), ((9, 10), 1.5, [(9, 11), (9, 9), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 10)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (9, 9)])]
There are 3 groups
[(16, 9), (15, 6), (15, 8), (15, 7)]
[(9, 10), (9, 13), (9, 11), (9, 9), (9, 12)]
[(5, 9), (3, 9), (5, 10), (4, 9)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -21
( 4, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15,13) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -8
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -57
( 4,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = -50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -36
(16, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 8, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -3
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -3
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(13,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -17
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  30  29  29                              
 2                      29  28  27  30  29  31  29  29  29                      
 3              28  28  29  29  31  29  31  31  31  31  30  29  28              
 4              28  28  30  31  31  32  35  33  33  32  31  30  29              
 5          28  28  30  30  32  33  35  36  35  33  33  32  31  30  29          
 6          30  29  28  31  33  35  36  36  35  32  33  33  32  31  30          
 7      30  30  30  32  31  32  34  35  35  33  34  31  33  33  32  31  30      
 8      31  32  32  31  32  34  31  32  37  33  32  31  33  34  33  32  31      
 9      32  33  34  33  33  30  34  36  35  34  30  35  34  34  34  33  32      
10      31  32  32  30  32  34  31  34  36  35  33  31  33  34  33  32  31      
11      30  30  29  31  30  31  32  35  37  34  34  31  33  33  31  31  30      
12          29  28  30  29  30  35  34  36  35  32  33  33  31  29  29          
13          29  29  28  31  32  32  34  36  35  33  33  31  29  30  27          
14              29  29  31  32  32  34  35  34  33  32  31  29  27              
15              28  29  30  31  32  33  34  33  32  31  30  29  27              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(4, 9)], 'scores': [0]}
(3, 9) - {'options': [(2, 9)], 'scores': [-1]}
(4, 9) - {'options': [(3, 9)], 'scores': [1]}
(5, 10) - {'options': [(6, 10)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(9, 1)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(15, 9)], 'scores': [1]}
(15, 6) - {'options': [(15, 7)], 'scores': [1]}
(15, 8) - {'options': [(14, 8)], 'scores': [1]}
(15, 7) - {'options': [(15, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(12, 14)], 'scores': [1]}
settle_sys returned with {(5, 9): {'options': [(4, 9)], 'scores': [0]}, (4, 9): {'options': [(3, 9)], 'scores': [1]}, (9, 1): {'options': [(9, 1)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (16, 9): {'options': [(15, 9)], 'scores': [1]}, (9, 9): {'options': [(9, 8)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (13, 14): {'options': [(12, 14)], 'scores': [1]}, (15, 6): {'options': [(15, 7)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (15, 8): {'options': [(14, 8)], 'scores': [1]}, (15, 7): {'options': [(15, 8)], 'scores': [1]}, (5, 10): {'options': [(6, 10)], 'scores': [2]}, (3, 9): {'options': [(2, 9)], 'scores': [-1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 34 ---------------------------
[((2, 9), 0.5, [(3, 9), (4, 9)]), ((15, 8), 0.6, [(15, 9), (14, 8), (15, 7)]), ((15, 7), 0.6, [(15, 8), (14, 8), (15, 9)]), ((3, 9), 0.6666666666666666, [(4, 9), (2, 9)]), ((15, 9), 0.75, [(15, 8), (15, 7), (14, 8)]), ((14, 8), 0.75, [(15, 8), (15, 7), (15, 9)]), ((9, 13), 1.0, [(9, 12), (9, 11), (9, 10)]), ((4, 9), 1.0, [(3, 9), (2, 9)]), ((9, 9), 1.0, [(9, 10)]), ((9, 10), 1.5, [(9, 11), (9, 9), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 10)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (9, 9)])]
There are 3 groups
[(3, 9), (4, 9), (2, 9)]
[(15, 7), (15, 8), (14, 8), (15, 9)]
[(9, 10), (9, 13), (9, 11), (9, 9), (9, 12)]
frontline_radius = 0
( 4, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(11, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14,13) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -41
(15, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 34
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -41
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -2
( 4, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -73
(15, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  31  30  28                              
 2                      29  29  28  30  29  29  31  28  28                      
 3              28  29  30  30  29  31  31  31  30  30  30  29  28              
 4              29  29  31  32  32  31  34  34  32  32  31  30  29              
 5          29  29  28  31  33  34  34  36  34  34  33  32  31  30  29          
 6          29  28  30  30  32  35  36  35  33  34  34  33  32  31  30          
 7      30  30  29  31  30  32  34  34  33  34  32  34  34  33  32  31  30      
 8      31  32  32  30  32  35  30  31  35  33  30  34  35  34  33  32  31      
 9      32  33  34  33  34  31  33  35  33  31  34  34  35  35  34  33  32      
10      31  32  32  32  32  32  33  33  35  33  33  32  34  34  33  32  31      
11      30  30  30  32  30  31  31  34  37  34  33  32  33  32  32  31  30      
12          30  29  28  31  30  33  34  36  35  32  33  32  30  30  30          
13          29  30  29  30  31  32  34  36  35  33  32  30  31  28  28          
14              29  30  30  32  32  34  35  34  33  32  30  28  28              
15              28  29  30  31  32  33  34  33  32  31  30  28  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(9, 9) - {'options': [(9, 10)], 'scores': [2]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(3, 9)], 'scores': [0]}
(4, 9) - {'options': [(5, 9)], 'scores': [1]}
(2, 9) - {'options': [(2, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 14) - {'options': [(11, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 10) - {'options': [(7, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 8) - {'options': [(13, 8)], 'scores': [1]}
(15, 8) - {'options': [(15, 9)], 'scores': [1]}
(15, 7) - {'options': [(15, 8)], 'scores': [1]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(9, 1)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 13)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [1]}, (12, 14): {'options': [(11, 14)], 'scores': [1]}, (2, 9): {'options': [(2, 9)], 'scores': [0]}, (6, 10): {'options': [(7, 10)], 'scores': [1]}, (9, 9): {'options': [(9, 10)], 'scores': [2]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (9, 11): {'options': [(9, 12)], 'scores': [-1]}, (15, 8): {'options': [(15, 9)], 'scores': [1]}, (15, 7): {'options': [(15, 8)], 'scores': [1]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (3, 9): {'options': [(3, 9)], 'scores': [0]}, (14, 8): {'options': [(13, 8)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-1]}, (9, 1): {'options': [(9, 1)], 'scores': [0]}}
-------------------------- running turn 35 ---------------------------
[((5, 9), 0.5, [(3, 9)]), ((2, 9), 0.5, [(3, 9), (5, 9)]), ((15, 8), 0.6, [(15, 9), (14, 9), (13, 8)]), ((3, 9), 0.6666666666666666, [(2, 9), (5, 9)]), ((11, 14), 0.6666666666666666, [(9, 13), (10, 12)]), ((15, 9), 0.75, [(14, 9), (15, 8), (13, 8)]), ((13, 8), 1.0, [(14, 9), (15, 8), (15, 9)]), ((14, 9), 1.0, [(15, 9), (15, 8), (13, 8)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 10), 1.5, [(9, 11), (7, 10), (9, 12)]), ((9, 13), 1.6666666666666667, [(9, 12), (9, 11), (10, 12), (9, 10), (11, 14)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 10)])]
There are 3 groups
[(5, 9), (3, 9), (2, 9)]
[(14, 9), (15, 8), (13, 8), (15, 9)]
[(9, 13), (10, 12), (9, 10), (9, 11), (11, 14), (9, 12)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -15
( 4, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,13) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  2
(15, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -1
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -42
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 42
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -66
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -9
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(15, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  9 attack_ratio = -1 health_diffs = -50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  29  29  29                              
 2                      29  29  29  30  27  30  29  29  29                      
 3              28  29  30  31  30  29  32  29  30  31  30  29  28              
 4              29  30  30  32  33  32  33  32  33  32  31  30  29              
 5          29  30  29  30  32  34  35  34  35  34  33  32  31  30  29          
 6          30  29  28  32  31  34  35  34  34  35  34  33  32  31  30          
 7      30  30  30  32  29  31  33  33  35  32  33  35  34  33  32  31  30      
 8      31  32  32  31  31  35  31  30  34  34  31  34  35  34  33  32  31      
 9      32  33  34  33  33  32  34  36  32  32  34  34  35  35  34  33  32      
10      31  32  32  31  32  32  31  34  36  33  33  32  34  34  33  32  31      
11      30  30  29  31  31  29  32  33  36  34  33  32  32  33  32  31  30      
12          30  30  29  29  30  33  33  36  35  32  32  31  31  31  30          
13          29  30  30  31  32  31  34  36  35  32  31  32  29  29  29          
14              29  30  31  32  32  34  35  34  33  31  29  29  29              
15              28  29  30  31  32  33  34  33  32  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(4, 9)], 'scores': [0]}
(3, 9) - {'options': [(3, 9)], 'scores': [0]}
(2, 9) - {'options': [(2, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 14) - {'options': [(10, 14)], 'scores': [1]}
System has been reduced
determine_ideal_outcome called with [(9, 13), (10, 12), (9, 10), (9, 11), (7, 10), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(7, 10)]
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 13)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (10, 10)], 'scores': [0, 0, -3]}
(9, 11) - {'options': [(9, 10), (9, 11), (9, 12), (10, 11)], 'scores': [0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
(9, 12) - {'options': [(9, 13), (9, 11), (9, 12), (10, 12)], 'scores': [0, 0, 0, -1]}


=> INITIAL
BOT Positions:
5 participants
     6   7   8   9  10  11  
 9                         
10               X         
11               X         
12               X   X     
13               X   -     
14               -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     6   7   8   9  10  11  
 9                         
10               X         
11               X         
12               X   X     
13               X   -     
14               -         

System can be split into 2 systems
Solving system # 0
(9, 10) - {'options': [(9, 10), (9, 11)], 'scores': [0, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [0, 0, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (9, 12)], 'scores': [0, 0, 0]}
(10, 12) - {'options': [(9, 12), (10, 13)], 'scores': [1, 0]}
(9, 12) - {'options': [(9, 13), (9, 11), (9, 12), (10, 12)], 'scores': [0, 0, 0, -1]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 12) - {'options': [(10, 13)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
Solving system # 1
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(10, 12): {'options': [(10, 13)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(7, 10): {'options': [(8, 10)], 'scores': [3]}
(9, 12): {'options': [(9, 12)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         


The initial system score was 210
The maximum obtainable for the system is 213
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         

Cell Scores:
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 12) - {'options': [(10, 13)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         

System can be split into 6 systems
Solving system # 0
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(10, 12) - {'options': [(10, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 5
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(10, 12): {'options': [(10, 13)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(7, 10): {'options': [(8, 10)], 'scores': [3]}
(9, 12): {'options': [(9, 12)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         


The initial system score was 210
The maximum obtainable for the system is 213
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         

Cell Scores:
     6   7   8   9  10  11  
 9                         
10                         
11                         
12                         
13                         
14                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 12) - {'options': [(10, 13)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [3]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 9) - {'options': [(13, 9)], 'scores': [0]}
(15, 8) - {'options': [(15, 9)], 'scores': [1]}
(13, 8) - {'options': [(13, 8)], 'scores': [0]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(8, 1)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(4, 9)], 'scores': [0]}, (11, 14): {'options': [(10, 14)], 'scores': [1]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (2, 9): {'options': [(2, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 12): {'options': [(10, 13)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(3, 9)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [1]}, (7, 10): {'options': [(8, 10)], 'scores': [3]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 1): {'options': [(8, 1)], 'scores': [0]}}
-------------------------- running turn 36 ---------------------------
[((2, 9), 0.6666666666666666, [(3, 9), (4, 9)]), ((3, 9), 1.0, [(4, 9), (2, 9)]), ((10, 14), 1.0, [(10, 13), (9, 13), (9, 12)]), ((4, 9), 1.0, [(3, 9)]), ((8, 10), 1.0, [(9, 10)]), ((13, 8), 1.0, [(13, 9), (14, 9)]), ((15, 9), 1.0, [(14, 9), (13, 9), (13, 8)]), ((10, 13), 1.5, [(9, 13), (10, 14), (9, 12)]), ((9, 10), 1.5, [(9, 11), (8, 10), (9, 12)]), ((14, 9), 1.5, [(13, 9), (15, 9), (13, 8)]), ((9, 13), 1.6666666666666667, [(10, 13), (9, 12), (9, 11), (10, 14), (9, 10)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (8, 10)]), ((13, 9), 2.0, [(14, 9), (13, 8)]), ((9, 12), 2.0, [(9, 13), (9, 11), (9, 10), (10, 13)])]
There are 3 groups
[(3, 9), (4, 9), (2, 9)]
[(9, 13), (10, 13), (8, 10), (9, 10), (10, 14), (9, 11), (9, 12)]
[(13, 9), (14, 9), (13, 8), (15, 9)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 4, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -35
( 7,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
(12,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  2
(13, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -19
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8, 1) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  0
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -60
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
( 4,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -81
( 8, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -59
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -4
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  30  30  28                              
 2                      29  29  29  31  28  28  31  28  28                      
 3              28  29  30  31  30  29  33  30  29  30  30  29  28              
 4              29  30  31  32  33  32  33  33  32  32  31  30  29              
 5          29  30  31  31  33  34  35  35  34  34  33  32  31  30  29          
 6          30  31  30  31  32  35  36  35  34  34  34  33  32  31  30          
 7      30  31  30  29  32  31  33  34  34  35  34  33  34  33  32  31  30      
 8      31  31  31  31  29  33  31  32  36  32  32  34  34  34  33  32  31      
 9      32  33  32  31  30  31  35  35  33  34  31  35  34  34  34  33  32      
10      31  31  31  32  30  30  32  35  35  33  33  31  33  34  33  32  31      
11      30  31  30  28  31  32  30  34  37  33  34  30  33  33  32  31  30      
12          30  31  30  29  29  34  34  36  35  31  31  32  32  31  30          
13          29  30  31  31  31  32  34  36  34  31  33  30  30  30  29          
14              29  30  31  32  32  34  35  34  32  30  30  30  29              
15              28  29  30  31  32  33  34  33  32  30  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
Awarded move for (10, 14)  to (9, 14)
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(10, 13) - {'options': [(9, 13)], 'scores': [2]}
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [0]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(10, 13): {'options': [(9, 13)], 'scores': [2]}
(8, 10): {'options': [(8, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(10, 13) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [0]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(10, 13): {'options': [(9, 13)], 'scores': [2]}
(8, 10): {'options': [(8, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 247
The maximum obtainable for the system is 249
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(10, 13) - {'options': [(9, 13)], 'scores': [2]}
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(2, 9)], 'scores': [1]}
(4, 9) - {'options': [(4, 10)], 'scores': [1]}
(2, 9) - {'options': [(1, 9)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(8, 2)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(14, 9) - {'options': [(13, 9)], 'scores': [0]}
(13, 8) - {'options': [(13, 7)], 'scores': [0]}
(15, 9) - {'options': [(14, 9)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [0]}, (10, 14): {'options': [(9, 14)], 'scores': [1]}, (4, 9): {'options': [(4, 10)], 'scores': [1]}, (2, 9): {'options': [(1, 9)], 'scores': [-1]}, (8, 1): {'options': [(8, 2)], 'scores': [2]}, (10, 13): {'options': [(9, 13)], 'scores': [2]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(2, 9)], 'scores': [1]}, (13, 8): {'options': [(13, 7)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-1]}}
-------------------------- running turn 37 ---------------------------
[((1, 9), 0.5, [(2, 9), (4, 9)]), ((13, 7), 0.6666666666666666, [(13, 9), (14, 9)]), ((2, 9), 0.6666666666666666, [(1, 9), (4, 9)]), ((15, 9), 0.6666666666666666, [(14, 9), (13, 9)]), ((13, 9), 1.0, [(14, 9)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((14, 9), 1.0, [(13, 9), (15, 9)]), ((9, 14), 1.25, [(9, 13), (9, 12), (9, 11), (10, 12), (9, 10)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 13), 1.6666666666666667, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 10)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 3 groups
[(4, 9), (1, 9), (2, 9)]
[(13, 9), (14, 9), (13, 7), (15, 9)]
[(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
( 4, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
( 4, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 5, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -78
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability = 10 attack_ratio = -1 health_diffs = -49
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 16
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 34
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 4,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(13, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -22
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  1
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  28  28  29                              
 2                      29  29  28  29  29  29  28  29  29                      
 3              28  29  30  31  31  30  30  30  31  31  30  29  28              
 4              29  30  31  32  33  33  34  33  33  32  31  30  29              
 5          29  30  30  32  33  34  35  36  35  34  33  32  31  30  29          
 6          30  30  29  31  34  35  36  36  35  35  34  33  32  31  30          
 7      30  30  29  30  29  33  35  35  35  33  35  34  34  33  32  31  30      
 8      31  31  29  30  31  32  32  32  35  34  31  33  34  34  33  32  31      
 9      32  33  33  29  30  32  35  35  32  33  30  35  34  34  34  33  32      
10      31  32  31  29  33  32  30  34  35  32  33  31  33  34  33  32  31      
11      30  30  30  32  29  30  33  33  36  33  34  30  33  33  32  31  30      
12          30  30  30  30  31  33  33  36  35  31  31  32  32  31  30          
13          29  30  30  32  32  31  34  36  34  31  33  30  30  30  29          
14              29  30  31  32  32  34  35  34  32  30  30  30  29              
15              28  29  30  31  32  33  34  33  32  30  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(14, 9) - {'options': [(13, 9)], 'scores': [0]}
(13, 7) - {'options': [(12, 7)], 'scores': [0]}
(15, 9) - {'options': [(14, 9)], 'scores': [0]}
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       X         
11       X         
12       X   X     
13       X         
14       X         
15                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       X         
11       X         
12       X   X     
13       X         
14       X         
15                 

determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 13), (9, 11), (9, 12), (9, 14), (10, 12), (9, 10)]
available_bots - [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
levels - {35: [(9, 14), (10, 12), (9, 10)], 36: [(9, 13), (9, 11), (9, 12)]}
max_score - 213

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  11  
 9                 
10       X         
11       X         
12       X   X     
13       X         
14       X         
15                 


The initial system score was 213
The maximum obtainable for the system is 213
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 6
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       0         
11       0         
12       0   0     
13       0         
14       0         
15                 

Cell Scores:
     8   9  10  11  
 9                 
10      33         
11      30         
12      35  31     
13      34         
14      34         
15                 

The system now has a total of 288 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 288 options
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [1, 0]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 11), (9, 10)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -1]}
(9, 12) - {'options': [(9, 13), (9, 11), (9, 12), (10, 12)], 'scores': [0, 0, 0, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 288 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 9) - {'options': [(3, 9)], 'scores': [4]}
(1, 9) - {'options': [(2, 9)], 'scores': [1]}
(2, 9) - {'options': [(2, 10)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(8, 2)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 13)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (4, 9): {'options': [(3, 9)], 'scores': [4]}, (2, 9): {'options': [(2, 10)], 'scores': [-1]}, (8, 1): {'options': [(8, 2)], 'scores': [1]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (13, 7): {'options': [(12, 7)], 'scores': [0]}, (1, 9): {'options': [(2, 9)], 'scores': [1]}, (15, 9): {'options': [(14, 9)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (14, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 38 ---------------------------
[((2, 9), 0.6666666666666666, [(3, 9), (2, 10)]), ((2, 10), 0.6666666666666666, [(2, 9), (3, 9)]), ((15, 9), 0.6666666666666666, [(14, 9), (13, 9)]), ((3, 9), 1.0, [(2, 9), (2, 10)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((13, 9), 1.0, [(14, 9)]), ((14, 9), 1.0, [(13, 9), (15, 9)]), ((9, 14), 1.3333333333333333, [(9, 13), (9, 12), (9, 11), (10, 12)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (10, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 3 groups
[(3, 9), (2, 9), (2, 10)]
[(13, 9), (14, 9), (15, 9)]
[(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
( 4, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 24
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8, 1) (friendly)  vulnerability = 10 attack_ratio = -1 health_diffs = -59
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -3
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12, 7) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 2,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -24
( 4,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(15, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  29  29  30                              
 2                      29  29  28  30  30  27  29  30  29                      
 3              28  29  30  31  31  29  29  32  30  30  30  29  28              
 4              29  30  31  32  33  33  33  32  32  32  31  30  29              
 5          29  29  31  32  33  34  35  36  34  34  33  32  31  30  29          
 6          29  29  30  32  34  35  36  36  36  34  34  33  32  31  30          
 7      29  29  31  28  30  34  36  35  36  34  34  33  34  33  32  31  30      
 8      31  30  28  31  32  33  33  34  36  32  33  32  33  34  33  32  31      
 9      32  33  32  30  31  33  33  36  34  34  29  34  34  34  34  33  32      
10      31  32  31  29  32  31  32  33  34  33  32  31  33  34  33  32  31      
11      30  30  30  32  29  29  32  32  36  33  33  31  33  33  32  31  30      
12          30  30  30  30  31  32  33  36  34  30  32  33  32  31  30          
13          29  30  30  32  32  31  34  35  33  33  31  31  31  30  29          
14              29  30  31  32  32  34  35  33  31  31  31  30  29              
15              28  29  30  31  32  33  34  33  31  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         

determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(8, 13), (9, 15), (10, 12), (9, 9), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (9, 9), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  11  
 9       2         
10       2         
11       X         
12       X   2     
13   2   X         
14       X         
15       2         


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(10, 12), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 4
current_bots_in_optional = [(10, 12), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 12), (9, 10)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       ?         
11       0         
12       0   ?     
13   -   0         
14       0         
15       -         

Cell Scores:
     8   9  10  11  
 9      34         
10      34         
11      29         
12      34  31     
13  33  34         
14      34         
15      34         

The system now has a total of 864 options
Optional squares exist

System result = ...
The system has a total of 864 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [2, 0]}
(9, 10) - {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 864 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [-1]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(2, 9)], 'scores': [1]}
(2, 9) - {'options': [(1, 9)], 'scores': [-1]}
(2, 10) - {'options': [(2, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(8, 2)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 7) - {'options': [(11, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(14, 9)], 'scores': [0]}
(14, 9) - {'options': [(14, 10)], 'scores': [0]}
(15, 9) - {'options': [(15, 9)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (9, 14): {'options': [(9, 15)], 'scores': [-1]}, (2, 9): {'options': [(1, 9)], 'scores': [-1]}, (8, 1): {'options': [(8, 2)], 'scores': [2]}, (12, 7): {'options': [(11, 7)], 'scores': [1]}, (13, 9): {'options': [(14, 9)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (2, 10): {'options': [(2, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(2, 9)], 'scores': [1]}, (15, 9): {'options': [(15, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 10)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 39 ---------------------------
[((1, 9), 0.5, [(2, 9), (2, 10)]), ((14, 10), 0.6666666666666666, [(13, 9), (15, 9)]), ((2, 9), 0.6666666666666666, [(1, 9), (2, 10)]), ((15, 9), 0.6666666666666666, [(13, 9), (14, 10)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12), (9, 11)]), ((2, 10), 1.0, [(2, 9), (1, 9)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((9, 14), 1.3333333333333333, [(9, 13), (9, 15), (9, 12), (9, 11)]), ((9, 11), 1.5, [(9, 10), (9, 12), (9, 13)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)]), ((9, 12), 2.0, [(9, 13), (9, 11), (9, 10), (9, 14)])]
There are 3 groups
[(1, 9), (2, 9), (2, 10)]
[(13, 9), (14, 10), (15, 9)]
[(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 4, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -3
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability =  9 attack_ratio = -1 health_diffs = -68
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
( 5,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 2,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
(11, 7) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -8
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 38
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  3
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  28  28  29                              
 2                      29  29  28  29  29  29  28  29  29                      
 3              28  29  30  31  31  30  30  30  31  31  30  29  28              
 4              29  30  31  32  33  33  34  33  33  32  31  30  29              
 5          29  29  31  32  33  34  35  36  35  34  33  32  31  30  29          
 6          29  29  30  33  34  35  36  36  36  34  34  33  32  31  30          
 7      29  29  31  29  31  35  36  35  36  34  34  33  34  33  32  31  30      
 8      31  30  29  31  31  34  34  34  36  32  33  32  33  34  33  32  31      
 9      32  33  30  29  33  33  32  36  34  34  29  34  34  34  34  33  32      
10      31  31  31  31  28  30  33  33  34  33  32  31  33  34  33  32  31      
11      30  31  30  29  31  29  31  32  36  33  33  31  33  33  32  31  30      
12          30  31  30  30  30  32  33  36  34  30  32  33  32  31  30          
13          29  30  31  31  32  31  34  35  33  33  31  31  31  30  29          
14              29  30  31  32  32  34  35  33  31  31  31  30  29              
15              28  29  30  31  32  33  34  33  31  31  30  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(14, 9)], 'scores': [0]}
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
(15, 9) - {'options': [(15, 9)], 'scores': [0]}
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15       X     
16             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15       X     
16             

determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(8, 13), (8, 14), (9, 15), (9, 9), (10, 12), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
levels - {34: [(8, 13), (8, 14), (9, 15), (9, 9), (10, 12), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  
 9       2     
10       2     
11       X     
12       X   2 
13   2   X     
14   2   X     
15       2     
16             


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(9, 15), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 4
current_bots_in_optional = [(9, 15), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 15), (9, 10)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       ?     
11       0     
12       0   - 
13   -   0     
14   -   0     
15       ?     
16             

Cell Scores:
     8   9  10  
 9      34     
10      34     
11      29     
12      34  31 
13  33  34     
14  34  34     
15      34     
16             

The system now has a total of 1152 options
Optional squares exist

System result = ...
The system has a total of 1152 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1152 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
(2, 9) - {'options': [(2, 9)], 'scores': [0]}
(2, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(8, 2)], 'scores': [1]}
settle_sys returned with {(11, 7): {'options': [(10, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (2, 9): {'options': [(2, 9)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (8, 1): {'options': [(8, 2)], 'scores': [1]}, (2, 10): {'options': [(1, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (15, 9): {'options': [(15, 9)], 'scores': [0]}, (13, 9): {'options': [(14, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 40 ---------------------------
[((14, 10), 0.6666666666666666, [(13, 9), (15, 9)]), ((1, 9), 0.6666666666666666, [(1, 10), (2, 9)]), ((15, 9), 0.6666666666666666, [(13, 9), (14, 10)]), ((1, 10), 0.6666666666666666, [(1, 9), (2, 9)]), ((2, 9), 1.0, [(1, 9), (1, 10)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((9, 14), 1.3333333333333333, [(9, 13), (9, 12), (9, 11), (10, 12)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (10, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 3 groups
[(13, 9), (14, 10), (15, 9)]
[(1, 10), (1, 9), (2, 9)]
[(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -24
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -2
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 1,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -9
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 24
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  2
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                               9   7   7   8  10                              
 2                      10   9  28  30  30  27  29  10  10                      
 3               0  10  30  31  31  29  29  32  30  30  30  10   0              
 4              10  30  31  32  33  33  33  32  32  32  31  30  10              
 5           9  30  31  32  33  34  35  36  34  34  33  32  31  30  10          
 6           8  29  32  33  34  35  36  36  36  34  34  33  32  31  10          
 7       8  30  28  30  34  35  36  35  36  34  34  33  34  33  32  31  10      
 8       8  28  31  29  33  36  34  34  36  32  33  32  33  34  33  32  10      
 9      10  30  29  31  33  34  33  36  34  34  29  34  34  34  34  33  10      
10      10  31  28  30  30  32  33  33  34  33  32  31  33  34  33  32  10      
11      10  30  29  30  30  30  32  32  36  33  33  31  33  33  32  31  10      
12          10  30  29  31  31  32  33  36  34  30  32  33  32  31  10          
13          10  30  30  32  32  31  34  35  33  33  31  31  31  30  10          
14              10  30  31  32  32  34  35  33  31  31  31  30  10              
15               0  10  30  31  32  33  34  33  31  31  30  10   0              
16                      10  10  31  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         

determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(8, 13), (9, 15), (10, 12), (9, 9), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (9, 9), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  11  
 9       2         
10       2         
11       X         
12       X   2     
13   2   X         
14       X         
15       2         


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(10, 12), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 4
current_bots_in_optional = [(10, 12), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 12), (9, 10)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  11  
 9       -         
10       ?         
11       0         
12       0   ?     
13   -   0         
14       0         
15       -         

Cell Scores:
     8   9  10  11  
 9      34         
10      34         
11      29         
12      34  31     
13  33  34         
14      34         
15      34         

The system now has a total of 864 options
Optional squares exist

System result = ...
The system has a total of 864 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [2, 0]}
(9, 10) - {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 864 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [-1]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(14, 9)], 'scores': [0]}
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
(15, 9) - {'options': [(15, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(2, 10)], 'scores': [21]}
(1, 9) - {'options': [(2, 9)], 'scores': [20]}
(2, 9) - {'options': [(3, 9)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 15)], 'scores': [-1]}, (2, 9): {'options': [(3, 9)], 'scores': [-1]}, (11, 7): {'options': [(10, 7)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(2, 9)], 'scores': [20]}, (15, 9): {'options': [(15, 9)], 'scores': [0]}, (1, 10): {'options': [(2, 10)], 'scores': [21]}, (13, 9): {'options': [(14, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 41 ---------------------------
[((12, 2), 0.25, [(15, 3)]), ((15, 3), 0.5, [(16, 5), (12, 2)]), ((14, 10), 0.6666666666666666, [(13, 9), (15, 9)]), ((8, 17), 0.6666666666666666, [(9, 15), (9, 14), (9, 13), (9, 12)]), ((2, 9), 1.0, [(3, 9), (2, 10)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((15, 9), 1.0, [(13, 9), (14, 10)]), ((3, 9), 1.0, [(2, 9)]), ((2, 10), 1.0, [(2, 9)]), ((9, 15), 1.25, [(9, 14), (9, 13), (8, 17), (9, 12), (9, 11)]), ((9, 14), 1.3333333333333333, [(9, 13), (9, 15), (9, 12), (9, 11)]), ((9, 11), 1.5, [(9, 10), (9, 12), (9, 13)]), ((9, 12), 2.0, [(9, 13), (9, 11), (9, 10), (9, 14)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)])]
There are 4 groups
[(12, 2), (16, 5), (15, 3)]
[(13, 9), (14, 10), (15, 9)]
[(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (8, 17), (9, 12)]
[(3, 9), (2, 9), (2, 10)]
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(17, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -46
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -3
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  2 health_diffs = 32
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -94
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -24
(17,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -9
(15, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -4
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -132
(14,15) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 8,17) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(16, 5) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(17, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  3
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  31  31  30                              
 2                      29  30  30  29  30  30  31  30  29                      
 3              28  29  30  30  29  31  31  28  30  31  30  29  28              
 4              29  30  31  32  32  30  30  33  31  31  31  30  29              
 5          28  30  31  32  33  34  34  34  33  33  33  32  31  29  27          
 6          28  29  32  33  34  35  36  36  35  34  34  33  31  29  30          
 7      28  30  28  30  34  35  36  35  36  34  34  33  34  33  31  28  26      
 8      29  28  30  30  33  36  34  34  36  32  33  32  33  34  32  28  29      
 9      32  29  27  33  34  34  33  36  34  34  29  34  34  34  33  30  29      
10      30  29  29  29  32  33  33  33  34  33  32  31  33  34  33  30  26      
11      29  28  30  29  32  31  32  32  36  33  33  31  33  33  31  29  29      
12          29  28  31  32  31  32  33  36  34  30  32  33  32  31  29          
13          29  29  31  32  32  31  34  35  33  33  31  31  31  30  29          
14              29  30  31  32  32  34  35  33  31  31  30  30  29              
15              28  29  30  31  32  33  34  33  31  30  28  28  28              
16                      29  30  31  32  33  32  30  28  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(11, 2)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [0]}
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15       X     
16             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15       X     
16             

determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(8, 13), (8, 14), (9, 15), (9, 9), (10, 12), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
levels - {34: [(8, 13), (8, 14), (9, 15), (9, 9), (10, 12), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  
 9       2     
10       2     
11       X     
12       X   2 
13   2   X     
14   2   X     
15       2     
16             


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(9, 15), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 4
current_bots_in_optional = [(9, 15), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 15), (9, 10)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  
 9       -     
10       ?     
11       0     
12       0   - 
13   -   0     
14   -   0     
15       ?     
16             

Cell Scores:
     8   9  10  
 9      34     
10      34     
11      29     
12      34  31 
13  33  34     
14  34  34     
15      33     
16             

The system now has a total of 1152 options
Optional squares exist

System result = ...
The system has a total of 1152 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1152 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(4, 9)], 'scores': [6]}
(2, 9) - {'options': [(1, 9)], 'scores': [3]}
(2, 10) - {'options': [(1, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 3) - {'options': [(15, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 15) - {'options': [(14, 14)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 5) - {'options': [(16, 6)], 'scores': [3]}
settle_sys returned with {(12, 2): {'options': [(11, 2)], 'scores': [1]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (2, 9): {'options': [(1, 9)], 'scores': [3]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (15, 3): {'options': [(15, 4)], 'scores': [1]}, (11, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (16, 5): {'options': [(16, 6)], 'scores': [3]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (14, 15): {'options': [(14, 14)], 'scores': [2]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (8, 17): {'options': [(8, 16)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [6]}, (2, 10): {'options': [(1, 10)], 'scores': [1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 42 ---------------------------
[((1, 9), 0.3333333333333333, [(2, 10)]), ((2, 10), 0.5, [(1, 9)]), ((15, 4), 0.5, [(16, 5)]), ((16, 5), 0.5, [(15, 4)]), ((8, 16), 0.6, [(9, 14), (9, 13), (9, 12)]), ((14, 10), 0.6666666666666666, [(14, 9), (12, 9)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((14, 9), 1.0, [(14, 10), (12, 9)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 12), (9, 11), (8, 16), (10, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (10, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 4 groups
[(1, 9), (2, 10)]
[(15, 4), (16, 5)]
[(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (8, 16), (9, 12)]
[(14, 9), (14, 10), (12, 9)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 3,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -26
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(14,14) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
(15, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 2) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,15) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 2,10) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 46
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 1, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = -10
(16, 5) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  5
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -3
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  29  29  30                              
 2                      29  29  28  30  30  27  29  30  29                      
 3              28  29  30  31  31  29  29  32  30  30  30  29  28              
 4              29  30  31  32  33  33  33  32  32  32  31  30  28              
 5          28  30  31  32  33  34  35  36  34  34  33  32  30  28  28          
 6          28  29  32  33  34  35  36  36  36  34  34  32  30  31  27          
 7      28  30  28  30  34  35  36  35  36  34  33  34  34  32  29  27  29      
 8      29  28  31  29  33  36  34  34  36  31  32  33  34  33  29  30  28      
 9      32  30  28  32  33  34  33  36  33  33  31  32  35  34  31  30  29      
10      31  30  27  31  31  32  33  33  34  32  31  32  34  34  31  27  29      
11      29  29  31  28  31  31  32  32  36  33  32  32  33  32  30  30  28      
12          29  29  30  32  31  32  33  36  34  30  32  33  32  30  28          
13          29  29  31  32  32  31  34  35  33  33  31  30  31  30  28          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  30  29  30  27  27              
16                      29  30  31  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       X         
11       X         
12       X   X     
13   -   X         
14       X         
15       -         

determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(8, 13), (9, 15), (10, 12), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (10, 12), (9, 10), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     8   9  10  11  
 9                 
10       2         
11       X         
12       X   2     
13   2   X         
14       X         
15       2         


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(10, 12), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 4
current_bots_in_optional = [(10, 12), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 12), (9, 10)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     8   9  10  11  
 9                 
10       ?         
11       0         
12       0   ?     
13   -   0         
14       0         
15       -         

Cell Scores:
     8   9  10  11  
 9                 
10      33         
11      31         
12      32  32     
13  34  35         
14      34         
15      31         

The system now has a total of 576 options
Optional squares exist

System result = ...
The system has a total of 576 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [2, 0]}
(9, 10) - {'options': [(9, 11), (9, 10)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 576 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [-1]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 9) - {'options': [(14, 9)], 'scores': [0]}
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
(12, 9) - {'options': [(13, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 2) - {'options': [(12, 2)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
(2, 10) - {'options': [(1, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 14) - {'options': [(14, 13)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 4) - {'options': [(14, 4)], 'scores': [2]}
(16, 5) - {'options': [(15, 5)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 15)], 'scores': [-1]}, (11, 7): {'options': [(10, 7)], 'scores': [1]}, (11, 2): {'options': [(12, 2)], 'scores': [1]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (2, 10): {'options': [(1, 10)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (14, 14): {'options': [(14, 13)], 'scores': [2]}, (15, 4): {'options': [(14, 4)], 'scores': [2]}, (16, 5): {'options': [(15, 5)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (8, 16): {'options': [(9, 16)], 'scores': [1]}, (12, 9): {'options': [(13, 9)], 'scores': [3]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 43 ---------------------------
[((14, 4), 0.3333333333333333, [(15, 5)]), ((14, 13), 0.3333333333333333, [(14, 10)]), ((1, 10), 0.3333333333333333, [(1, 9)]), ((1, 9), 0.5, [(1, 10)]), ((13, 9), 0.6666666666666666, [(14, 9), (14, 10)]), ((14, 10), 1.0, [(14, 9), (13, 9)]), ((9, 10), 1.0, [(9, 11), (9, 12)]), ((9, 16), 1.0, [(9, 15), (9, 14), (9, 13), (9, 12), (9, 11)]), ((14, 9), 1.0, [(13, 9), (14, 10)]), ((9, 15), 1.25, [(9, 16), (9, 14), (9, 13), (9, 12), (9, 11)]), ((9, 11), 1.5, [(9, 10), (9, 12), (9, 13)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (9, 16), (9, 12), (9, 11)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)]), ((9, 12), 2.0, [(9, 13), (9, 11), (9, 10), (9, 14)])]
There are 4 groups
[(14, 4), (15, 5)]
[(13, 9), (14, 9), (14, 10), (14, 13)]
[(1, 10), (1, 9)]
[(9, 13), (9, 14), (9, 15), (9, 10), (9, 16), (9, 11), (9, 12)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 4, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 3,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(14,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(15, 5) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 44
( 1,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(11, 7) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -10
(13,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -54
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -44
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
( 9, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  29  30  29  30                              
 2                      29  30  29  28  31  28  29  30  29                      
 3              28  29  30  30  30  31  28  31  30  30  30  29  28              
 4              29  30  31  32  32  32  32  32  32  32  31  30  28              
 5          29  30  31  32  33  34  34  36  34  34  33  32  30  28  28          
 6          29  31  31  33  34  35  36  36  36  34  34  32  30  30  28          
 7      29  29  29  31  33  35  36  35  36  34  34  34  34  31  28  28  30      
 8      29  30  27  31  33  35  34  34  36  32  34  34  33  32  31  28  29      
 9      30  29  30  29  33  35  33  36  34  35  31  34  36  33  29  32  30      
10      31  28  27  31  32  32  33  33  34  33  33  33  34  33  29  29  30      
11      29  29  30  29  31  31  32  32  36  33  33  32  32  31  32  28  29      
12          29  29  30  32  31  32  33  36  34  30  32  33  31  29  29          
13          29  29  31  32  32  31  34  35  33  33  31  30  31  29  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  30  29  30  27  27              
16                      29  30  31  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(12, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [-2]}
(14, 9) - {'options': [(13, 9)], 'scores': [3]}
(14, 10) - {'options': [(13, 10)], 'scores': [1]}
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 10), (9, 16), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
5 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15             
16             
17             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     8   9  10  
 9       -     
10       X     
11       X     
12       X   - 
13   -   X     
14   -   X     
15             
16             
17             

System can be split into 3 systems
Solving system # 0
(9, 10) - {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (8, 13)], 'scores': [1, 0, -1]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 14) - {'options': [(9, 13), (8, 14)], 'scores': [0, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 12)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
Solving system # 1
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 14)], 'scores': [1]}
(9, 10): {'options': [(9, 11)], 'scores': [2]}
(9, 16): {'options': [(9, 15)], 'scores': [1]}
(9, 11): {'options': [(9, 12)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             


The initial system score was 243
The maximum obtainable for the system is 244
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             

Cell Scores:
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 12)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 14)], 'scores': [1]}
(9, 10): {'options': [(9, 11)], 'scores': [2]}
(9, 16): {'options': [(9, 15)], 'scores': [1]}
(9, 11): {'options': [(9, 12)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             


The initial system score was 243
The maximum obtainable for the system is 244
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             

Cell Scores:
     8   9  10  
 9             
10             
11             
12             
13             
14             
15             
16             
17             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 12)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 4) - {'options': [(13, 4)], 'scores': [1]}
(15, 5) - {'options': [(15, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 13) - {'options': [(14, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(11, 8)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
settle_sys returned with {(12, 2): {'options': [(12, 2)], 'scores': [0]}, (14, 10): {'options': [(13, 10)], 'scores': [1]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (14, 4): {'options': [(13, 4)], 'scores': [1]}, (15, 5): {'options': [(15, 6)], 'scores': [2]}, (14, 13): {'options': [(14, 12)], 'scores': [0]}, (11, 7): {'options': [(11, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (9, 11): {'options': [(9, 12)], 'scores': [0]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [-2]}, (14, 9): {'options': [(13, 9)], 'scores': [3]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 44 ---------------------------
[((1, 9), 0.5, [(1, 10)]), ((1, 10), 0.5, [(1, 9)]), ((13, 4), 0.6666666666666666, [(12, 2), (15, 5)]), ((13, 9), 0.6666666666666666, [(13, 10), (12, 9)]), ((13, 10), 1.0, [(13, 9), (12, 9)]), ((12, 9), 1.0, [(13, 9), (13, 10)]), ((8, 14), 1.3333333333333333, [(9, 14), (9, 13), (9, 15), (9, 12)]), ((9, 15), 1.5, [(9, 14), (9, 13), (8, 14), (9, 12), (9, 11), (10, 12)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((9, 14), 2.0, [(9, 13), (9, 15), (8, 14), (9, 12), (9, 11), (10, 12)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 14)]), ((9, 13), 3.0, [(9, 14), (9, 12), (8, 14), (9, 11), (10, 12), (9, 15)])]
There are 4 groups
[(1, 10), (1, 9)]
[(12, 2), (13, 4), (15, 5)]
[(13, 9), (13, 10), (12, 9)]
[(8, 14), (9, 14), (9, 15), (10, 12), (9, 11), (9, 13), (9, 12)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
(16, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 44
(13, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15, 5) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(12, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -10
(12, 2) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
(15,11) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 16
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 1,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 46
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -44
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14,12) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  5
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
(11, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(13,14) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  30  29  28                              
 2                      29  30  31  30  29  30  27  28  29                      
 3              28  29  30  31  31  31  32  27  30  29  29  29  28              
 4              29  30  31  32  33  33  33  31  31  31  31  30  28              
 5          29  30  31  32  33  34  35  35  35  33  33  32  30  28  28          
 6          29  30  32  33  34  35  36  36  36  34  34  32  30  30  28          
 7      29  28  28  32  34  35  36  35  36  34  34  34  34  31  28  28  30      
 8      28  29  28  30  34  36  34  34  36  32  34  34  33  32  31  28  29      
 9      30  26  29  31  35  35  33  36  34  35  31  34  36  33  29  32  30      
10      29  26  29  31  33  33  33  33  34  33  33  33  34  33  29  29  30      
11      28  30  27  31  33  31  32  32  36  33  33  32  32  31  32  28  29      
12          28  29  32  32  31  32  33  36  34  30  32  32  31  29  29          
13          28  30  31  32  32  31  34  35  33  33  30  29  30  29  29          
14              29  30  31  32  32  34  35  33  30  29  31  28  28              
15              28  29  30  31  32  33  34  33  31  30  28  28  28              
16                      29  30  31  32  33  32  31  30  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(13, 2)], 'scores': [1]}
determine_ideal_outcome called with [(9, 13), (9, 14), (8, 14), (9, 15), (10, 12), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  
10           -         
11           X         
12           X   X     
13       -   X         
14       X   X         
15           X         
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  
10           -         
11           X         
12           X   X     
13       -   X         
14       X   X         
15           X         
16                     

determine_ideal_outcome called with [(9, 13), (9, 14), (8, 14), (9, 15), (10, 12), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(8, 13), (8, 14), (9, 15), (10, 12), (9, 10)]
occupied - [(9, 11), (9, 12), (9, 13), (9, 14)]
available_bots - [(9, 13), (9, 14), (8, 14), (9, 15), (10, 12), (9, 11), (9, 12)]
levels - {34: [(8, 13), (8, 14), (9, 15), (10, 12), (9, 10)], 35: [(9, 13), (9, 14)], 36: [(9, 11), (9, 12)]}
max_score - 244

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  
10           3         
11           X         
12           X   3     
13       3   X         
14       3   X         
15           3         
16                     


The initial system score was 244
The maximum obtainable for the system is 244
The score gain were looking for is 0
bots_in_optional = [(8, 14), (9, 15), (10, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 4
current_bots_in_optional = [(8, 14), (9, 15), (10, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 14), (9, 15), (10, 12)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  
10           -         
11           0         
12           0   ?     
13       -   0         
14       ?   0         
15           ?         
16                     

Cell Scores:
     7   8   9  10  11  
10          35         
11          31         
12          34  33     
13      33  36         
14      32  33         
15          29         
16                     

The system now has a total of 2304 options
Optional squares exist

System result = ...
The system has a total of 2304 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(8, 14) - {'options': [(9, 14), (8, 13), (8, 14)], 'scores': [1, 0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -1, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 2304 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(8, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(13, 10) - {'options': [(13, 10)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 4) - {'options': [(13, 5)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 12) - {'options': [(13, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 5) - {'options': [(15, 6)], 'scores': [2]}
settle_sys returned with {(12, 2): {'options': [(13, 2)], 'scores': [1]}, (15, 5): {'options': [(15, 6)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (13, 4): {'options': [(13, 5)], 'scores': [1]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (14, 12): {'options': [(13, 12)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [-2]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 14): {'options': [(9, 14)], 'scores': [1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}}
-------------------------- running turn 45 ---------------------------
[((13, 2), 0.3333333333333333, [(13, 5)]), ((1, 9), 0.5, [(1, 10)]), ((1, 10), 0.5, [(1, 9)]), ((13, 5), 0.6666666666666666, [(15, 5), (13, 2)]), ((9, 10), 1.0, [(9, 11)]), ((13, 9), 1.0, [(13, 10), (12, 9)]), ((12, 9), 1.0, [(13, 9), (13, 10)]), ((9, 15), 1.25, [(9, 14), (9, 13), (9, 12), (9, 11), (10, 12)]), ((13, 10), 1.5, [(13, 9), (13, 12), (12, 9)]), ((10, 12), 1.5, [(9, 12), (9, 13), (9, 11)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (9, 12), (9, 11), (10, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (10, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 4 groups
[(15, 5), (13, 2), (13, 5)]
[(1, 10), (1, 9)]
[(9, 13), (9, 14), (9, 15), (10, 12), (9, 10), (9, 11), (9, 12)]
[(13, 9), (13, 12), (13, 10), (12, 9)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -16
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 44
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(15, 5) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -2
(10, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -10
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
(15,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 1,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 46
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 34
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
(13, 2) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -68
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -44
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  5
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -2
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  2
(13, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  30  29  29                              
 2                      29  30  30  30  32  27  27  29  29                      
 3              28  29  30  31  32  31  29  30  30  28  29  29  28              
 4              29  30  31  32  33  34  33  31  30  31  31  30  28              
 5          29  29  31  32  33  34  35  36  34  33  33  32  30  28  28          
 6          28  29  31  33  34  35  36  37  36  34  34  32  29  31  28          
 7      28  27  30  31  33  35  35  37  37  35  34  34  33  30  28  30  30      
 8      29  30  26  31  35  35  35  35  35  33  35  33  32  33  28  30  31      
 9      30  27  30  32  34  35  35  32  36  35  30  34  34  31  32  31  31      
10      29  26  30  31  34  33  30  35  33  31  33  33  34  31  29  30  31      
11      28  30  27  31  33  32  32  32  34  33  33  32  31  31  31  29  29      
12          28  29  32  32  31  33  32  36  34  30  31  31  30  29  29          
13          28  30  31  32  32  31  34  35  33  32  29  31  29  28  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 10) - {'options': [(9, 9)], 'scores': [3]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 10): {'options': [(9, 9)], 'scores': [3]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 10) - {'options': [(9, 9)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 10): {'options': [(9, 9)], 'scores': [3]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


The initial system score was 241
The maximum obtainable for the system is 244
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

Cell Scores:
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 10) - {'options': [(9, 9)], 'scores': [3]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(13, 12) - {'options': [(13, 12)], 'scores': [0]}
(13, 10) - {'options': [(13, 10)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 5) - {'options': [(15, 6)], 'scores': [3]}
(13, 5) - {'options': [(12, 5)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 9)], 'scores': [1]}
(1, 9) - {'options': [(1, 8)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(12, 2)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (13, 12): {'options': [(13, 12)], 'scores': [0]}, (13, 2): {'options': [(12, 2)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (13, 5): {'options': [(12, 5)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [3]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 8)], 'scores': [-1]}, (1, 10): {'options': [(1, 9)], 'scores': [1]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (15, 5): {'options': [(15, 6)], 'scores': [3]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 46 ---------------------------
[((9, 11), 1.0, [(9, 12), (9, 13)]), ((13, 9), 1.0, [(13, 10), (12, 9)]), ((12, 9), 1.0, [(13, 9), (13, 10)]), ((9, 15), 1.25, [(9, 14), (9, 13), (8, 14), (9, 12), (9, 11)]), ((8, 14), 1.3333333333333333, [(9, 14), (9, 13), (9, 15), (9, 12)]), ((13, 10), 1.5, [(13, 9), (13, 12), (12, 9)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (8, 14), (9, 12), (9, 11)]), ((9, 13), 2.5, [(9, 14), (9, 12), (8, 14), (9, 11), (9, 15)])]
There are 2 groups
[(9, 13), (9, 14), (8, 14), (9, 15), (9, 11), (9, 12)]
[(13, 9), (13, 12), (13, 10), (12, 9)]
frontline_radius = 0
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15, 5) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = -3
(12, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -10
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
(12, 2) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -49
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 1, 9) (friendly)  vulnerability = 10 attack_ratio =  0 health_diffs =  0
(13,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(14,11) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -41
(12, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  5
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
(12, 3) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  30  29  29                              
 2                      29  30  31  30  29  31  28  27  28                      
 3              28  29  30  31  31  31  33  28  28  31  28  28  28              
 4              29  30  31  32  33  33  33  32  32  30  30  30  28              
 5          29  30  31  32  33  34  35  35  35  34  32  32  30  28  28          
 6          29  30  32  33  34  35  36  37  36  34  34  32  29  31  28          
 7      29  28  28  32  34  35  36  36  37  35  34  34  33  30  28  30  30      
 8      28  29  28  30  34  36  36  34  34  33  35  33  32  33  28  30  31      
 9      30  26  29  31  35  36  33  34  35  34  30  34  34  30  33  31  31      
10      29  26  29  31  34  34  31  34  32  31  33  33  33  30  30  31  31      
11      28  30  27  31  33  32  33  31  34  33  33  31  30  33  29  30  30      
12          28  29  32  32  31  33  32  36  34  30  31  30  29  30  30          
13          28  30  31  32  32  31  34  35  33  32  29  31  28  29  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(12, 3)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [0]}
(13, 12) - {'options': [(12, 12)], 'scores': [1]}
(13, 10) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(12, 10)], 'scores': [-1]}
determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 

determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)]
occupied - [(9, 12), (9, 13), (9, 14)]
available_bots - [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)], 35: [(9, 13), (9, 14)], 36: [(9, 12)]}
max_score - 208

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  
10                 
11           3     
12           X   3 
13       3   X     
14       3   X     
15           3     
16                 


The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
bots_in_optional = [(8, 14), (9, 15), (9, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(8, 14), (9, 15), (9, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 14), (9, 15), (9, 11)]
current_bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 14), (9, 13), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 14), (9, 13), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           ?     
12           0   - 
13       -   0     
14       ?   0     
15           ?     
16                 

Cell Scores:
     7   8   9  10  
10                 
11          30     
12          34  33 
13      32  34     
14      33  30     
15          33     
16                 

The system now has a total of 768 options
Optional squares exist

System result = ...
The system has a total of 768 options
(8, 14) - {'options': [(9, 14), (8, 13), (8, 14)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 12), (9, 11)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 768 combinations
Ran full set of options and didnt find top result
Score is 0
(8, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 5) - {'options': [(12, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 5) - {'options': [(15, 6)], 'scores': [3]}
settle_sys returned with {(12, 2): {'options': [(12, 3)], 'scores': [4]}, (13, 12): {'options': [(12, 12)], 'scores': [1]}, (15, 5): {'options': [(15, 6)], 'scores': [3]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (12, 9): {'options': [(12, 10)], 'scores': [-1]}, (12, 5): {'options': [(12, 6)], 'scores': [2]}, (8, 14): {'options': [(9, 14)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (13, 10): {'options': [(13, 9)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 47 ---------------------------
[((12, 6), 0.3333333333333333, [(12, 9)]), ((12, 12), 0.5, [(10, 12)]), ((13, 9), 0.5, [(12, 9)]), ((12, 9), 0.5, [(13, 9)]), ((9, 15), 1.25, [(9, 14), (9, 13), (9, 12), (9, 11), (10, 12)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.0, [(9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 14)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)])]
There are 2 groups
[(13, 9), (12, 9), (12, 6)]
[(9, 13), (9, 14), (9, 15), (12, 12), (10, 12), (9, 11), (9, 12)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(12,12) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -57
( 3,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15, 5) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -3
(12, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = 35
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -57
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  2
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 6) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 1, 9) (friendly)  vulnerability = 10 attack_ratio = -1 health_diffs = -50
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
(14,11) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -40
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
(12, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -2
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  30  29  30                              
 2                      29  30  30  30  32  28  28  28  28                      
 3              28  29  30  31  32  31  30  31  28  30  28  28  28              
 4              29  30  31  32  33  34  33  32  31  30  30  30  28              
 5          29  29  31  32  33  34  35  36  34  34  32  32  30  28  28          
 6          28  29  31  33  34  35  36  37  36  34  34  32  29  31  28          
 7      28  27  30  31  33  35  35  37  37  35  34  34  33  30  28  30  30      
 8      29  29  27  31  35  35  35  35  35  33  35  33  32  33  28  30  31      
 9      29  27  30  33  34  35  35  32  36  35  30  34  34  30  33  31  31      
10      29  29  27  31  35  33  30  35  33  31  33  33  33  30  30  31  31      
11      28  27  30  31  32  32  32  32  34  33  33  31  30  33  29  30  30      
12          28  29  31  32  31  33  32  36  34  30  31  30  29  30  30          
13          29  29  31  32  32  31  34  35  33  32  29  31  28  29  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(12, 3)], 'scores': [2]}
System has been reduced
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


The initial system score was 239
The maximum obtainable for the system is 239
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

Cell Scores:
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 6) - {'options': [(12, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 5) - {'options': [(15, 6)], 'scores': [3]}
settle_sys returned with {(12, 2): {'options': [(12, 3)], 'scores': [2]}, (15, 5): {'options': [(15, 6)], 'scores': [3]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (12, 6): {'options': [(12, 7)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 10)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 14)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 48 ---------------------------
[((12, 7), 0.5, [(12, 9)]), ((13, 9), 0.5, [(12, 9)]), ((9, 11), 1.0, [(9, 12), (9, 13)]), ((12, 9), 1.0, [(13, 9), (12, 7)]), ((9, 15), 1.25, [(9, 14), (9, 13), (8, 14), (9, 12), (9, 11)]), ((8, 14), 1.3333333333333333, [(9, 14), (9, 13), (9, 15), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (8, 14), (9, 12), (9, 11)]), ((9, 13), 2.5, [(9, 14), (9, 12), (8, 14), (9, 11), (9, 15)])]
There are 2 groups
[(13, 9), (12, 7), (12, 9)]
[(9, 13), (9, 14), (8, 14), (9, 15), (9, 11), (9, 12)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -107
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15, 5) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -3
(12, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = 35
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -33
(12, 2) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -47
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 1,10) (friendly)  vulnerability =  9 attack_ratio = -1 health_diffs = -13
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 40
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -90
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -37
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
(12, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -3
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  31  29  28                              
 2                      29  30  31  31  31  31  26  26  28                      
 3              28  29  30  31  32  33  32  28  29  29  27  28  28              
 4              29  30  31  32  33  34  35  32  30  29  30  30  28              
 5          29  30  31  32  33  34  35  36  35  33  32  32  30  28  28          
 6          29  30  32  33  34  35  36  37  36  34  34  32  29  31  28          
 7      29  28  28  32  34  35  36  36  37  35  34  34  33  30  28  30  30      
 8      28  28  29  30  34  36  36  34  34  33  35  33  32  33  28  30  31      
 9      29  25  30  32  35  36  33  34  35  34  30  34  33  31  33  31  31      
10      28  28  27  32  35  34  31  34  32  31  33  32  32  31  31  31  31      
11      27  29  28  32  33  32  33  31  34  33  32  30  32  31  30  31  30      
12          27  30  32  32  31  33  32  36  34  30  30  29  30  31  30          
13          28  30  31  32  32  31  34  35  33  32  29  30  29  29  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(12, 3)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 

determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)]
occupied - [(9, 12), (9, 13), (9, 14)]
available_bots - [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)], 35: [(9, 13), (9, 14)], 36: [(9, 12)]}
max_score - 208

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  
10                 
11           3     
12           X   3 
13       3   X     
14       3   X     
15           3     
16                 


The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
bots_in_optional = [(8, 14), (9, 15), (9, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(8, 14), (9, 15), (9, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 14), (9, 15), (9, 11)]
current_bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 14), (9, 13), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 14), (9, 13), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           ?     
12           0   - 
13       -   0     
14       ?   0     
15           ?     
16                 

Cell Scores:
     7   8   9  10  
10                 
11          30     
12          34  32 
13      32  33     
14      33  31     
15          33     
16                 

The system now has a total of 768 options
Optional squares exist

System result = ...
The system has a total of 768 options
(8, 14) - {'options': [(9, 14), (8, 13), (8, 14)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 12), (9, 11)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 768 combinations
Ran full set of options and didnt find top result
Score is 0
(8, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(12, 7) - {'options': [(11, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 8)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 5) - {'options': [(15, 6)], 'scores': [3]}
settle_sys returned with {(12, 2): {'options': [(12, 3)], 'scores': [3]}, (15, 5): {'options': [(15, 6)], 'scores': [3]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (8, 14): {'options': [(9, 14)], 'scores': [1]}, (12, 7): {'options': [(11, 7)], 'scores': [0]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 10): {'options': [(1, 9)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (12, 9): {'options': [(12, 8)], 'scores': [-1]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 49 ---------------------------
[((12, 12), 0.5, [(10, 12)]), ((12, 9), 0.5, [(12, 8)]), ((12, 8), 1.0, [(12, 9)]), ((9, 15), 1.25, [(9, 14), (9, 13), (9, 12), (9, 11), (10, 12)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.0, [(9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 14)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)])]
There are 2 groups
[(9, 13), (9, 14), (9, 15), (12, 12), (10, 12), (9, 11), (9, 12)]
[(12, 9), (12, 8)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(12,12) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -107
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 3, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 35
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -57
(12, 2) (friendly)  vulnerability =  6 attack_ratio = -1 health_diffs = -55
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 35
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 30
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 1, 9) (friendly)  vulnerability = 10 attack_ratio = -1 health_diffs = -59
(14, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  3
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -2 health_diffs = -130
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -3
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  2 health_diffs = 40
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  29                              
 2                      29  30  31  32  32  29  27  27  28                      
 3              28  29  30  31  32  32  31  30  28  28  27  28  28              
 4              29  30  31  32  33  34  34  31  29  29  30  29  29              
 5          29  29  31  32  33  34  35  36  34  33  32  31  29  29  29          
 6          29  29  31  33  34  35  36  37  36  34  33  31  31  29  29          
 7      29  28  32  31  33  35  35  37  37  35  34  34  32  29  29  31  30      
 8      30  28  29  33  35  35  35  35  35  33  35  33  32  32  29  30  31      
 9      29  29  28  33  35  35  35  32  36  35  30  34  33  31  33  31  31      
10      26  26  29  31  34  33  30  35  33  31  33  32  32  31  31  31  31      
11      27  27  27  31  33  32  32  32  34  33  32  30  32  31  30  31  30      
12          27  29  32  32  31  33  32  36  34  30  30  29  30  31  30          
13          28  30  31  32  32  31  34  35  33  32  29  30  29  29  29          
14              29  30  31  32  32  34  35  33  31  30  29  29  29              
15              28  29  30  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(13, 2)], 'scores': [1]}
System has been reduced
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


The initial system score was 238
The maximum obtainable for the system is 238
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

Cell Scores:
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(12, 8) - {'options': [(11, 8)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 6) - {'options': [(14, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 8)], 'scores': [1]}
settle_sys returned with {(12, 2): {'options': [(13, 2)], 'scores': [1]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (11, 7): {'options': [(10, 7)], 'scores': [1]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (15, 6): {'options': [(14, 6)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 8)], 'scores': [1]}, (9, 13): {'options': [(9, 14)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}, (12, 8): {'options': [(11, 8)], 'scores': [2]}}
-------------------------- running turn 50 ---------------------------
[((11, 7), 0.5, [(12, 8)]), ((12, 9), 0.5, [(12, 8)]), ((9, 11), 1.0, [(9, 12), (9, 13)]), ((12, 8), 1.0, [(12, 9), (11, 7)]), ((9, 15), 1.25, [(9, 14), (9, 13), (8, 14), (9, 12), (9, 11)]), ((8, 14), 1.3333333333333333, [(9, 14), (9, 13), (9, 15), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (8, 14), (9, 12), (9, 11)]), ((9, 13), 2.5, [(9, 14), (9, 12), (8, 14), (9, 11), (9, 15)])]
There are 2 groups
[(11, 7), (12, 9), (12, 8)]
[(9, 13), (9, 14), (8, 14), (9, 15), (9, 11), (9, 12)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(12,12) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -107
( 3,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(11, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(13, 2) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -5
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -33
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  9
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(10, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(14, 6) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -3
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 1, 8) (friendly)  vulnerability = 11 attack_ratio =  0 health_diffs = -9
(12, 3) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  5
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10   9   8   8                              
 2                      10  10  31  31  31  31  26   6   9                      
 3               0  10  30  31  32  33  32  28  29  29  27   9   0              
 4              10  30  31  32  33  34  35  32  30  29  29  30  10              
 5          10  30  31  32  33  34  35  36  35  33  31  30  30  30  10          
 6          10  30  32  33  34  35  36  37  35  34  32  33  29  29  10          
 7      10  29  29  32  34  35  36  36  36  34  35  34  31  29  29  30  10      
 8       8  26  30  31  34  36  36  33  33  35  33  34  31  32  31  29   9      
 9       6  28  28  31  35  36  33  34  34  33  31  35  34  32  31  32  10      
10       7  28  25  31  35  34  31  34  32  30  34  32  32  32  32  32  10      
11       8  26  30  31  32  32  33  31  34  33  32  30  32  31  31  31  10      
12           8  29  31  32  31  33  32  36  34  30  30  29  30  31  10          
13          10  29  31  32  32  31  34  35  33  32  29  30  29  29  10          
14              10  30  31  32  32  34  35  33  31  30  29  29  10              
15               0  10  30  31  32  33  34  33  31  31  29  10   0              
16                      10  10  31  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(11, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(12, 8) - {'options': [(12, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(13, 3)], 'scores': [18]}
determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 

determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)]
occupied - [(9, 12), (9, 13), (9, 14)]
available_bots - [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)], 35: [(9, 13), (9, 14)], 36: [(9, 12)]}
max_score - 208

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  
10                 
11           3     
12           X   3 
13       3   X     
14       3   X     
15           3     
16                 


The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
bots_in_optional = [(8, 14), (9, 15), (9, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(8, 14), (9, 15), (9, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 14), (9, 15), (9, 11)]
current_bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 14), (9, 13), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 14), (9, 13), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           ?     
12           0   - 
13       -   0     
14       ?   0     
15           ?     
16                 

Cell Scores:
     7   8   9  10  
10                 
11          31     
12          35  32 
13      31  34     
14      32  32     
15          31     
16                 

The system now has a total of 768 options
Optional squares exist

System result = ...
The system has a total of 768 options
(8, 14) - {'options': [(9, 14), (8, 13), (8, 14)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 12), (9, 11)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 768 combinations
Ran full set of options and didnt find top result
Score is 0
(8, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 6) - {'options': [(13, 6)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 8) - {'options': [(2, 8)], 'scores': [18]}
settle_sys returned with {(11, 7): {'options': [(11, 7)], 'scores': [0]}, (13, 2): {'options': [(13, 3)], 'scores': [18]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (8, 14): {'options': [(9, 14)], 'scores': [1]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (14, 6): {'options': [(13, 6)], 'scores': [4]}, (1, 8): {'options': [(2, 8)], 'scores': [18]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}, (12, 8): {'options': [(12, 7)], 'scores': [0]}}
-------------------------- running turn 51 ---------------------------
[((6, 16), 0.25, [(9, 15)]), ((1, 7), 0.3333333333333333, [(2, 8)]), ((13, 2), 0.5, [(13, 3)]), ((12, 12), 0.5, [(10, 12)]), ((11, 7), 0.5, [(12, 7)]), ((12, 9), 0.5, [(12, 7)]), ((13, 3), 1.0, [(13, 2)]), ((12, 7), 1.0, [(11, 7)]), ((9, 15), 1.5, [(9, 14), (9, 13), (9, 12), (9, 11), (10, 12), (6, 16)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.0, [(9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 14)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)])]
There are 4 groups
[(9, 13), (9, 14), (9, 15), (12, 12), (10, 12), (9, 11), (6, 16), (9, 12)]
[(2, 8), (1, 7)]
[(13, 2), (13, 3)]
[(11, 7), (12, 7), (12, 9)]
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 3,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -63
(11, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -107
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 2,12) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 3, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
( 3,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -57
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 2, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 28
(13, 3) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -5
(12, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 45
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(12, 6) (enemy)     vulnerability =  3 attack_ratio = -2 health_diffs = -87
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(15, 4) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
(13, 2) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  2 health_diffs = 44
(13, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = -3
(15, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 24
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 3) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -45
( 4, 3) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 1, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 5, 2) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 6,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  29  28                              
 2                      29  28  30  32  31  28  29  26  27                      
 3              28  28  28  30  32  32  32  31  26  29  28  27  26              
 4              29  30  30  32  33  34  34  32  30  29  29  28  29              
 5          29  30  31  32  33  34  35  36  34  33  30  31  30  26  26          
 6          30  30  32  33  34  35  36  37  34  33  34  31  28  26  29          
 7      30  29  30  31  34  35  35  37  36  34  34  33  31  29  30  27  28      
 8      29  28  30  30  33  35  35  34  34  35  33  33  33  33  29  29  31      
 9      30  29  26  32  33  34  35  32  35  34  31  35  34  33  32  33  32      
10      28  26  29  30  33  33  30  35  33  30  34  32  32  32  33  32  31      
11      28  29  28  30  33  32  32  32  34  33  32  30  32  31  31  31  30      
12          28  28  32  32  31  33  32  36  34  30  30  29  30  31  30          
13          27  27  30  32  32  31  34  35  33  32  29  30  29  29  29          
14              27  27  30  32  32  34  35  33  31  30  29  29  29              
15              26  26  29  31  32  33  34  33  31  31  29  29  28              
16                      29  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         


The initial system score was 238
The maximum obtainable for the system is 238
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

Cell Scores:
     8   9  10  11  12  13  
10                         
11                         
12                         
13                         
14                         
15                         
16                         

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(13, 3)], 'scores': [1]}
(13, 3) - {'options': [(13, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(3, 8)], 'scores': [2]}
(1, 7) - {'options': [(1, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 6) - {'options': [(12, 6)], 'scores': [3]}
(11, 7) - {'options': [(10, 7)], 'scores': [0]}
(12, 7) - {'options': [(11, 7)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 3) - {'options': [(4, 4)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 16) - {'options': [(7, 16)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (13, 2): {'options': [(13, 3)], 'scores': [1]}, (13, 3): {'options': [(13, 4)], 'scores': [1]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (12, 7): {'options': [(11, 7)], 'scores': [1]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (11, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 6): {'options': [(12, 6)], 'scores': [3]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (2, 12): {'options': [(2, 11)], 'scores': [1]}, (4, 3): {'options': [(4, 4)], 'scores': [2]}, (1, 7): {'options': [(1, 7)], 'scores': [0]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (6, 16): {'options': [(7, 16)], 'scores': [1]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 52 ---------------------------
[((13, 2), 0.5, [(13, 3)]), ((12, 9), 0.5, [(12, 7)]), ((7, 16), 0.75, [(8, 14), (9, 15), (9, 14)]), ((13, 3), 1.0, [(13, 2)]), ((12, 6), 1.0, [(12, 7)]), ((9, 11), 1.0, [(9, 12), (9, 13)]), ((9, 15), 1.5, [(9, 14), (9, 13), (8, 14), (7, 16), (9, 12), (9, 11)]), ((12, 7), 1.5, [(12, 6), (10, 7), (12, 9)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((8, 14), 1.6666666666666667, [(9, 14), (9, 13), (9, 15), (7, 16), (9, 12)]), ((9, 14), 1.6666666666666667, [(9, 13), (9, 15), (8, 14), (9, 12), (9, 11)]), ((9, 13), 2.5, [(9, 14), (9, 12), (8, 14), (9, 11), (9, 15)])]
There are 3 groups
[(13, 2), (13, 3)]
[(10, 7), (12, 7), (12, 9), (12, 6)]
[(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (7, 16), (9, 12)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 4) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 40
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -107
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(12, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  3
( 7,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2,12) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
(13, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -5
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -33
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 3) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -57
(10, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
( 4, 4) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
(12, 6) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -3
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(13, 2) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 33
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 4,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 5, 3) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12, 3) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -43
( 1, 7) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(14, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  27                              
 2                      27  29  31  32  32  29  28  25  27                      
 3              27  27  30  29  31  33  33  29  28  27  26  26  27              
 4              29  29  29  31  33  34  35  33  28  26  27  30  26              
 5          29  30  31  31  33  34  35  36  34  31  32  29  26  27  28          
 6          30  30  32  33  34  35  36  37  35  34  32  29  27  30  28          
 7      30  29  29  32  34  35  36  36  36  34  35  32  30  31  28  29  30      
 8      29  26  30  31  34  36  36  33  33  35  32  33  34  30  30  32  31      
 9      28  27  29  31  35  36  33  34  34  33  31  34  33  33  34  33  32      
10      27  27  26  32  35  34  31  34  32  30  34  32  31  33  33  32  31      
11      27  28  28  32  33  32  33  31  34  33  32  30  32  31  31  31  30      
12          27  30  31  32  31  33  32  36  34  30  30  29  30  31  30          
13          28  29  28  31  32  31  34  35  33  32  29  30  29  29  29          
14              26  28  28  31  32  34  35  33  31  30  29  29  29              
15              25  27  27  30  32  33  34  33  31  31  29  29  28              
16                      28  30  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15           X     
16                 

determine_ideal_outcome called with [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)]
occupied - [(9, 12), (9, 13), (9, 14)]
available_bots - [(8, 14), (9, 14), (9, 13), (9, 15), (9, 11), (9, 12)]
levels - {34: [(8, 13), (9, 15), (10, 12), (8, 14), (9, 11)], 35: [(9, 13), (9, 14)], 36: [(9, 12)]}
max_score - 208

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  
10                 
11           3     
12           X   3 
13       3   X     
14       3   X     
15           3     
16                 


The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
bots_in_optional = [(8, 14), (9, 15), (9, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(8, 14), (9, 15), (9, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 14), (9, 15), (9, 11)]
current_bots_in_occupied = [(9, 14), (9, 13), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 14), (9, 13), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 14), (9, 13), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  
10                 
11           ?     
12           0   - 
13       -   0     
14       ?   0     
15           ?     
16                 

Cell Scores:
     7   8   9  10  
10                 
11          31     
12          34  32 
13      34  33     
14      30  33     
15          34     
16                 

The system now has a total of 768 options
Optional squares exist

System result = ...
The system has a total of 768 options
(8, 14) - {'options': [(9, 14), (8, 13), (8, 14)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (8, 14)], 'scores': [0, 0, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13)], 'scores': [1, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 12), (9, 11)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 768 combinations
Ran full set of options and didnt find top result
Score is 0
(8, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 4) - {'options': [(4, 5)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(13, 2)], 'scores': [0]}
(13, 3) - {'options': [(13, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 7) - {'options': [(9, 7)], 'scores': [2]}
(12, 7) - {'options': [(11, 7)], 'scores': [3]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(12, 6) - {'options': [(11, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 16) - {'options': [(8, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(3, 12)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 7) - {'options': [(1, 7)], 'scores': [0]}
settle_sys returned with {(8, 14): {'options': [(9, 14)], 'scores': [1]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (13, 2): {'options': [(13, 2)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (13, 3): {'options': [(13, 4)], 'scores': [1]}, (10, 7): {'options': [(9, 7)], 'scores': [2]}, (12, 7): {'options': [(11, 7)], 'scores': [3]}, (4, 4): {'options': [(4, 5)], 'scores': [2]}, (12, 6): {'options': [(11, 6)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 16): {'options': [(8, 16)], 'scores': [1]}, (2, 12): {'options': [(3, 12)], 'scores': [3]}, (1, 7): {'options': [(1, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 53 ---------------------------
[((13, 2), 0.5, [(13, 3)]), ((12, 12), 0.5, [(10, 12)]), ((8, 16), 0.75, [(9, 15), (9, 14), (9, 13)]), ((11, 7), 1.0, [(10, 7), (11, 6)]), ((13, 3), 1.0, [(13, 2)]), ((10, 7), 1.0, [(11, 7), (11, 6)]), ((11, 6), 1.0, [(11, 7)]), ((9, 15), 1.5, [(9, 14), (9, 13), (8, 16), (9, 12), (9, 11), (10, 12)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((9, 12), 2.0, [(9, 13), (9, 11), (10, 12), (9, 14)]), ((10, 12), 2.0, [(9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 14), 2.0, [(9, 13), (9, 15), (9, 12), (9, 11), (8, 16), (10, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)])]
There are 3 groups
[(13, 2), (13, 3)]
[(9, 13), (9, 14), (9, 15), (12, 12), (10, 12), (9, 11), (9, 12)]
[(10, 7), (11, 7), (11, 6)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 48
(11, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -107
(13, 3) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -57
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 2,12) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  1
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13, 2) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -5
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -57
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 5) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  3
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 4,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -20
( 8,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(12, 3) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -43
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
(11, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 5) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 6) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -3
( 5, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 1, 7) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 20
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  28                              
 2                      27  29  31  32  32  30  29  26  27                      
 3              27  27  30  29  31  33  34  30  25  29  27  26  27              
 4              29  29  29  31  33  34  34  31  29  26  27  29  27              
 5          29  30  31  31  33  34  35  35  32  32  29  29  26  28  29          
 6          29  31  32  33  34  35  36  36  35  32  32  29  29  28  29          
 7      29  28  31  32  34  35  35  36  35  35  35  33  29  30  29  30  30      
 8      28  30  28  31  34  35  34  33  36  33  33  34  34  29  31  32  31      
 9      29  28  27  33  33  34  35  31  34  35  32  34  33  33  34  33  32      
10      28  25  30  30  33  33  30  35  32  31  34  32  31  33  33  32  31      
11      28  29  28  29  33  32  32  32  34  33  32  30  32  31  31  31  30      
12          28  28  30  31  31  33  32  36  34  30  30  29  30  31  30          
13          27  28  31  29  31  31  34  35  33  32  29  30  29  29  29          
14              28  27  28  31  32  34  35  33  31  30  29  29  29              
15              27  26  30  29  31  33  34  33  31  31  29  29  28              
16                      27  29  31  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(11, 7) - {'options': [(11, 7)], 'scores': [0]}
(11, 6) - {'options': [(10, 6)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(13, 2)], 'scores': [0]}
(13, 3) - {'options': [(12, 3)], 'scores': [2]}
System has been reduced
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 16): {'options': [(9, 16)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             
17                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             
17                             

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(8, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 16): {'options': [(9, 16)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             
17                             


The initial system score was 270
The maximum obtainable for the system is 271
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             
17                             

Cell Scores:
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             
17                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(8, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 5) - {'options': [(4, 6)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 7) - {'options': [(1, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys returned with {(11, 7): {'options': [(11, 7)], 'scores': [0]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (13, 2): {'options': [(13, 2)], 'scores': [0]}, (13, 3): {'options': [(12, 3)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 16): {'options': [(9, 16)], 'scores': [1]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (4, 5): {'options': [(4, 6)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (2, 12): {'options': [(2, 11)], 'scores': [1]}, (1, 7): {'options': [(1, 7)], 'scores': [0]}, (9, 14): {'options': [(8, 14)], 'scores': [-1]}, (9, 13): {'options': [(9, 14)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}, (11, 6): {'options': [(10, 6)], 'scores': [3]}}
-------------------------- running turn 54 ---------------------------
[((13, 2), 0.5, [(12, 3)]), ((11, 7), 1.0, [(10, 7), (10, 6)]), ((10, 6), 1.0, [(10, 7)]), ((10, 7), 1.0, [(11, 7), (10, 6)]), ((9, 11), 1.0, [(9, 12), (9, 13)]), ((9, 16), 1.25, [(9, 15), (9, 14), (9, 13), (8, 14), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((9, 15), 1.6666666666666667, [(9, 16), (9, 14), (9, 13), (8, 14), (9, 12)]), ((8, 14), 1.6666666666666667, [(9, 14), (9, 13), (9, 15), (9, 16), (9, 12)]), ((9, 14), 2.0, [(9, 13), (9, 15), (8, 14), (9, 16), (9, 12), (9, 11)]), ((9, 13), 2.5, [(9, 14), (9, 12), (8, 14), (9, 11), (9, 15)])]
There are 3 groups
[(13, 2), (12, 3)]
[(10, 7), (11, 7), (10, 6)]
[(9, 13), (9, 14), (9, 15), (8, 14), (9, 16), (9, 11), (9, 12)]
frontline_radius = 0
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 48
(12,12) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -107
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -18
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
( 2,12) (friendly)  vulnerability =  6 attack_ratio = -2 health_diffs = -55
(13, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -5
(11,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -33
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 2, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -20
( 6,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 4,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 5, 4) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -3
(13, 2) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 28
(13, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs =  7
( 4, 6) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  1
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 23
(12, 3) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -82
( 1, 7) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 20
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  27                              
 2                      28  30  31  32  32  29  29  26  28                      
 3              28  28  28  30  32  33  33  29  29  26  27  27  27              
 4              28  28  31  30  32  34  34  30  27  30  26  29  27              
 5          29  30  30  30  32  34  34  34  35  30  29  27  28  29  29          
 6          29  31  32  32  34  35  36  35  34  33  30  30  28  30  30          
 7      29  29  30  33  34  35  36  35  35  34  35  31  30  29  31  31  30      
 8      29  31  29  31  35  36  35  32  35  33  33  33  32  31  32  32  31      
 9      30  28  31  31  34  36  33  33  33  34  32  34  32  34  34  33  32      
10      30  26  26  32  33  33  31  34  31  31  34  32  31  33  33  32  31      
11      27  29  27  28  31  32  33  31  34  33  32  30  32  31  31  31  30      
12          26  26  29  32  31  33  32  36  34  30  30  29  30  31  30          
13          26  29  29  31  31  31  34  35  33  32  29  30  29  29  29          
14              27  29  30  30  31  34  35  33  31  30  29  29  29              
15              27  28  28  31  30  32  34  33  31  31  29  29  28              
16                      28  28  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (8, 14), (9, 15), (9, 16), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15                 
16                 
17                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  
10                 
11           X     
12           X   - 
13       -   X     
14       X   X     
15                 
16                 
17                 

System can be split into 3 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 13), (8, 13)], 'scores': [1, 0, -1]}
(9, 11) - {'options': [(9, 12), (9, 11)], 'scores': [2, 0]}
(9, 14) - {'options': [(9, 13), (8, 14)], 'scores': [0, -1]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}
(8, 14) - {'options': [(8, 13), (8, 14)], 'scores': [0, 0]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(8, 14) - {'options': [(8, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
Solving system # 1
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(8, 14): {'options': [(8, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [1]}
(9, 16): {'options': [(9, 15)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 


The initial system score was 241
The maximum obtainable for the system is 242
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 

Cell Scores:
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(8, 14) - {'options': [(8, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 3
(8, 14) - {'options': [(8, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(8, 14): {'options': [(8, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [1]}
(9, 16): {'options': [(9, 15)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 


The initial system score was 241
The maximum obtainable for the system is 242
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 

Cell Scores:
     7   8   9  10  
10                 
11                 
12                 
13                 
14                 
15                 
16                 
17                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(8, 14) - {'options': [(8, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 7) - {'options': [(9, 7)], 'scores': [1]}
(11, 7) - {'options': [(11, 7)], 'scores': [0]}
(10, 6) - {'options': [(10, 5)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(13, 2)], 'scores': [0]}
(12, 3) - {'options': [(12, 4)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 6) - {'options': [(4, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 7) - {'options': [(2, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys returned with {(11, 7): {'options': [(11, 7)], 'scores': [0]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (13, 2): {'options': [(13, 2)], 'scores': [0]}, (4, 6): {'options': [(4, 7)], 'scores': [1]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (10, 6): {'options': [(10, 5)], 'scores': [1]}, (8, 14): {'options': [(8, 13)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (2, 12): {'options': [(2, 11)], 'scores': [3]}, (12, 3): {'options': [(12, 4)], 'scores': [4]}, (1, 7): {'options': [(2, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 55 ---------------------------
[((4, 7), 0.5, [(2, 7)]), ((12, 12), 0.5, [(10, 12)]), ((11, 7), 0.5, [(9, 7)]), ((9, 15), 1.0, [(9, 14), (9, 13)]), ((9, 11), 1.5, [(9, 12), (9, 13), (10, 12)]), ((8, 13), 1.5, [(9, 13), (9, 14), (9, 12)]), ((10, 12), 2.0, [(9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 14), 2.0, [(9, 13), (9, 15), (8, 13), (9, 12), (9, 11), (10, 12)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (8, 13), (9, 14)]), ((9, 13), 3.0, [(9, 14), (8, 13), (9, 12), (9, 11), (10, 12), (9, 15)])]
There are 3 groups
[(2, 7), (4, 7)]
[(9, 13), (9, 14), (9, 15), (12, 12), (10, 12), (9, 11), (8, 13), (9, 12)]
[(11, 7), (9, 7)]
frontline_radius = 0
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 8,13) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -10
(13, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -107
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -5
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 2,12) (friendly)  vulnerability =  5 attack_ratio = -2 health_diffs = -63
(13, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(13, 2) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -5
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -57
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -40
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 7,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(12, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
(11, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
(11, 4) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  6
( 3,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 41
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 5, 5) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 2, 7) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -40
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -12
( 9, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9, 5) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  3
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  28                              
 2                      29  30  31  32  32  30  30  27  27                      
 3              28  29  29  31  32  33  33  31  27  26  27  28  28              
 4              29  29  29  31  33  33  32  30  29  27  28  27  28              
 5          29  29  29  32  31  32  33  36  32  29  27  27  30  30  29          
 6          29  30  31  31  33  35  35  34  34  32  32  27  30  31  30          
 7      29  28  29  32  33  35  35  36  34  35  34  30  31  30  31  31  30      
 8      28  30  30  31  34  35  34  33  36  33  33  32  33  31  32  32  31      
 9      31  28  28  33  35  35  35  31  34  35  32  34  32  34  34  33  32      
10      29  26  29  31  34  33  30  35  32  31  34  32  31  33  33  32  31      
11      27  28  27  29  32  32  32  32  34  33  32  30  32  31  31  31  30      
12          26  25  30  32  31  33  32  36  34  30  30  29  30  31  30          
13          26  29  29  31  32  30  34  35  33  32  29  30  29  29  29          
14              27  29  31  31  30  33  35  33  31  30  29  29  29              
15              27  29  29  29  32  31  33  33  31  31  29  29  28              
16                      29  29  29  31  33  32  31  30  29                      
17                              29  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 7) - {'options': [(2, 8)], 'scores': [2]}
(4, 7) - {'options': [(5, 7)], 'scores': [1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(10, 11)], 'scores': [-1]}
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [-2]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [2]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(10, 12)], 'scores': [0]}
(9, 11): {'options': [(10, 11)], 'scores': [-1]}
(8, 13): {'options': [(8, 13)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [-2]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(10, 11)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 6
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 11)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [2]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(10, 12)], 'scores': [0]}
(9, 11): {'options': [(10, 11)], 'scores': [-1]}
(8, 13): {'options': [(8, 13)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             


The initial system score was 271
The maximum obtainable for the system is 271
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             

Cell Scores:
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             
16                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(10, 11)], 'scores': [-1]}
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 2) - {'options': [(12, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 5) - {'options': [(9, 5)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 7) - {'options': [(10, 7)], 'scores': [1]}
(9, 7) - {'options': [(9, 8)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys returned with {(2, 7): {'options': [(2, 8)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (4, 7): {'options': [(5, 7)], 'scores': [1]}, (13, 2): {'options': [(12, 2)], 'scores': [0]}, (8, 13): {'options': [(8, 13)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (11, 7): {'options': [(10, 7)], 'scores': [1]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (10, 5): {'options': [(9, 5)], 'scores': [4]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [-1]}, (2, 12): {'options': [(2, 11)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [-2]}, (9, 7): {'options': [(9, 8)], 'scores': [2]}}
-------------------------- running turn 56 ---------------------------
[((12, 12), 0.5, [(10, 12)]), ((10, 7), 1.0, [(9, 7)]), ((9, 7), 1.0, [(10, 7), (9, 5)]), ((8, 13), 1.5, [(9, 13), (9, 14), (9, 12)]), ((9, 14), 1.6666666666666667, [(9, 13), (8, 13), (9, 12), (9, 11), (10, 12)]), ((9, 11), 2.0, [(10, 11), (9, 12), (9, 13), (10, 12)]), ((10, 11), 2.0, [(9, 11), (10, 12)]), ((9, 13), 2.5, [(9, 14), (8, 13), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.5, [(10, 11), (9, 12), (9, 13), (12, 12), (9, 11)]), ((9, 12), 3.0, [(9, 13), (9, 11), (10, 12), (8, 13), (10, 11), (9, 14)])]
There are 2 groups
[(9, 13), (10, 11), (8, 13), (12, 12), (10, 12), (9, 11), (9, 14), (9, 12)]
[(10, 7), (9, 5), (9, 7)]
frontline_radius = 0
( 8,13) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
(13, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -107
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(12, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(13, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8, 5) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  3
(11,11) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -107
(12, 2) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = -9
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -95
( 7,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -5
( 3,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 5, 6) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(11, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
(11, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
(10, 8) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -80
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -34
( 2, 7) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -49
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 5, 7) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -3
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 37
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  28                              
 2                      29  30  31  32  32  30  30  28  27                      
 3              28  29  30  31  32  32  34  31  28  27  28  28  28              
 4              29  30  30  32  32  32  33  32  30  25  29  28  28              
 5          29  30  30  30  31  32  35  34  32  29  29  26  29  30  29          
 6          29  29  30  33  32  33  34  36  34  31  31  26  30  31  30          
 7      29  28  29  31  32  34  36  35  36  34  33  29  31  30  31  31  30      
 8      28  29  31  31  33  36  36  33  33  35  32  31  33  31  32  32  31      
 9      30  27  29  34  36  36  33  34  34  33  31  34  32  34  34  33  32      
10      28  28  27  32  35  34  31  34  32  30  34  32  31  33  33  32  31      
11      26  27  28  30  32  32  33  31  34  33  32  30  32  31  31  31  30      
12          25  26  30  32  31  33  32  36  34  30  30  29  30  31  30          
13          26  29  29  31  32  30  34  35  33  32  29  30  29  29  29          
14              27  29  31  31  30  33  35  33  31  30  29  29  29              
15              27  29  29  29  32  31  33  33  31  31  29  29  28              
16                      29  29  29  31  33  32  31  30  29                      
17                              29  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 7) - {'options': [(2, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(11, 2)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 11), (8, 13), (10, 11), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  
10                     
11           X   X     
12           X   X     
13       X   X   -     
14       -   X   -     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  
10                     
11           X   X     
12           X   X     
13       X   X   -     
14       -   X   -     
15                     

determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 11), (8, 13), (10, 11), (9, 12)]
outcome = 
num_optional - 1
optional - [(8, 14), (10, 13), (10, 14), (10, 11)]
occupied - [(9, 12), (9, 13), (9, 14), (9, 11), (8, 13), (10, 12)]
available_bots - [(9, 13), (9, 14), (10, 12), (9, 11), (8, 13), (10, 11), (9, 12)]
levels - {33: [(8, 14), (10, 13), (10, 14), (10, 11)], 34: [(9, 11), (8, 13), (10, 12)], 35: [(9, 13), (9, 14)], 36: [(9, 12)]}
max_score - 241

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  
10                     
11           X   1     
12           X   X     
13       X   X   1     
14       1   X   1     
15                     


The initial system score was 241
The maximum obtainable for the system is 241
The score gain were looking for is 0
bots_in_optional = [(10, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (8, 13), (10, 12), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 6
current_bots_in_optional = [(10, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11)]
current_bots_in_occupied = [(9, 13), (9, 14), (8, 13), (10, 12), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 14), (8, 13), (10, 12), (9, 11)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (8, 13), (10, 12), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  
10                     
11           0   ?     
12           0   0     
13       0   0   -     
14       -   0   -     
15                     

Cell Scores:
     7   8   9  10  11  
10                     
11          31  34     
12          34  32     
13      33  32  31     
14      31  34  33     
15                     

The system now has a total of 6480 options
Optional squares exist

System result = ...
The system has a total of 6480 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13), (10, 13)], 'scores': [1, 0, 0, -1, -2]}
(9, 14) - {'options': [(9, 13), (9, 14), (10, 14)], 'scores': [0, 0, -2]}
(10, 12) - {'options': [(9, 12), (10, 12), (10, 13), (10, 11)], 'scores': [2, 0, -1, -1]}
(9, 11) - {'options': [(9, 12), (9, 11), (10, 11)], 'scores': [2, 0, -1]}
(8, 13) - {'options': [(9, 13), (8, 13), (8, 14)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 12), (10, 11)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}


The system did not get simpler in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12), (9, 14), (9, 13), (8, 13), (10, 13)], 'scores': [1, 0, 0, -1, -2]}
(9, 14): {'options': [(9, 13), (9, 14), (10, 14)], 'scores': [0, 0, -2]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12), (10, 12), (10, 13), (10, 11)], 'scores': [2, 0, -1, -1]}
(9, 11): {'options': [(9, 12), (9, 11), (10, 11)], 'scores': [2, 0, -1]}
(8, 13): {'options': [(9, 13), (8, 13), (8, 14)], 'scores': [1, 0, -1]}
(10, 11): {'options': [(9, 11), (10, 12), (10, 11)], 'scores': [1, 1, 0]}
(9, 12): {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}
determine_ideal_outcome called with [(9, 13), (9, 14), (10, 12), (9, 11), (8, 13), (10, 11), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  12  13  
10                             
11           X   X             
12           X   X             
13       X   X   -             
14       -   X   -             
15                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  12  13  
10                             
11           X   X             
12           X   X             
13       X   X   -             
14       -   X   -             
15                             

System can be split into 2 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13), (8, 13), (10, 13)], 'scores': [1, 0, 0, -1, -2]}
(9, 14) - {'options': [(9, 13), (9, 14), (10, 14)], 'scores': [0, 0, -2]}
(10, 12) - {'options': [(9, 12), (10, 12), (10, 13), (10, 11)], 'scores': [2, 0, -1, -1]}
(9, 11) - {'options': [(9, 12), (9, 11), (10, 11)], 'scores': [2, 0, -1]}
(8, 13) - {'options': [(9, 13), (8, 13), (8, 14)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 12), (10, 11)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -2, -2]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-2]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 12)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Solving system # 1
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(10, 14)], 'scores': [-2]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 13): {'options': [(8, 13)], 'scores': [0]}
(10, 11): {'options': [(10, 12)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             


The initial system score was 271
The maximum obtainable for the system is 271
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             

Cell Scores:
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-2]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 12)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(9, 14) - {'options': [(10, 14)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 6
(10, 11) - {'options': [(10, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(10, 14)], 'scores': [-2]}
(12, 12): {'options': [(12, 12)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [2]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(8, 13): {'options': [(8, 13)], 'scores': [0]}
(10, 11): {'options': [(10, 12)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             


The initial system score was 271
The maximum obtainable for the system is 271
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             

Cell Scores:
     7   8   9  10  11  12  13  
10                             
11                             
12                             
13                             
14                             
15                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-2]}
(12, 12) - {'options': [(12, 12)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [2]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 13) - {'options': [(8, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 12)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 7) - {'options': [(9, 7)], 'scores': [2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(9, 7) - {'options': [(8, 7)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
settle_sys returned with {(2, 7): {'options': [(2, 8)], 'scores': [1]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (12, 12): {'options': [(12, 12)], 'scores': [0]}, (8, 13): {'options': [(8, 13)], 'scores': [0]}, (9, 13): {'options': [(9, 14)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [2]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (10, 12): {'options': [(9, 12)], 'scores': [2]}, (9, 14): {'options': [(10, 14)], 'scores': [-2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (10, 11): {'options': [(10, 12)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}, (9, 7): {'options': [(8, 7)], 'scores': [-1]}}
-------------------------- running turn 57 ---------------------------
[((10, 7), 1.0, [(9, 6), (8, 7)]), ((10, 11), 1.0, [(9, 11), (9, 12)]), ((10, 14), 1.0, [(9, 14), (9, 13)]), ((8, 13), 1.5, [(9, 13), (9, 14), (9, 12)]), ((9, 11), 1.5, [(10, 11), (9, 12), (9, 13)]), ((9, 14), 2.0, [(9, 13), (10, 14), (8, 13), (9, 12)]), ((9, 13), 2.5, [(9, 14), (8, 13), (9, 12), (9, 11), (10, 14)]), ((9, 12), 2.5, [(9, 13), (9, 11), (8, 13), (10, 11), (9, 14)])]
There are 2 groups
[(10, 7), (9, 6), (8, 7)]
[(9, 13), (10, 14), (9, 14), (9, 11), (8, 13), (10, 11), (9, 12)]
frontline_radius = 0
( 8,13) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -5
(13,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -45
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  7
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12,12) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -99
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -23
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -15
(12, 2) (friendly)  vulnerability =  7 attack_ratio = -2 health_diffs = -68
(11,10) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -80
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 18
(10, 7) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -10
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 4,13) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 5, 6) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  1
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 8, 6) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -37
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -41
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 34
( 9, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = -3
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
( 2, 7) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -57
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -90
( 5, 7) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = -1
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 37
(10,14) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 6) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  27                              
 2                      29  30  31  32  32  29  29  26  26                      
 3              28  29  30  31  32  33  33  30  28  26  29  27  27              
 4              29  30  30  32  33  33  35  32  27  29  29  29  29              
 5          29  30  30  30  32  33  33  34  32  31  29  30  31  30  29          
 6          29  29  30  33  31  32  36  34  32  31  29  30  32  31  30          
 7      29  27  29  31  32  34  34  35  36  33  29  32  30  31  32  31  30      
 8      27  28  29  31  33  35  35  34  35  33  32  30  33  32  32  32  31      
 9      29  28  27  32  35  35  35  32  36  35  31  32  33  34  34  33  32      
10      28  25  30  32  34  33  30  35  33  32  35  33  31  33  33  32  31      
11      28  29  28  30  33  32  32  32  35  35  32  32  33  31  31  31  30      
12          28  28  30  31  31  32  32  36  35  32  31  29  30  31  30          
13          27  28  31  30  30  29  33  35  33  33  29  30  29  29  29          
14              28  28  29  30  32  32  34  33  31  30  29  29  29              
15              28  28  30  30  30  32  34  33  31  31  29  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 7) - {'options': [(2, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(11, 2)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (8, 13), (10, 14), (9, 11), (10, 11), (9, 12)]


=> INITIAL
BOT Positions:
3 participants
     7   8   9  10  11  
10                     
11           X   X     
12           X   -     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
3 participants
     7   8   9  10  11  
10                     
11           X   X     
12           X   -     
13                     
14                     
15                     

System can be split into 5 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(9, 11) - {'options': [(9, 11), (10, 11)], 'scores': [0, 0]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [0, 0, 0]}
(9, 12) - {'options': [(9, 11), (10, 12)], 'scores': [-1, -1]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 13) - {'options': [(9, 13)], 'scores': [2]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
Solving system # 2
(8, 13) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 13): {'options': [(9, 13)], 'scores': [2]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 241
The maximum obtainable for the system is 244
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 13) - {'options': [(9, 13)], 'scores': [2]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(8, 13) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 13): {'options': [(9, 13)], 'scores': [2]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 241
The maximum obtainable for the system is 244
The score gain were looking for is 3
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 13) - {'options': [(9, 13)], 'scores': [2]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 7) - {'options': [(9, 7)], 'scores': [3]}
(9, 6) - {'options': [(8, 6)], 'scores': [2]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 12) - {'options': [(11, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 9) - {'options': [(13, 9)], 'scores': [1]}
settle_sys returned with {(2, 7): {'options': [(2, 6)], 'scores': [2]}, (12, 2): {'options': [(11, 2)], 'scores': [3]}, (12, 12): {'options': [(11, 12)], 'scores': [1]}, (8, 13): {'options': [(9, 13)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (10, 7): {'options': [(9, 7)], 'scores': [3]}, (12, 9): {'options': [(13, 9)], 'scores': [1]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (10, 14): {'options': [(9, 14)], 'scores': [1]}, (9, 14): {'options': [(9, 15)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [2]}, (9, 12): {'options': [(10, 12)], 'scores': [-1]}}
-------------------------- running turn 58 ---------------------------
[((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((8, 7), 1.0, [(8, 6), (9, 7)]), ((8, 6), 1.0, [(8, 7)]), ((11, 12), 1.0, [(10, 12)]), ((9, 7), 1.0, [(8, 7), (8, 6)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((10, 11), 2.0, [(9, 11), (10, 12), (11, 12), (9, 12)]), ((9, 11), 2.0, [(10, 11), (9, 12), (9, 13), (10, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((10, 12), 2.5, [(11, 12), (10, 11), (9, 12), (9, 13), (9, 11)]), ((9, 12), 3.0, [(9, 13), (9, 11), (10, 12), (10, 11), (9, 14), (11, 12)])]
There are 2 groups
[(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]
[(8, 6), (8, 7), (9, 7)]
frontline_radius = 0
( 5, 7) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = -2
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(13,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
( 5,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -26
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
(11,13) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -15
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 2) (friendly)  vulnerability =  8 attack_ratio = -2 health_diffs = -78
(11,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 33
( 7, 6) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -37
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  2
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -3
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 13
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 2,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(11,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -9
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -8
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -8
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  2
(11, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  27                              
 2                      29  30  31  32  32  29  29  26  26                      
 3              28  29  30  31  32  33  33  29  29  26  29  27  27              
 4              29  30  30  32  32  34  34  31  28  30  29  29  29              
 5          29  30  30  30  31  32  33  34  34  29  30  31  31  30  29          
 6          29  29  30  32  30  33  34  34  32  32  30  30  32  31  30          
 7      29  28  28  31  32  32  32  35  37  32  30  32  30  31  32  31  30      
 8      28  28  29  30  32  34  36  34  34  33  32  30  33  32  32  32  31      
 9      29  26  29  32  35  36  33  33  37  35  31  32  33  34  34  33  32      
10      29  29  26  31  35  34  31  36  33  32  35  33  31  33  33  32  31      
11      28  27  30  31  31  32  33  32  35  35  32  32  33  31  31  31  30      
12          28  29  30  30  30  32  32  36  35  32  31  29  30  31  30          
13          29  28  29  32  29  28  33  35  33  33  29  30  29  29  29          
14              29  29  28  29  32  32  34  33  31  30  29  29  29              
15              28  29  29  30  30  32  34  33  31  31  29  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(11, 2)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 6) - {'options': [(2, 5)], 'scores': [0]}
determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]


=> INITIAL
BOT Positions:
8 participants
     8   9  10  11  12  
10       -             
11       X   X         
12       X   X   X     
13   -   X   -   -     
14       X   -         
15       X   -         
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
8 participants
     8   9  10  11  12  
10       -             
11       X   X         
12       X   X   X     
13   -   X   -   -     
14       X   -         
15       X   -         
16                     

determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]
outcome = 
num_optional - 1
optional - [(10, 14), (8, 13), (10, 13), (10, 15), (9, 10), (11, 13)]
occupied - [(9, 12), (9, 13), (10, 12), (9, 11), (10, 11), (9, 15), (9, 14)]
available_bots - [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]
levels - {33: [(10, 14), (8, 13), (10, 13), (10, 15), (9, 10), (11, 13)], 34: [(9, 15), (9, 14)], 35: [(9, 13), (10, 12), (9, 11), (10, 11)], 36: [(9, 12)]}
max_score - 277

-------------------------------------
TARGET system:
8 participants
()
     8   9  10  11  12  
10       1             
11       X   X         
12       X   X         
13   1   X   1   1     
14       X   1         
15       X   1         
16                     


The initial system score was 276
The maximum obtainable for the system is 277
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(11, 12)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 7
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 13), (9, 15), (10, 12), (9, 11), (9, 14)]
current_bots_outside = [(11, 12)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
8 participants
     8   9  10  11  12  
10       -             
11       0   0         
12       0   0   X     
13   -   0   -   -     
14       0   -         
15       0   -         
16                     

Cell Scores:
     8   9  10  11  12  
10      35             
11      31  35         
12      32  33  32     
13  33  33  31  33     
14      34  33         
15      34  33         
16                     

The system now has a total of 23040 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 23040 options
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [1, 0, -1, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [0, 0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 11), (10, 12), (10, 13)], 'scores': [1, 0, 0, -2]}
(9, 11) - {'options': [(9, 12), (9, 11), (10, 11), (9, 10)], 'scores': [1, 0, 0, -2]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [1, 0, 0, -1]}
(11, 12) - {'options': [(10, 12), (11, 13)], 'scores': [3, 1]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11), (10, 12)], 'scores': [0, -1, -1, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 23040 combinations
Ran full set of options and didnt find top result
Score is 1
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(11, 12) - {'options': [(11, 13)], 'scores': [1]}
(9, 12) - {'options': [(10, 12)], 'scores': [-1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(5, 6)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 6) - {'options': [(8, 7)], 'scores': [1]}
(8, 7) - {'options': [(9, 7)], 'scores': [2]}
(9, 7) - {'options': [(9, 8)], 'scores': [-3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(14, 9)], 'scores': [1]}
settle_sys returned with {(12, 2): {'options': [(11, 2)], 'scores': [3]}, (2, 6): {'options': [(2, 5)], 'scores': [0]}, (10, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 7): {'options': [(5, 6)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 12)], 'scores': [1]}, (8, 7): {'options': [(9, 7)], 'scores': [2]}, (13, 9): {'options': [(14, 9)], 'scores': [1]}, (8, 6): {'options': [(8, 7)], 'scores': [1]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 12): {'options': [(11, 13)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-1]}, (9, 7): {'options': [(9, 8)], 'scores': [-3]}}
-------------------------- running turn 59 ---------------------------
[((9, 8), 1.0, [(9, 7)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((8, 7), 1.0, [(9, 7), (9, 8)]), ((11, 12), 1.0, [(10, 12)]), ((9, 7), 1.0, [(9, 8), (8, 7)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((10, 11), 2.0, [(9, 11), (10, 12), (11, 12), (9, 12)]), ((9, 11), 2.0, [(10, 11), (9, 12), (9, 13), (10, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((10, 12), 2.5, [(11, 12), (10, 11), (9, 12), (9, 13), (9, 11)]), ((9, 12), 3.0, [(9, 13), (9, 11), (10, 12), (10, 11), (9, 14), (11, 12)])]
There are 2 groups
[(9, 8), (8, 7), (9, 7)]
[(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]
frontline_radius = 0
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 6, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -16
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 28
(10, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -10
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 10
(13, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 2, 5) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 13
(12, 2) (friendly)  vulnerability =  8 attack_ratio = -2 health_diffs = -87
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -19
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 2, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 47
(12,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -15
( 5, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  2
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 15
( 9, 8) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -9
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
(13,11) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -39
( 9, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -48
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 7) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -8
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -41
( 6,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -59
(11,13) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -42
( 7, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = 39
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  27                              
 2                      29  30  31  32  32  29  29  26  26                      
 3              28  29  30  31  32  33  32  30  29  26  29  27  27              
 4              29  30  30  31  33  33  33  31  30  30  29  29  29              
 5          29  29  30  29  30  32  33  35  31  31  33  31  31  30  29          
 6          28  28  28  31  32  31  33  33  35  33  32  32  32  31  30          
 7      28  26  31  29  30  31  33  36  35  34  33  32  31  32  32  31  30      
 8      28  29  26  30  32  33  37  34  35  32  30  33  33  31  32  32  31      
 9      29  29  26  33  34  35  33  33  36  34  32  30  31  34  34  33  32      
10      29  27  31  30  33  34  31  36  33  31  34  31  31  33  33  32  31      
11      30  29  30  31  33  31  33  32  35  35  31  31  34  31  31  31  30      
12          30  30  32  31  29  31  32  36  35  31  30  30  31  31  30          
13          29  30  30  30  31  27  32  35  32  32  31  28  30  30  29          
14              29  30  29  28  31  32  34  33  30  29  30  30  29              
15              28  29  30  29  30  32  34  33  31  30  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 2) - {'options': [(11, 2)], 'scores': [3]}
determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (11, 12), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     8   9  10  11  12  
10       -             
11       X   X         
12       X   X         
13       X             
14       X   -         
15       X   -         
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     8   9  10  11  12  
10       -             
11       X   X         
12       X   X         
13       X             
14       X   -         
15       X   -         
16                     

System can be split into 2 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [1, 0, -1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [1, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(10, 12) - {'options': [(9, 12), (10, 11)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 12), (9, 11), (10, 11), (9, 10)], 'scores': [1, 0, 0, -2]}
(10, 11) - {'options': [(9, 11), (10, 11)], 'scores': [0, 0]}
(9, 12) - {'options': [(9, 12), (9, 13), (9, 11)], 'scores': [0, -1, -1]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(11, 12) - {'options': [(10, 12)], 'scores': [4]}
(9, 12) - {'options': [(9, 11)], 'scores': [-1]}
Solving system # 1
(11, 12) - {'options': [(10, 12)], 'scores': [4]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [1]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 14)], 'scores': [0]}
(11, 12): {'options': [(10, 12)], 'scores': [4]}
(9, 12): {'options': [(9, 11)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 275
The maximum obtainable for the system is 277
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(11, 12) - {'options': [(10, 12)], 'scores': [4]}
(9, 12) - {'options': [(9, 11)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 12) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 5
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(11, 12) - {'options': [(10, 12)], 'scores': [4]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 11)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [1]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 14)], 'scores': [0]}
(11, 12): {'options': [(10, 12)], 'scores': [4]}
(9, 12): {'options': [(9, 11)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 275
The maximum obtainable for the system is 277
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     8   9  10  11  12  
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(11, 12) - {'options': [(10, 12)], 'scores': [4]}
(9, 12) - {'options': [(9, 11)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 8) - {'options': [(9, 9)], 'scores': [1]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 7) - {'options': [(9, 8)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 7) - {'options': [(5, 8)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 9) - {'options': [(14, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 5) - {'options': [(2, 5)], 'scores': [0]}
settle_sys returned with {(12, 2): {'options': [(11, 2)], 'scores': [3]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (9, 8): {'options': [(9, 9)], 'scores': [1]}, (5, 7): {'options': [(5, 8)], 'scores': [2]}, (10, 12): {'options': [(9, 12)], 'scores': [1]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [-2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(14, 9)], 'scores': [3]}, (2, 5): {'options': [(2, 5)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (11, 12): {'options': [(10, 12)], 'scores': [4]}, (9, 12): {'options': [(9, 11)], 'scores': [-1]}, (9, 7): {'options': [(9, 8)], 'scores': [0]}}
-------------------------- running turn 60 ---------------------------
[((8, 7), 0.5, [(9, 8)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((9, 8), 1.5, [(9, 9), (9, 10), (8, 7)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)]), ((10, 11), 2.0, [(9, 11), (9, 10), (11, 12), (9, 12)]), ((9, 9), 2.0, [(9, 10), (9, 8)]), ((9, 10), 2.0, [(9, 11), (9, 9)]), ((9, 11), 2.5, [(9, 10), (10, 11), (9, 12), (9, 13), (9, 9)]), ((9, 12), 3.0, [(9, 13), (9, 11), (9, 10), (10, 11), (9, 14), (11, 12)])]
There are 1 groups
[(9, 13), (10, 11), (9, 8), (9, 9), (9, 10), (9, 11), (8, 7), (9, 14), (11, 12), (9, 12)]
frontline_radius = 0
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 6, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(11, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(10, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -29
( 8, 9) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -107
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 3, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 2, 5) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 13
(14, 9) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -9
( 5, 8) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = -13
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -19
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
( 4, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 13
( 8,10) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -106
( 5, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -19
(10, 9) (enemy)     vulnerability =  1 attack_ratio = -2 health_diffs = -66
(13,11) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 4,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -53
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 8, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -39
(11,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -48
( 2, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 39
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10  10   9   7                              
 2                      10  10  31  32  32  29  29   6   7                      
 3               0  10  30  31  32  33  32  30  29  26  29   8  -1              
 4              10  30  30  31  33  33  33  31  30  30  29  29  10              
 5           9  29  30  29  30  32  33  35  31  31  33  31  31  30  10          
 6           7  27  27  31  32  31  33  33  35  32  33  32  32  31  10          
 7       7  29  28  27  29  31  33  35  36  33  32  33  32  32  32  31  10      
 8       9  27  26  31  31  32  36  33  35  32  32  31  34  32  32  32  10      
 9       9  30  31  29  33  35  32  35  34  34  32  31  32  34  34  33  10      
10      10  30  29  32  33  33  30  35  34  32  33  32  31  33  33  32  10      
11      10  31  30  31  32  32  32  31  36  35  31  31  34  31  31  31  10      
12          10  31  31  32  30  30  31  36  35  31  30  30  31  31  10          
13          10  30  31  31  29  29  31  34  32  32  31  28  30  30  10          
14              10  30  30  29  30  31  34  33  30  29  30  30  10              
15               0  10  30  30  29  32  34  33  31  30  30  10   0              
16                      10  10  30  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (9, 10), (9, 11), (9, 14), (11, 12), (9, 12)]
Precheck for obvious moves
Forced (9, 10) to move into (8, 10) as only bot for this target
simplification made, will repeat
Precheck for obvious moves
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [2, 0, 0]}, (10, 11): {'options': [(9, 11), (10, 11)], 'scores': [1, 0]}, (9, 15): {'options': [(9, 14), (9, 15)], 'scores': [0, 0]}, (9, 10): {'options': [(8, 10)], 'scores': [1]}, (9, 11): {'options': [(9, 11), (9, 12), (10, 11), (9, 10)], 'scores': [0, 0, -1, -2]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}, (11, 12): {'options': [(10, 12)], 'scores': [4]}, (9, 12): {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}}
targets = [(10, 12)]
candidates = [(9, 13)]
squares = [(10, 11), (9, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 2073, in act
  File "<string>", line 1867, in settle_sys
  File "<string>", line 1366, in simplify_sys
  File "<string>", line 1626, in simplify_sys
  File "<string>", line 1072, in try_movement_sets
  File "<string>", line 976, in make_moves
  File "<string>", line 259, in grant_move
  File "<string>", line 233, in set_option
ValueError: (10, 12) is not in list
-------------------------- running turn 61 ---------------------------
[((14, 15), 0.25, [(12, 16)]), ((12, 16), 0.3333333333333333, [(14, 15)]), ((16, 12), 0.4, [(17, 8), (14, 15)]), ((9, 8), 0.5, [(8, 7)]), ((8, 7), 0.5, [(9, 8)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((10, 11), 1.5, [(9, 11), (10, 12), (9, 12)]), ((10, 12), 2.0, [(10, 11), (9, 12), (9, 13), (9, 11)]), ((9, 11), 2.0, [(10, 11), (9, 12), (9, 13), (10, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (10, 11), (9, 14)])]
There are 3 groups
[(16, 12), (14, 15), (12, 16)]
[(9, 8), (8, 7)]
[(9, 13), (10, 11), (9, 15), (10, 12), (9, 11), (9, 14), (9, 12)]
frontline_radius = 0
(17, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
(10, 1) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -45
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 6, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
(12,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 2, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
(11,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -19
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 3, 3) (friendly)  vulnerability =  9 attack_ratio = -1 health_diffs = -50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  3
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -45
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
( 3, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -5
(11,13) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
(12,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -65
( 9, 6) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 17
(16,12) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 39
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 10
( 4, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
( 3, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  30  29  29  27                              
 2                      26  30  29  30  30  30  27  29  28                      
 3              24  28  27  28  31  33  33  29  29  29  28  28  28              
 4              26  26  28  31  32  34  33  31  32  28  30  28  28              
 5          26  24  26  30  31  32  33  34  32  32  31  30  30  30  29          
 6          24  26  27  31  30  32  32  35  32  31  34  31  32  31  30          
 7      28  28  25  26  31  32  31  33  34  34  32  31  32  32  32  31  30      
 8      29  27  28  30  29  32  34  34  34  32  32  30  33  32  32  32  31      
 9      32  30  29  32  32  33  34  33  36  35  30  32  32  33  34  33  32      
10      31  32  31  31  34  33  29  36  35  33  33  30  31  34  33  32  31      
11      30  31  32  32  33  32  31  32  36  34  31  32  32  32  32  31  30      
12          30  31  32  32  30  30  31  36  35  30  29  31  32  31  30          
13          29  30  31  31  29  29  31  34  32  32  30  29  30  30  29          
14              29  30  30  29  30  31  34  33  30  29  30  30  29              
15              28  29  30  30  29  32  34  33  31  30  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (10, 12), (9, 11), (10, 11), (9, 12)]
Precheck for obvious moves
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [2, 0, 0]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}, (9, 15): {'options': [(9, 14), (9, 15)], 'scores': [0, 0]}, (10, 12): {'options': [(9, 12), (10, 12), (10, 11)], 'scores': [1, 0, -1]}, (9, 11): {'options': [(9, 11), (9, 12), (9, 10)], 'scores': [0, 0, -1]}, (10, 11): {'options': [(9, 11), (10, 12), (10, 11)], 'scores': [2, 1, 0]}, (9, 12): {'options': [(9, 11), (9, 12), (10, 12), (9, 13)], 'scores': [0, 0, -1, -2]}}
targets = [(9, 10)]
candidates = [(9, 13), (10, 11)]
squares = [(10, 12), (9, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
try_movement_sets dimensions
1 targets
2 candidates
It took  0.007000ms for mixer to complete
It took  0.006000ms for mixer to complete
It took  0.005000ms for mix_lists to complete
Precheck FOR BAD LINKS
(9, 13) -> (9, 10) = [((9, 13), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10))]
okay
(10, 11) -> (9, 10) = [((10, 11), (9, 11)), ((9, 11), (9, 10))]
okay
bad links = []

Looking at [((9, 13), (9, 10))]
Find a path between (9, 13) and (9, 10)
Using coords [(9, 11), (10, 12), (9, 12)]
pathed as [((9, 13), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10))]
used coords = [(9, 12), (9, 11), (9, 10), (9, 13)]
Finished generating path sets
[[((9, 13), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10))]]

(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [0, 0]}
(10, 12) - {'options': [(10, 12), (10, 11)], 'scores': [0, -1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(10, 11) - {'options': [(10, 12), (10, 11)], 'scores': [1, 0]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
It took  0.378000ms for try_movement_sets to complete
System has been reduced


=> INITIAL
BOT Positions:
2 participants
     8   9  10  11  
10                 
11           X     
12           X     
13                 
14                 
15                 
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
2 participants
     8   9  10  11  
10                 
11           X     
12           X     
13                 
14                 
15                 
16                 

System can be split into 6 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(10, 11) - {'options': [(10, 12), (10, 11)], 'scores': [1, 0]}
(10, 12) - {'options': [(10, 12), (10, 11)], 'scores': [0, -1]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [0]}
(10, 12): {'options': [(10, 12)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-1]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 


The initial system score was 243
The maximum obtainable for the system is 244
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 

Cell Scores:
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [0]}
(10, 12): {'options': [(10, 12)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-1]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 


The initial system score was 243
The maximum obtainable for the system is 244
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 

Cell Scores:
     8   9  10  11  
10                 
11                 
12                 
13                 
14                 
15                 
16                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 12) - {'options': [(10, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(16, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 3) - {'options': [(4, 3)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 8) - {'options': [(9, 9)], 'scores': [2]}
(8, 7) - {'options': [(8, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 15) - {'options': [(13, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 16) - {'options': [(11, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 12) - {'options': [(15, 12)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [2]}, (17, 8): {'options': [(16, 8)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (3, 3): {'options': [(4, 3)], 'scores': [4]}, (9, 15): {'options': [(9, 14)], 'scores': [0]}, (9, 8): {'options': [(9, 9)], 'scores': [2]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [-1]}, (14, 15): {'options': [(13, 15)], 'scores': [1]}, (8, 7): {'options': [(8, 8)], 'scores': [1]}, (12, 16): {'options': [(11, 16)], 'scores': [1]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}, (16, 12): {'options': [(15, 12)], 'scores': [1]}}
-------------------------- running turn 62 ---------------------------
[((13, 15), 0.25, [(11, 16)]), ((11, 16), 0.3333333333333333, [(13, 15)]), ((9, 9), 1.0, [(9, 10)]), ((9, 14), 1.0, [(9, 13), (9, 12)]), ((10, 11), 2.0, [(9, 11), (10, 12), (9, 10), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.0, [(10, 11), (9, 12), (9, 13), (9, 11)]), ((9, 10), 2.0, [(9, 11), (9, 9)]), ((9, 11), 3.0, [(9, 10), (10, 11), (9, 12), (9, 13), (10, 12), (9, 9)]), ((9, 12), 3.0, [(9, 13), (9, 11), (10, 12), (9, 10), (10, 11), (9, 14)])]
There are 2 groups
[(11, 16), (13, 15)]
[(9, 13), (10, 11), (9, 9), (10, 12), (9, 10), (9, 11), (9, 14), (9, 12)]
frontline_radius = 0
(11,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(16, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 9, 1) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 4) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 8,10) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -125
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -71
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(10, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 5, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(15,12) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -19
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 4, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -8
( 6, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 2, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 3, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -45
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -9
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 5, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -9
( 4, 3) (friendly)  vulnerability = 11 attack_ratio = -1 health_diffs = -50
( 7, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 42
(14, 8) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 41
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  32  28  29                              
 2                      26  27  30  31  30  28  30  30  29                      
 3              25  24  27  29  29  31  30  31  29  30  29  27  27              
 4              25  27  26  27  31  33  31  32  30  30  29  30  27              
 5          27  27  25  27  29  31  33  33  30  33  33  31  29  29  29          
 6          26  25  28  27  31  31  31  35  31  32  34  33  30  31  30          
 7      28  27  29  28  28  30  31  32  34  34  32  33  33  31  31  31  30      
 8      29  31  28  28  32  30  34  33  33  32  34  32  32  34  31  31  31      
 9      31  31  31  32  34  32  31  35  35  35  31  31  34  33  33  33  32      
10      31  31  33  33  32  33  30  35  34  32  32  31  31  32  33  32  31      
11      30  31  32  33  32  32  32  31  36  34  29  30  30  32  32  31  30      
12          30  31  32  32  30  30  31  36  34  29  30  30  31  31  30          
13          29  30  31  31  29  29  31  34  33  33  28  30  31  30  29          
14              29  30  30  29  30  31  34  33  31  30  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 16) - {'options': [(10, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 12) - {'options': [(15, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 8) - {'options': [(16, 9)], 'scores': [2]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 11) - {'options': [(9, 11)], 'scores': [2]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 11): {'options': [(9, 11)], 'scores': [2]}
(10, 12): {'options': [(10, 11)], 'scores': [0]}
(9, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [1]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  
 8                 
 9                 
10                 
11                 
12                 
13                 
14                 
15                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  
 8                 
 9                 
10                 
11                 
12                 
13                 
14                 
15                 

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(10, 11) - {'options': [(9, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 10) - {'options': [(8, 10)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 6
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 11): {'options': [(9, 11)], 'scores': [2]}
(10, 12): {'options': [(10, 11)], 'scores': [0]}
(9, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [1]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
 8                 
 9                 
10                 
11                 
12                 
13                 
14                 
15                 


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
 8                 
 9                 
10                 
11                 
12                 
13                 
14                 
15                 

Cell Scores:
     8   9  10  11  
 8                 
 9                 
10                 
11                 
12                 
13                 
14                 
15                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 11) - {'options': [(9, 11)], 'scores': [2]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 15) - {'options': [(13, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 3) - {'options': [(4, 4)], 'scores': [3]}
settle_sys returned with {(11, 16): {'options': [(10, 16)], 'scores': [1]}, (15, 12): {'options': [(15, 11)], 'scores': [1]}, (16, 8): {'options': [(16, 9)], 'scores': [2]}, (10, 11): {'options': [(9, 11)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (13, 15): {'options': [(13, 14)], 'scores': [1]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 10): {'options': [(8, 10)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [-2]}, (4, 3): {'options': [(4, 4)], 'scores': [3]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 63 ---------------------------
[((16, 9), 0.3333333333333333, [(15, 11)]), ((15, 11), 0.3333333333333333, [(16, 9)]), ((10, 16), 0.75, [(9, 14), (9, 13), (10, 12)]), ((9, 14), 1.0, [(9, 13), (9, 12)]), ((9, 10), 2.0, [(9, 11), (8, 9), (10, 11), (9, 12)]), ((10, 11), 2.0, [(9, 11), (10, 12), (9, 10), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (10, 12)]), ((10, 12), 2.0, [(10, 11), (9, 12), (9, 13), (9, 11)]), ((9, 11), 2.5, [(9, 10), (10, 11), (9, 12), (9, 13), (10, 12)]), ((9, 12), 3.0, [(9, 13), (9, 11), (10, 12), (9, 10), (10, 11), (9, 14)])]
There are 2 groups
[(16, 9), (15, 11)]
[(9, 13), (9, 14), (10, 16), (10, 12), (9, 10), (9, 11), (10, 11), (9, 12)]
frontline_radius = 0
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(12,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 8, 9) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -16
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -19
(14, 5) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 4, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
(10,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -8
(15,11) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -35
( 5, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 22
(16, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -5
(11,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
( 6, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 4, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  5
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs =  2
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs =  9
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -31
( 4, 3) (friendly)  vulnerability = 10 attack_ratio = -1 health_diffs = -67
( 9, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(14, 8) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 41
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  29  30  30                              
 2                      27  28  30  29  31  29  30  30  29                      
 3              26  24  28  26  29  30  32  29  31  31  30  28  28              
 4              25  26  22  28  30  32  31  31  32  32  30  28  28              
 5          26  25  26  23  29  30  33  32  35  32  31  30  31  28  28          
 6          26  28  25  30  27  31  33  34  32  34  34  32  29  30  30          
 7      28  30  28  29  30  28  32  31  35  31  33  34  33  30  31  31  30      
 8      30  30  31  33  31  31  27  33  32  33  30  31  32  34  31  31  31      
 9      32  32  34  34  32  32  30  32  33  33  31  32  32  32  33  33  32      
10      31  32  33  34  33  29  31  33  36  32  32  28  32  33  33  32  31      
11      30  31  32  33  33  30  30  33  37  34  29  31  31  32  32  31  30      
12          30  31  32  32  30  29  32  36  34  29  31  30  31  31  30          
13          29  30  31  31  29  29  31  34  33  33  28  30  31  30  29          
14              29  30  30  29  30  31  34  33  31  30  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (10, 11), (10, 12), (9, 10), (9, 11), (9, 14), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     8   9  10  11  
 9                 
10       X         
11       X   X     
12       X   X     
13       X         
14       X         
15       -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     8   9  10  11  
 9                 
10       X         
11       X   X     
12       X   X     
13       X         
14       X         
15       -         

determine_ideal_outcome called with [(9, 13), (10, 11), (10, 12), (9, 10), (9, 11), (9, 14), (9, 12)]
outcome = 
num_optional - 4
optional - [(9, 13), (10, 11), (9, 15), (10, 12), (9, 14)]
occupied - [(9, 11), (9, 10), (9, 12)]
available_bots - [(9, 13), (10, 11), (10, 12), (9, 10), (9, 11), (9, 14), (9, 12)]
levels - {34: [(9, 13), (10, 11), (9, 15), (10, 12), (9, 14)], 36: [(9, 10), (9, 12)], 37: [(9, 11)]}
max_score - 245

-------------------------------------
TARGET system:
7 participants
()
     8   9  10  11  
 9                 
10       X         
11       X   4     
12       X   4     
13       4         
14       4         
15       4         


The initial system score was 245
The maximum obtainable for the system is 245
The score gain were looking for is 0
bots_in_optional = [(9, 13), (10, 11), (10, 12), (9, 14)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 3
current_bots_in_optional = [(9, 13), (10, 11), (10, 12), (9, 14)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 13), (10, 11), (10, 12)]
current_bots_in_occupied = [(9, 10), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     8   9  10  11  
 9                 
10       0         
11       0   ?     
12       0   ?     
13       ?         
14       ?         
15       -         

Cell Scores:
     8   9  10  11  
 9                 
10      33         
11      31  32     
12      32  28     
13      32         
14      32         
15      33         

The system now has a total of 2592 options
Optional squares exist

System result = ...
The system has a total of 2592 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [2, 0, 0]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [3, 0, 0]}
(10, 12) - {'options': [(9, 12), (10, 11), (10, 12)], 'scores': [2, 0, 0]}
(9, 10) - {'options': [(9, 11), (9, 10)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 11), (9, 10), (9, 12), (10, 11)], 'scores': [0, -1, -1, -3]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [1, 0, -2, -2]}


The system did not get simpler in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [2, 0, 0]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [3, 0, 0]}
(10, 12): {'options': [(9, 12), (10, 11), (10, 12)], 'scores': [2, 0, 0]}
(9, 10): {'options': [(9, 11), (9, 10)], 'scores': [1, 0]}
(9, 11): {'options': [(9, 11), (9, 10), (9, 12), (10, 11)], 'scores': [0, -1, -1, -3]}
(9, 14): {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(8, 9): {'options': [(8, 8)], 'scores': [1]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [1, 0, -2, -2]}
determine_ideal_outcome called with [(9, 13), (10, 11), (10, 12), (9, 10), (9, 11), (9, 14), (9, 12)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  
 8                     
 9                     
10           X         
11           X   X     
12           X   X     
13           X         
14           X         
15           -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  
 8                     
 9                     
10           X         
11           X   X     
12           X   X     
13           X         
14           X         
15           -         

System can be split into 2 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [2, 0, 0]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [3, 0, 0]}
(10, 12) - {'options': [(9, 12), (10, 11), (10, 12)], 'scores': [2, 0, 0]}
(9, 10) - {'options': [(9, 11), (9, 10)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 11), (9, 10), (9, 12), (10, 11)], 'scores': [0, -1, -1, -3]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [1, 0, -2, -2]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [3]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-2]}
Solving system # 1
(8, 9) - {'options': [(8, 8)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(10, 11): {'options': [(9, 11)], 'scores': [3]}
(10, 12): {'options': [(10, 11)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 12)], 'scores': [-1]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 9): {'options': [(8, 8)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [3]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-2]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(10, 11) - {'options': [(9, 11)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 2
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(8, 9) - {'options': [(8, 8)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 13)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(10, 11): {'options': [(9, 11)], 'scores': [3]}
(10, 12): {'options': [(10, 11)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 12)], 'scores': [-1]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 9): {'options': [(8, 8)], 'scores': [1]}
(9, 12): {'options': [(9, 13)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [3]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [1]}
(9, 12) - {'options': [(9, 13)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(16, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 16) - {'options': [(10, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 11) - {'options': [(15, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 3) - {'options': [(5, 3)], 'scores': [4]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (10, 11): {'options': [(9, 11)], 'scores': [3]}, (16, 9): {'options': [(16, 9)], 'scores': [0]}, (10, 16): {'options': [(10, 15)], 'scores': [1]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 11): {'options': [(15, 10)], 'scores': [1]}, (9, 11): {'options': [(9, 12)], 'scores': [-1]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (4, 3): {'options': [(5, 3)], 'scores': [4]}, (9, 14): {'options': [(9, 15)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [1]}, (9, 12): {'options': [(9, 13)], 'scores': [-2]}}
-------------------------- running turn 64 ---------------------------
[((16, 9), 0.5, [(15, 10)]), ((15, 10), 0.5, [(16, 9)]), ((10, 15), 1.0, [(9, 15), (9, 14), (9, 13)]), ((9, 15), 1.3333333333333333, [(10, 15), (9, 14), (9, 13), (9, 12)]), ((9, 10), 1.5, [(9, 11), (10, 11), (9, 12)]), ((10, 11), 1.5, [(9, 11), (9, 10), (9, 12)]), ((9, 11), 2.0, [(9, 10), (10, 11), (9, 12), (9, 13)]), ((9, 14), 2.0, [(9, 13), (9, 15), (10, 15), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)]), ((9, 12), 2.5, [(9, 13), (9, 11), (9, 10), (10, 11), (9, 14)])]
There are 2 groups
[(16, 9), (15, 10)]
[(9, 13), (9, 10), (9, 15), (10, 15), (9, 11), (9, 14), (10, 11), (9, 12)]
frontline_radius = 0
( 4, 4) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 40
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 17
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
(12,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 5, 4) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 45
(10,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 8) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -9
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -17
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 5, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(16, 9) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  9
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 5, 3) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 40
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -5
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  5
( 7, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
( 8, 7) (enemy)     vulnerability =  2 attack_ratio =  2 health_diffs = -31
( 3, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 4, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -67
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  2
( 4, 3) (friendly)  vulnerability =  9 attack_ratio = -2 health_diffs = -135
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -34
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  31  31  30                              
 2                      26  28  28  30  30  31  31  30  29                      
 3              25  24  26  27  27  31  31  32  32  31  30  29  28              
 4              24  24  25  26  29  30  34  33  33  32  31  29  29              
 5          27  26  22  25  27  33  31  34  32  33  33  31  29  29  29          
 6          27  25  28  27  29  30  32  32  34  31  32  31  32  28  29          
 7      29  29  30  28  29  33  28  33  31  31  31  33  33  30  29  30  30      
 8      31  31  31  32  33  30  31  31  34  29  33  33  33  31  33  30  30      
 9      32  33  33  35  34  30  32  32  35  35  31  31  35  34  32  32  32      
10      31  32  33  33  32  32  29  33  35  33  32  31  31  33  32  32  31      
11      30  31  32  33  32  29  29  33  37  34  29  30  30  32  32  31  30      
12          30  31  32  32  29  29  32  36  34  29  30  30  31  31  30          
13          29  30  31  31  29  29  31  34  33  33  28  30  31  30  29          
14              29  30  30  29  30  31  34  33  31  30  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (10, 15), (9, 10), (9, 11), (9, 14), (9, 12)]
system has unoccupied occupied squares and the occupied squares are correct
ASSUMING WE USE current_bots_outside TO FILL THE unoccupied Occupied
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 11): {'options': [(9, 11), (10, 11), (10, 12)], 'scores': [3, 0, 0]}, (9, 15): {'options': [(9, 14)], 'scores': [0]}, (10, 15): {'options': [(9, 15)], 'scores': [1]}, (9, 10): {'options': [(9, 11), (9, 10), (9, 9)], 'scores': [2, 0, 0]}, (9, 11): {'options': [(9, 11), (9, 10), (10, 11)], 'scores': [0, -2, -3]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(9, 11), (10, 12)], 'scores': [1, -2]}}
targets = [(9, 9)]
candidates = [(10, 15)]
squares = [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (10, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 11) - {'options': [(10, 11), (10, 12)], 'scores': [0, 0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 15) - {'options': [(9, 15)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
System has been reduced


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 15) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 5
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [0]}
(10, 15): {'options': [(9, 15)], 'scores': [1]}
(9, 10): {'options': [(9, 9)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


The initial system score was 277
The maximum obtainable for the system is 279
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

Cell Scores:
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 15) - {'options': [(9, 15)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(10, 15) - {'options': [(9, 15)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 5
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 15): {'options': [(9, 14)], 'scores': [0]}
(10, 15): {'options': [(9, 15)], 'scores': [1]}
(9, 10): {'options': [(9, 9)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-2]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 


The initial system score was 277
The maximum obtainable for the system is 279
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

Cell Scores:
     8   9  10  11  
 9                 
10                 
11                 
12                 
13                 
14                 
15                 
16                 

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 15) - {'options': [(9, 15)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(16, 9)], 'scores': [0]}
(15, 10) - {'options': [(14, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 8) - {'options': [(9, 8)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 3) - {'options': [(5, 3)], 'scores': [2]}
settle_sys returned with {(10, 15): {'options': [(9, 15)], 'scores': [1]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [0]}, (16, 9): {'options': [(16, 9)], 'scores': [0]}, (15, 10): {'options': [(14, 10)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [0]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [3]}, (4, 3): {'options': [(5, 3)], 'scores': [2]}, (9, 11): {'options': [(9, 10)], 'scores': [-2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}}
-------------------------- running turn 65 ---------------------------
[((14, 10), 0.3333333333333333, [(16, 9)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((9, 9), 1.0, [(9, 10)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((10, 11), 1.5, [(9, 11), (9, 10), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12), (9, 11), (9, 15)]), ((9, 10), 2.0, [(9, 11), (9, 9), (10, 11), (9, 12)]), ((9, 11), 2.5, [(9, 10), (10, 11), (9, 12), (9, 13), (9, 9)]), ((9, 12), 2.5, [(9, 13), (9, 11), (9, 10), (10, 11), (9, 14)])]
There are 2 groups
[(16, 9), (14, 10)]
[(9, 13), (10, 11), (9, 15), (9, 9), (9, 10), (9, 11), (9, 14), (9, 12)]
frontline_radius = 0
( 7, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(10,11) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -23
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -12
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -6
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -9
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 7, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -11
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -17
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 18
( 7, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 4, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 3, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(16, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  9
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -20
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -17
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 4, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -11
(12,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 5, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -69
( 8, 8) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -90
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 16
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              27  30  32  31  30                              
 2                      26  25  29  29  32  32  31  30  29                      
 3              25  24  27  24  28  30  33  33  32  31  30  29  28              
 4              23  25  23  29  27  32  34  34  33  32  31  30  29              
 5          25  25  25  24  28  29  33  33  34  34  33  32  30  30  29          
 6          27  27  24  30  27  31  30  33  32  34  34  32  30  29  30          
 7      30  30  29  30  30  28  31  30  32  30  33  33  32  32  28  29  30      
 8      31  32  32  33  31  32  27  31  33  32  29  32  32  30  32  30  30      
 9      32  33  34  34  32  32  31  33  32  32  31  32  33  32  32  32  32      
10      31  32  33  34  33  29  31  34  35  32  31  29  32  34  32  32  31      
11      30  31  32  33  33  30  30  33  37  33  28  32  32  32  32  31  30      
12          30  31  32  32  30  29  32  35  33  31  29  31  32  31  30          
13          29  30  31  31  29  29  31  34  32  32  29  31  31  30  29          
14              29  30  30  29  30  31  34  33  30  31  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 9), (8, 8), (9, 10), (9, 11), (10, 11), (9, 12)]


=> INITIAL
BOT Positions:
9 participants
     7   8   9  10  11  
 7                     
 8       X   -         
 9       -   X         
10       -   X         
11       -   X   X     
12           X   -     
13           X         
14           X   -     
15           X   -     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
9 participants
     7   8   9  10  11  
 7                     
 8       X   -         
 9       -   X         
10       -   X         
11       -   X   X     
12           X   -     
13           X         
14           X   -     
15           X   -     
16                     

determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (9, 9), (8, 8), (9, 10), (9, 11), (10, 11), (9, 12)]
outcome = 
num_optional - 2
optional - [(9, 8), (10, 12), (10, 15), (10, 14), (10, 11), (8, 9), (8, 11)]
occupied - [(9, 11), (9, 10), (9, 12), (9, 13), (9, 14), (9, 15), (8, 10)]
available_bots - [(9, 13), (9, 14), (9, 15), (9, 9), (8, 8), (9, 10), (9, 11), (10, 11), (9, 12)]
levels - {33: [(9, 8), (10, 12), (10, 15), (10, 14), (10, 11), (8, 9), (8, 11)], 34: [(9, 13), (9, 14), (9, 15), (8, 10)], 35: [(9, 10), (9, 12)], 37: [(9, 11)]}
max_score - 309

-------------------------------------
TARGET system:
9 participants
()
     7   8   9  10  11  
 7                     
 8           2         
 9       2             
10       X   X         
11       2   X   2     
12           X   2     
13           X         
14           X   2     
15           X   2     
16                     


The initial system score was 305
The maximum obtainable for the system is 309
The score gain were looking for is 4
bots_in_optional = [(10, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 9), (8, 8)]
bots_outside_system_moving_to_optional  = [(8, 8)]
bots_in_occupied = [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 7
current_bots_in_optional = [(10, 11), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11)]
current_bots_in_occupied = [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 14), (9, 15), (9, 11), (9, 12)]
current_bots_outside = [(9, 9)]
target_occupied_not_occupied = [(8, 10)]
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (9, 15), (9, 10), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
9 participants
     7   8   9  10  11  
 7                     
 8       X   -         
 9       -   X         
10       =   0         
11       -   0   ?     
12           0   -     
13           0         
14           0   -     
15           0   -     
16                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8      31  33         
 9      33  32         
10      32  32         
11      29  31  31     
12          32  29     
13          33         
14          32  34     
15          32  32     
16                     

The system now has a total of 20736 options
Optional squares exist
system has unoccupied occupied squares and the occupied squares are correct
ASSUMING WE USE current_bots_outside TO FILL THE unoccupied Occupied
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}, (9, 15): {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}, (9, 9): {'options': [(9, 10), (8, 9), (9, 8)], 'scores': [3, 1, 1]}, (8, 8): {'options': [(8, 9), (9, 8)], 'scores': [2, 2]}, (9, 10): {'options': [(9, 11), (9, 10), (8, 10)], 'scores': [2, 0, -1]}, (9, 11): {'options': [(9, 11), (9, 10), (9, 12), (8, 11)], 'scores': [0, -2, -2, -4]}, (10, 11): {'options': [(9, 11), (10, 11)], 'scores': [4, 0]}, (9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}}
targets = [(8, 10)]
candidates = [(9, 9)]
squares = [(9, 13), (9, 11), (9, 14), (9, 15), (9, 10), (8, 8), (10, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
(8, 8) - {'options': [(8, 9), (9, 8)], 'scores': [2, 2]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 11), (9, 12), (8, 11)], 'scores': [0, -2, -4]}
(10, 11) - {'options': [(9, 11), (10, 11)], 'scores': [4, 0]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}
The movements were made
BOT Positions:
7 participants
     7   8   9  10  11  
 7                     
 8       X   -         
 9       -             
10                     
11       -   X   X     
12           X   -     
13           X         
14           X   -     
15           X   -     
16                     


System result = ...
The system has a total of 1728 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
(8, 8) - {'options': [(8, 9), (9, 8)], 'scores': [2, 2]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 11), (9, 12), (8, 11)], 'scores': [0, -2, -4]}
(10, 11) - {'options': [(9, 11), (10, 11)], 'scores': [4, 0]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}


The system became simpler while in simplyfy, run again
System has been reduced


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11       -   X   X     
12           X   -     
13           X         
14           X   -     
15           X   -     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11       -   X   X     
12           X   -     
13           X         
14           X   -     
15           X   -     
16                     

System can be split into 4 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}
(10, 11) - {'options': [(9, 11), (10, 11)], 'scores': [4, 0]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(9, 11) - {'options': [(9, 11), (9, 12), (8, 11)], 'scores': [0, -2, -4]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
(8, 8) - {'options': [(8, 9)], 'scores': [2]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(9, 11)], 'scores': [4]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Solving system # 1
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 2
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 3
(8, 8) - {'options': [(8, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(10, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(9, 9): {'options': [(9, 10)], 'scores': [3]}
(8, 8): {'options': [(8, 9)], 'scores': [2]}
(9, 10): {'options': [(8, 10)], 'scores': [-1]}
(9, 11): {'options': [(9, 12)], 'scores': [-2]}
(10, 11): {'options': [(9, 11)], 'scores': [4]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 305
The maximum obtainable for the system is 309
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
(8, 8) - {'options': [(8, 9)], 'scores': [2]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(9, 11)], 'scores': [4]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

System can be split into 9 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(10, 14)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 4
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 5
(8, 8) - {'options': [(8, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 6
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 7
(10, 11) - {'options': [(9, 11)], 'scores': [4]}
This system has 1 move so it already solved!
Solving system # 8
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(10, 14)], 'scores': [-1]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(9, 9): {'options': [(9, 10)], 'scores': [3]}
(8, 8): {'options': [(8, 9)], 'scores': [2]}
(9, 10): {'options': [(8, 10)], 'scores': [-1]}
(9, 11): {'options': [(9, 12)], 'scores': [-2]}
(10, 11): {'options': [(9, 11)], 'scores': [4]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 305
The maximum obtainable for the system is 309
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(10, 14)], 'scores': [-1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 10)], 'scores': [3]}
(8, 8) - {'options': [(8, 9)], 'scores': [2]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(9, 11)], 'scores': [4]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(16, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(10, 14)], 'scores': [-1]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (16, 9): {'options': [(16, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [3]}, (9, 10): {'options': [(8, 10)], 'scores': [-1]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (8, 8): {'options': [(8, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 12)], 'scores': [-2]}, (10, 11): {'options': [(9, 11)], 'scores': [4]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 66 ---------------------------
[((13, 14), 0.3333333333333333, [(10, 14)]), ((8, 10), 1.0, [(8, 9)]), ((9, 9), 1.0, [(8, 9)]), ((9, 15), 1.3333333333333333, [(9, 14), (9, 13), (10, 14), (9, 12)]), ((9, 12), 1.5, [(9, 13), (9, 11), (9, 14)]), ((10, 14), 1.5, [(9, 14), (9, 13), (9, 15)]), ((9, 14), 2.0, [(9, 13), (10, 14), (9, 15), (9, 12)]), ((8, 9), 2.0, [(8, 10), (9, 9)]), ((9, 11), 2.0, [(9, 12), (9, 13), (9, 9), (8, 10)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 14), (9, 15)])]
There are 2 groups
[(9, 13), (9, 14), (9, 15), (13, 14), (10, 14), (9, 11), (9, 12)]
[(8, 9), (9, 13), (9, 11), (8, 10), (9, 9)]
frontline_radius = 0
( 6, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  7
( 7, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 4, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -75
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -9
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -8
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 5, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 8,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
( 6, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(16, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  9
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 22
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -26
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
( 3, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 5, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(14,10) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 40
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 11
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -49
( 7, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(13,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,14) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 20
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -40
(11,13) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -20
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  31  31  30                              
 2                      27  27  27  32  31  31  31  30  29                      
 3              27  27  25  28  26  29  33  33  32  31  30  29  28              
 4              26  25  26  21  28  29  34  34  33  32  31  30  29              
 5          27  28  23  24  24  26  29  33  35  34  33  32  31  29  29          
 6          28  27  29  25  26  25  32  32  34  34  34  33  31  28  29          
 7      30  31  30  31  29  28  30  30  34  32  32  34  32  30  30  28  29      
 8      31  32  33  32  33  32  29  31  35  30  32  32  31  30  31  29  30      
 9      32  33  34  35  33  30  32  34  33  34  31  29  35  32  30  32  32      
10      31  32  33  33  32  31  30  33  35  33  31  30  31  33  32  32  31      
11      30  31  32  33  32  29  29  33  37  33  28  33  31  32  32  31  30      
12          30  31  32  32  29  29  32  35  33  31  29  31  32  31  30          
13          29  30  31  31  29  29  31  34  32  32  29  31  31  30  29          
14              29  30  30  29  30  31  34  33  30  31  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (8, 10), (9, 9), (8, 9), (10, 14), (9, 11), (9, 12)]
Precheck for obvious moves
Forced (9, 9) to move into (9, 8) as only bot for this target
Forced (8, 10) to move into (9, 10) as only target for this bot
simplification made, will repeat
Precheck for obvious moves
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}, (9, 15): {'options': [(9, 14), (9, 15), (10, 15), (9, 16)], 'scores': [0, 0, -1, -1]}, (8, 10): {'options': [(9, 10)], 'scores': [2]}, (9, 9): {'options': [(9, 8)], 'scores': [2]}, (8, 9): {'options': [(8, 9), (9, 9)], 'scores': [0, -1]}, (10, 14): {'options': [(9, 14), (10, 15), (10, 14)], 'scores': [1, 0, 0]}, (9, 11): {'options': [(9, 11), (9, 12), (8, 11), (10, 11)], 'scores': [0, -2, -4, -4]}, (9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}}
targets = []
candidates = [(10, 14)]
squares = [(9, 13), (9, 14), (9, 15), (8, 9), (9, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
try_movement_sets dimensions
0 targets
1 candidates
It took  0.005000ms for mixer to complete
It took  0.009000ms for mix_lists to complete
Precheck FOR BAD LINKS
bad links = []

Looking at []
Finished generating path sets
[]

It took  0.013000ms for try_movement_sets to complete
System has been reduced


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11       -   X         
12           X   -     
13           X         
14           X   X     
15           X   -     
16           -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11       -   X         
12           X   -     
13           X         
14           X   X     
15           X   -     
16           -         

System can be split into 4 systems
Solving system # 0
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15), (9, 16)], 'scores': [0, 0, -1, -1]}
(10, 14) - {'options': [(9, 14), (10, 15), (10, 14)], 'scores': [1, 0, 0]}
(9, 11) - {'options': [(9, 11), (9, 12), (8, 11)], 'scores': [0, -2, -4]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [2, 0, -1, -2]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
Solving system # 1
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(8, 10): {'options': [(9, 10)], 'scores': [2]}
(9, 9): {'options': [(9, 8)], 'scores': [2]}
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 307
The maximum obtainable for the system is 311
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

System can be split into 9 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
This system has 1 move so it already solved!
Solving system # 7
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 8
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [1]}
(9, 14): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(8, 10): {'options': [(9, 10)], 'scores': [2]}
(9, 9): {'options': [(9, 8)], 'scores': [2]}
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(10, 14): {'options': [(9, 14)], 'scores': [1]}
(9, 11): {'options': [(9, 11)], 'scores': [0]}
(9, 12): {'options': [(10, 12)], 'scores': [-2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 307
The maximum obtainable for the system is 311
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [2]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 14) - {'options': [(9, 14)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(10, 12)], 'scores': [-2]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(16, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (16, 9): {'options': [(16, 9)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [2]}, (9, 9): {'options': [(9, 8)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 14): {'options': [(9, 14)], 'scores': [1]}, (9, 12): {'options': [(10, 12)], 'scores': [-2]}}
-------------------------- running turn 67 ---------------------------
[((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((10, 12), 1.0, [(9, 12)]), ((8, 9), 1.0, [(9, 9)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((9, 10), 2.0, [(9, 11), (9, 9)]), ((9, 9), 2.0, [(9, 10), (8, 9)]), ((9, 11), 2.5, [(9, 10), (9, 12), (9, 13), (10, 12), (9, 9)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 2 groups
[(9, 13), (9, 14), (9, 15), (10, 12), (9, 10), (9, 11), (9, 12)]
[(9, 10), (9, 13), (9, 9), (8, 9), (9, 11), (9, 12)]
frontline_radius = 0
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 4, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 8, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -92
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -9
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 17
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 7, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
( 4, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -30
(16, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  9
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 17
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -1
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 6, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -10
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -7
( 8, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -34
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -83
(13, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -40
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -10
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  29  30  29  32  32  31  30  29                      
 3              27  26  28  27  28  31  31  32  32  31  30  29  28              
 4              26  27  24  28  26  31  32  33  33  32  31  30  29              
 5          28  27  26  24  27  28  29  35  34  34  33  32  31  30  28          
 6          30  28  25  28  25  30  31  33  33  34  34  33  32  29  28          
 7      30  30  30  30  28  28  27  32  31  32  33  33  33  31  28  30  28      
 8      31  32  32  32  30  29  30  30  33  31  31  32  31  31  32  28  29      
 9      32  33  34  33  33  32  33  32  33  32  31  34  33  31  31  31  32      
10      31  32  33  34  33  30  29  35  35  35  32  31  30  32  32  32  31      
11      30  31  32  32  31  31  30  33  36  33  31  31  33  31  31  31  30      
12          30  31  32  31  28  29  32  35  32  33  30  30  31  31  30          
13          29  30  31  31  28  29  31  34  32  32  30  30  31  30  29          
14              29  30  30  29  30  31  34  33  30  31  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(8, 9), (9, 14), (9, 13), (9, 15), (9, 9), (10, 12), (9, 10), (9, 11), (9, 12)]
system has unoccupied occupied squares and the occupied squares are correct
ASSUMING WE USE current_bots_outside TO FILL THE unoccupied Occupied
try_movement_sets being called with parameters
system = {(8, 9): {'options': [(8, 10), (9, 9)], 'scores': [3, 1]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}, (9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}, (9, 15): {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}, (9, 9): {'options': [(9, 10), (9, 8)], 'scores': [2, 0]}, (10, 12): {'options': [(9, 12), (11, 12)], 'scores': [3, 1]}, (9, 10): {'options': [(9, 11), (9, 10), (8, 10), (10, 10)], 'scores': [1, 0, 0, 0]}, (9, 11): {'options': [(9, 11), (9, 10), (9, 12), (8, 11)], 'scores': [0, -1, -1, -3]}, (9, 12): {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}}
targets = [(8, 10), (10, 10)]
candidates = [(10, 12), (8, 9)]
squares = [(9, 13), (9, 14), (9, 15), (9, 9), (9, 10), (9, 11), (9, 12)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
try_movement_sets dimensions
2 targets
2 candidates
It took  0.014000ms for mixer to complete
It took  0.009000ms for mix_lists to complete
Precheck FOR BAD LINKS
(10, 12) -> (8, 10) = [((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (8, 10))]
okay
(8, 9) -> (8, 10) = [((8, 9), (8, 10))]
okay
(10, 12) -> (10, 10) = [((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (10, 10))]
okay
(8, 9) -> (10, 10) = [((8, 9), (9, 9)), ((9, 9), (9, 10)), ((9, 10), (10, 10))]
okay
bad links = []

Looking at [((10, 12), (8, 10)), ((8, 9), (10, 10))]
Find a path between (10, 12) and (8, 10)
Using coords [(9, 13), (9, 14), (9, 15), (9, 9), (9, 10), (9, 11), (9, 12)]
pathed as [((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (8, 10))]
used coords = [(9, 12), (9, 11), (9, 10), (8, 10), (10, 12)]
Find a path between (8, 9) and (10, 10)
Using coords [(9, 13), (9, 14), (9, 9), (9, 15)]
couldnt path (8, 9) to (10, 10)
Finished generating path sets
[[((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (8, 10))]]


Looking at [((10, 12), (10, 10)), ((8, 9), (8, 10))]
Find a path between (10, 12) and (10, 10)
Using coords [(9, 13), (9, 14), (9, 15), (9, 9), (9, 10), (9, 11), (9, 12)]
pathed as [((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (10, 10))]
used coords = [(9, 12), (9, 11), (9, 10), (10, 10), (10, 12)]
Find a path between (8, 9) and (8, 10)
Using coords [(9, 13), (9, 14), (9, 9), (9, 15)]
pathed as [((8, 9), (8, 10))]
used coords = [(8, 10), (8, 9)]
Finished generating path sets
[[((10, 12), (9, 12)), ((9, 12), (9, 11)), ((9, 11), (9, 10)), ((9, 10), (10, 10))], [((8, 9), (8, 10))]]

(8, 9) - {'options': [(8, 10), (9, 9)], 'scores': [3, 1]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 13) - {'options': [(9, 14), (9, 13)], 'scores': [0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 13) - {'options': [(9, 14), (9, 13)], 'scores': [0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
It took  1.328000ms for try_movement_sets to complete


=> INITIAL
BOT Positions:
3 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13           X         
14           X   -     
15           X   -     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
3 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13           X         
14           X   -     
15           X   -     
16                     

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14), (9, 13)], 'scores': [0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15), (10, 14)], 'scores': [0, 0, 0, -1]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15)], 'scores': [0, 0, -1]}
This subsystem has less than 10000 options, solving
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
Solving system # 1
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 3
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 4
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 5
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 10)], 'scores': [3]}
(9, 14): {'options': [(9, 14)], 'scores': [0]}
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(9, 9): {'options': [(9, 8)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [3]}
(9, 10): {'options': [(10, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-1]}
(9, 12): {'options': [(9, 11)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 305
The maximum obtainable for the system is 311
The score gain were looking for is 6
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

System can be split into 9 systems
Solving system # 0
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 5
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
This system has 1 move so it already solved!
Solving system # 6
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
This system has 1 move so it already solved!
Solving system # 7
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 8
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 10)], 'scores': [3]}
(9, 14): {'options': [(9, 14)], 'scores': [0]}
(9, 13): {'options': [(9, 13)], 'scores': [0]}
(9, 15): {'options': [(9, 15)], 'scores': [0]}
(9, 9): {'options': [(9, 8)], 'scores': [0]}
(10, 12): {'options': [(9, 12)], 'scores': [3]}
(9, 10): {'options': [(10, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [-1]}
(9, 12): {'options': [(9, 11)], 'scores': [1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     


The initial system score was 305
The maximum obtainable for the system is 311
The score gain were looking for is 6
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

Cell Scores:
     7   8   9  10  11  
 8                     
 9                     
10                     
11                     
12                     
13                     
14                     
15                     
16                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 10)], 'scores': [3]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(9, 13) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 9) - {'options': [(9, 8)], 'scores': [0]}
(10, 12) - {'options': [(9, 12)], 'scores': [3]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 10) - {'options': [(14, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 9) - {'options': [(17, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys returned with {(8, 9): {'options': [(8, 10)], 'scores': [3]}, (14, 10): {'options': [(14, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (16, 9): {'options': [(17, 9)], 'scores': [1]}, (10, 12): {'options': [(9, 12)], 'scores': [3]}, (9, 9): {'options': [(9, 8)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [0]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [-1]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}}
-------------------------- running turn 68 ---------------------------
[((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((10, 12), 1.0, [(9, 12)]), ((8, 10), 1.0, [(9, 10), (9, 11)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((9, 10), 1.5, [(9, 11), (8, 10), (9, 12)]), ((9, 13), 2.5, [(9, 14), (9, 12), (9, 11), (10, 12), (9, 15)]), ((9, 11), 2.5, [(9, 10), (9, 12), (9, 13), (10, 12), (8, 10)]), ((9, 12), 2.5, [(9, 13), (9, 11), (10, 12), (9, 10), (9, 14)])]
There are 1 groups
[(9, 13), (9, 14), (9, 15), (10, 12), (8, 10), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
( 7, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 6, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -33
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -1
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(16, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 5, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(10,12) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -38
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 22
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -3
(13,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 5, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(14,10) (friendly)  vulnerability =  4 attack_ratio = -1 health_diffs = -10
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 7, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 27
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(17, 9) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -40
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -2
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  31  32  31  30                              
 2                      28  29  28  31  33  32  31  30  29                      
 3              28  28  26  27  29  29  33  33  32  31  30  29  28              
 4              28  27  28  24  27  27  33  34  33  32  31  30  29              
 5          29  29  28  27  24  25  29  31  34  34  33  32  31  30  28          
 6          30  31  29  26  29  23  28  30  34  34  34  33  32  29  28          
 7      30  31  31  31  31  27  26  28  32  31  33  34  33  31  28  30  28      
 8      31  32  33  33  32  29  31  28  33  31  34  32  31  31  32  28  29      
 9      32  33  34  35  33  32  33  33  34  36  30  30  34  32  31  31  32      
10      31  32  33  33  33  33  29  35  36  33  32  32  28  31  32  32  31      
11      30  31  32  33  31  28  30  34  37  34  29  29  32  31  31  31  30      
12          30  31  31  30  29  28  31  35  33  32  29  30  31  31  30          
13          29  30  31  30  27  28  31  34  32  32  30  30  31  30  29          
14              29  30  30  28  30  31  34  33  30  31  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
System has been reduced
determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (10, 12), (8, 10), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
8 participants
     7   8   9  10  11  
 9           -         
10       X   X         
11       -   X   -     
12           X   X     
13           X         
14           X         
15           X         
16                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
8 participants
     7   8   9  10  11  
 9           -         
10       X   X         
11       -   X   -     
12           X   X     
13           X         
14           X         
15           X         
16                     

determine_ideal_outcome called with [(9, 13), (9, 14), (9, 15), (10, 12), (8, 10), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 4
optional - [(9, 13), (10, 11), (9, 15), (8, 11), (9, 9), (9, 14)]
occupied - [(9, 11), (9, 10), (8, 10), (9, 12)]
available_bots - [(9, 13), (9, 14), (9, 15), (10, 12), (8, 10), (9, 10), (9, 11), (9, 12)]
levels - {34: [(9, 13), (10, 11), (9, 15), (8, 11), (9, 9), (9, 14)], 35: [(8, 10), (9, 12)], 36: [(9, 10)], 37: [(9, 11)]}
max_score - 279

-------------------------------------
TARGET system:
8 participants
()
     7   8   9  10  11  
 9           4         
10       X   X         
11       4   X   4     
12           X         
13           4         
14           4         
15           4         
16                     


The initial system score was 278
The maximum obtainable for the system is 279
The score gain were looking for is 1
bots_in_optional = [(9, 13), (9, 14), (9, 15)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(10, 12)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 10), (9, 10), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 4
current_bots_in_optional = [(9, 13), (9, 14), (9, 15)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 13)]
current_bots_in_occupied = [(8, 10), (9, 10), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(8, 10), (9, 10), (9, 11), (9, 12)]
current_bots_outside = [(10, 12)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 10), (9, 10), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
8 participants
     7   8   9  10  11  
 9           -         
10       0   0         
11       -   0   -     
12           0   X     
13           ?         
14           ?         
15           ?         
16                     

Cell Scores:
     7   8   9  10  11  
 9          34         
10      31  36         
11      34  30  32     
12          30  32     
13          34         
14          32         
15          31         
16                     

The system now has a total of 6480 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 6480 options
(9, 13) - {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [0, 0]}
(10, 12) - {'options': [(9, 12), (10, 11)], 'scores': [2, 1]}
(8, 10) - {'options': [(9, 10), (8, 10), (8, 11)], 'scores': [1, 0, -1]}
(9, 10) - {'options': [(9, 11), (9, 10), (8, 10), (9, 9)], 'scores': [1, 0, -1, -2]}
(9, 11) - {'options': [(9, 11), (9, 10), (9, 12), (8, 11), (10, 11)], 'scores': [0, -1, -2, -3, -3]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [2, 0, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 6480 combinations
Ran full set of options and didnt find top result
Score is 1
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(10, 12) - {'options': [(10, 11)], 'scores': [1]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(8, 11)], 'scores': [-3]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [0]}, (17, 9): {'options': [(17, 9)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [0]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [-3]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}}
-------------------------- running turn 69 ---------------------------
[((9, 14), 1.0, [(9, 13), (9, 12)]), ((9, 13), 1.5, [(9, 14), (9, 12), (9, 11)]), ((8, 10), 1.5, [(9, 10), (8, 11), (9, 11)]), ((8, 11), 2.0, [(9, 11), (8, 10)]), ((10, 11), 2.0, [(9, 11), (9, 10), (8, 11), (9, 12)]), ((9, 10), 2.5, [(9, 11), (8, 10), (8, 11), (10, 11), (9, 12)]), ((9, 11), 3.0, [(9, 10), (8, 11), (10, 11), (9, 12), (9, 13), (8, 10)]), ((9, 12), 3.0, [(9, 13), (9, 11), (9, 10), (10, 11), (8, 11), (9, 14)])]
There are 1 groups
[(9, 13), (9, 14), (8, 11), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12)]
frontline_radius = 0
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -13
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -9
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -15
(14, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -11
( 5, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -27
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
( 9, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -33
( 5, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -3
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 9, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(11,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 27
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(16, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(17, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  1
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  29  30  29  32  32  31  30  29                      
 3              28  29  29  27  28  31  30  32  32  31  30  29  28              
 4              29  29  27  29  26  30  29  32  33  32  31  30  29              
 5          29  30  29  27  28  27  27  33  31  33  33  32  31  30  29          
 6          30  30  30  29  24  31  29  32  31  33  34  33  32  31  29          
 7      30  31  32  30  27  29  29  30  30  34  33  34  33  33  30  29  29      
 8      31  32  32  31  31  29  27  34  34  30  31  33  33  31  29  31  29      
 9      32  33  34  34  31  28  34  33  33  34  32  29  32  31  32  29  30      
10      31  32  33  33  31  31  29  34  36  32  31  31  28  30  31  30  31      
11      30  31  32  32  30  30  29  33  37  34  28  29  32  31  30  31  30      
12          30  31  32  31  27  29  32  35  33  32  29  30  31  31  30          
13          29  30  31  31  28  29  31  34  32  32  30  30  31  30  29          
14              29  30  30  29  30  31  34  33  30  31  31  30  29              
15              28  29  30  30  29  32  34  33  31  31  30  29  28              
16                      29  30  30  32  33  32  31  30  29                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (9, 14), (8, 11), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12)]


=> INITIAL
BOT Positions:
8 participants
     7   8   9  10  11  
 9                     
10       X   X         
11       X   X   X     
12           X         
13           X         
14           X         
15           -         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
8 participants
     7   8   9  10  11  
 9                     
10       X   X         
11       X   X   X     
12           X         
13           X         
14           X         
15           -         

determine_ideal_outcome called with [(9, 13), (9, 14), (8, 11), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 11), (9, 10), (9, 12), (9, 13), (9, 14), (9, 15), (8, 10), (10, 11)]
available_bots - [(9, 13), (9, 14), (8, 11), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12)]
levels - {34: [(9, 13), (9, 14), (9, 15), (8, 10), (10, 11)], 35: [(9, 12)], 36: [(9, 10)], 37: [(9, 11)]}
max_score - 278

-------------------------------------
TARGET system:
8 participants
()
     7   8   9  10  11  
 9                     
10       X   X         
11           X   X     
12           X         
13           X         
14           X         
15           X         


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 11)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 13), (9, 14), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(8, 11)]
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 8
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 13), (9, 14), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12), (8, 11)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = [(9, 15)]
target_occupied_with_bot_now_or_definite_bot_next = [(9, 13), (9, 14), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12), (8, 11)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
8 participants
     7   8   9  10  11  
 9                     
10       0   0         
11       X   0   0     
12           0         
13           0         
14           0         
15           =         

Cell Scores:
     7   8   9  10  11  
 9                     
10      30  34         
11      31  32  31     
12          29         
13          32         
14          31         
15          32         

The system now has a total of 2592 options
No optional squares exist so bots should just be packing into occupied squares
Will try packing in
try_movement_sets being called with parameters
system = {(9, 13): {'options': [(9, 12), (9, 14), (9, 13)], 'scores': [1, 0, 0]}, (9, 14): {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}, (8, 11): {'options': [(9, 11), (8, 10)], 'scores': [4, 1]}, (8, 10): {'options': [(9, 10), (8, 10)], 'scores': [2, 0]}, (9, 10): {'options': [(9, 11), (9, 10), (8, 10)], 'scores': [1, 0, -2]}, (9, 11): {'options': [(9, 11), (9, 10), (9, 12), (10, 11)], 'scores': [0, -1, -2, -3]}, (10, 11): {'options': [(9, 11), (10, 11)], 'scores': [3, 0]}, (9, 12): {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [2, 0, -1]}}
targets = [(9, 15)]
candidates = [(8, 11)]
squares = [(9, 13), (9, 14), (8, 10), (9, 10), (9, 11), (10, 11), (9, 12), (8, 11)]



TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
(8, 10) - {'options': [(9, 10), (8, 10)], 'scores': [2, 0]}
(9, 10) - {'options': [(9, 10), (8, 10)], 'scores': [0, -2]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
The movements were made
BOT Positions:
2 participants
     7   8   9  10  11  
 9                     
10       X   X         
11                     
12                     
13                     
14                     
15                     


System result = ...
The system has a total of 4 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
(8, 10) - {'options': [(9, 10), (8, 10)], 'scores': [2, 0]}
(9, 10) - {'options': [(9, 10), (8, 10)], 'scores': [0, -2]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
2 participants
     7   8   9  10  11  
 9                     
10       X   X         
11                     
12                     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
2 participants
     7   8   9  10  11  
 9                     
10       X   X         
11                     
12                     
13                     
14                     
15                     

System can be split into 7 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
This system has 1 move so it already solved!
Solving system # 3
(9, 10) - {'options': [(9, 10), (8, 10)], 'scores': [0, -2]}
(8, 10) - {'options': [(9, 10), (8, 10)], 'scores': [2, 0]}
This subsystem has less than 10000 options, solving
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
Solving system # 4
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 5
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 11): {'options': [(9, 11)], 'scores': [4]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 12)], 'scores': [-2]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system became simpler while in simplyfy, run again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

System can be split into 8 systems
Solving system # 0
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
This system has 1 move so it already solved!
Solving system # 3
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 6
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 14)], 'scores': [0]}
(9, 14): {'options': [(9, 15)], 'scores': [0]}
(8, 11): {'options': [(9, 11)], 'scores': [4]}
(8, 10): {'options': [(8, 10)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 11): {'options': [(9, 12)], 'scores': [-2]}
(10, 11): {'options': [(10, 11)], 'scores': [0]}
(9, 12): {'options': [(9, 13)], 'scores': [-1]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     


The initial system score was 277
The maximum obtainable for the system is 278
The score gain were looking for is 1
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

Cell Scores:
     7   8   9  10  11  
 9                     
10                     
11                     
12                     
13                     
14                     
15                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares
target_occupied_not_occupied had a length < 1

System result = ...
The system has a total of 1 options
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [4]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 12)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 13)], 'scores': [-1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 1 combinations
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 14)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (9, 14): {'options': [(9, 15)], 'scores': [0]}, (17, 9): {'options': [(17, 10)], 'scores': [1]}, (13, 14): {'options': [(13, 14)], 'scores': [0]}, (8, 11): {'options': [(9, 11)], 'scores': [4]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 12)], 'scores': [-2]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (9, 12): {'options': [(9, 13)], 'scores': [-1]}}
-------------------------- running turn 70 ---------------------------
[((8, 10), 0.5, [(9, 10)]), ((9, 15), 1.0, [(9, 14), (9, 13), (9, 12)]), ((10, 11), 1.0, [(9, 10), (9, 12)]), ((9, 13), 1.5, [(9, 14), (9, 12), (9, 15)]), ((9, 14), 1.5, [(9, 13), (9, 15), (9, 12)]), ((9, 10), 1.5, [(8, 10), (10, 11), (9, 12)]), ((9, 12), 2.0, [(9, 13), (9, 10), (10, 11), (9, 14)])]
There are 1 groups
[(9, 13), (9, 14), (8, 10), (9, 10), (10, 11), (9, 12)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -13
( 6, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -30
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -27
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -27
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -3
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
(12,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(11,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 27
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
( 7, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 5, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 7, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(16, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
(13, 9) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -20
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                               9  10  10  10  10                              
 2                      10   9  28  31  33  32  31  10  10                      
 3               0  10  29  28  30  29  33  32  32  31  30  10   0              
 4              10  30  30  28  30  28  32  32  32  32  31  30  10              
 5          10  30  31  30  29  26  31  30  34  32  32  32  31  30  10          
 6          10  31  30  29  31  27  30  30  31  33  34  33  32  31   9          
 7      10  31  31  31  31  28  30  27  32  29  32  33  34  33  30  29   9      
 8      10  32  33  32  30  27  29  31  31  30  31  31  32  32  29  31   8      
 9      10  33  33  32  31  31  32  32  32  33  29  32  31  31  33  29   8      
10      10  32  33  32  30  31  31  35  36  33  31  28  32  31  30  30  10      
11      10  31  32  33  31  29  30  36  38  33  29  31  30  31  31  31  10      
12          10  31  31  30  30  30  32  35  33  31  29  30  32  31  10          
13          10  30  31  30  27  29  31  34  32  32  29  31  31  30  10          
14              10  30  30  28  30  31  34  33  30  31  31  30  10              
15               0  10  30  30  29  32  34  33  31  31  30  10   0              
16                      10  10  30  32  33  32  31  10  10                      
17                              10  10  10  10  10                              
18                                                                              
determine_ideal_outcome called with [(9, 13), (10, 11), (9, 15), (8, 10), (9, 10), (9, 14), (9, 12)]
Precheck for obvious moves
Forced (8, 10) to move into (8, 11) as only bot for this target
simplification made, will repeat
Precheck for obvious moves
BOT Positions:
7 participants
     7   8   9  10  11  
 9                     
10       0   0         
11       =   =   X     
12           0         
13           ?         
14           ?         
15           ?         
16                     




TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 2073, in act
  File "<string>", line 1867, in settle_sys
  File "<string>", line 1598, in simplify_sys
  File "<string>", line 1072, in try_movement_sets
  File "<string>", line 976, in make_moves
  File "<string>", line 259, in grant_move
  File "<string>", line 233, in set_option
ValueError: (9, 11) is not in list
-------------------------- running turn 71 ---------------------------
[((1, 8), 0.2, [(1, 10)]), ((1, 10), 0.25, [(1, 8)]), ((15, 15), 0.3333333333333333, [(13, 14)]), ((8, 10), 0.5, [(9, 10)]), ((9, 13), 1.0, [(9, 14), (9, 12)]), ((9, 14), 1.0, [(9, 13), (9, 12)]), ((10, 11), 1.0, [(9, 10), (9, 12)]), ((9, 10), 1.5, [(8, 10), (10, 11), (9, 12)]), ((9, 12), 2.0, [(9, 13), (9, 10), (10, 11), (9, 14)])]
There are 3 groups
[(1, 10), (1, 8)]
[(13, 14), (15, 15)]
[(9, 13), (9, 14), (8, 10), (9, 10), (10, 11), (9, 12)]
frontline_radius = 0
(17, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -13
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(10, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(11,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -27
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(11,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  8
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -27
(13,16) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 27
(15,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -3
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 7, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(12,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(16,12) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 5,16) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
(13,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 4,15) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(14, 3) (friendly)  vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  30  30  30  32  32  31  30  29                      
 3              28  29  30  30  29  33  31  32  32  31  30  29  28              
 4              29  30  31  31  29  30  31  32  33  32  31  30  29              
 5          29  30  31  31  29  31  27  32  29  32  33  32  31  30  29          
 6          30  31  32  31  28  29  26  29  31  31  32  33  32  31  29          
 7      30  31  32  32  31  30  24  29  27  31  31  32  33  33  30  27  28      
 8      31  32  33  33  30  29  27  30  32  28  29  35  32  32  29  26  28      
 9      32  33  34  34  31  27  33  31  33  34  33  29  31  31  32  30  26      
10      31  32  32  31  32  30  29  35  36  33  31  28  33  31  29  28  29      
11      30  31  32  31  29  31  29  35  38  33  28  32  30  31  30  28  29      
12          30  31  32  30  28  31  33  35  33  31  29  30  31  29  30          
13          29  30  30  31  28  30  31  34  32  32  29  31  31  29  27          
14              28  28  29  29  30  31  34  33  30  31  30  30  29              
15              26  29  28  29  29  32  34  33  31  30  28  28  28              
16                      28  30  30  32  33  32  30  28  29                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 14)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [5]}
(8, 10) - {'options': [(8, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 14) - {'options': [(9, 15)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 16) - {'options': [(6, 16)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 14) - {'options': [(13, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 3) - {'options': [(14, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 9)], 'scores': [1]}
(1, 8) - {'options': [(2, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 15) - {'options': [(15, 14)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [0]}, (9, 14): {'options': [(9, 15)], 'scores': [0]}, (5, 16): {'options': [(6, 16)], 'scores': [2]}, (13, 14): {'options': [(13, 13)], 'scores': [1]}, (8, 10): {'options': [(8, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (1, 10): {'options': [(1, 9)], 'scores': [1]}, (1, 8): {'options': [(2, 8)], 'scores': [1]}, (14, 3): {'options': [(14, 4)], 'scores': [1]}, (10, 11): {'options': [(9, 11)], 'scores': [5]}, (15, 15): {'options': [(15, 14)], 'scores': [1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 72 ---------------------------
[((2, 8), 0.25, [(1, 9)]), ((1, 9), 0.25, [(2, 8)]), ((9, 15), 0.6666666666666666, [(9, 14), (9, 12)]), ((9, 14), 1.0, [(9, 15), (9, 12)]), ((8, 11), 1.0, [(9, 11)]), ((9, 10), 1.5, [(9, 11), (8, 11), (9, 12)]), ((9, 11), 1.5, [(9, 10), (8, 11), (9, 12)]), ((9, 12), 2.0, [(9, 11), (9, 10), (8, 11), (9, 14)])]
There are 2 groups
[(2, 8), (1, 9)]
[(9, 14), (9, 15), (8, 11), (9, 10), (9, 11), (9, 12)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -2
( 2, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(16, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 32
(14, 4) (friendly)  vulnerability = 10 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -3
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -11
( 9, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,14) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 1, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 34
(10, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  31  31  30                              
 2                      29  30  31  31  31  31  31  30  29                      
 3              28  29  30  31  31  30  34  30  31  31  30  29  28              
 4              29  30  31  32  32  30  31  31  31  32  31  30  29              
 5          29  30  31  32  32  30  31  29  33  30  31  32  31  30  28          
 6          30  31  32  33  32  28  29  28  29  33  32  32  32  30  27          
 7      30  31  32  33  32  30  28  26  30  27  30  32  34  32  29  29  27      
 8      31  32  33  33  31  27  28  27  29  30  30  30  33  33  29  29  28      
 9      32  33  33  32  32  30  29  30  32  33  28  31  33  33  30  27  30      
10      31  32  33  32  30  31  28  34  36  32  30  30  29  30  30  29  28      
11      30  31  32  33  31  29  31  34  37  33  28  30  31  30  27  27  29      
12          30  31  31  32  29  30  32  35  33  31  28  30  30  30  27          
13          29  29  29  30  29  29  31  34  32  32  29  30  30  28  28          
14              27  30  28  28  30  31  34  33  30  30  29  29  28              
15              27  27  29  30  29  32  34  33  30  29  30  27  27              
16                      29  30  30  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
determine_ideal_outcome called with [(9, 14), (9, 15), (8, 11), (9, 10), (9, 11), (9, 12)]


=> INITIAL
BOT Positions:
6 participants
     7   8   9  10  
 9                 
10       -   X     
11       X   X     
12           X     
13           -     
14           X     
15           X     
16                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
6 participants
     7   8   9  10  
 9                 
10       -   X     
11       X   X     
12           X     
13           -     
14           X     
15           X     
16                 

determine_ideal_outcome called with [(9, 14), (9, 15), (8, 11), (9, 10), (9, 11), (9, 12)]
outcome = 
num_optional - 3
optional - [(9, 13), (9, 14), (9, 15), (8, 11), (8, 10)]
occupied - [(9, 11), (9, 10), (9, 12)]
available_bots - [(9, 14), (9, 15), (8, 11), (9, 10), (9, 11), (9, 12)]
levels - {34: [(9, 13), (9, 14), (9, 15), (8, 11), (8, 10)], 35: [(9, 12)], 36: [(9, 10)], 37: [(9, 11)]}
max_score - 210

-------------------------------------
TARGET system:
6 participants
()
     7   8   9  10  
 9                 
10       3   X     
11       3   X     
12           X     
13           3     
14           3     
15           3     
16                 


The initial system score was 210
The maximum obtainable for the system is 210
The score gain were looking for is 0
bots_in_optional = [(9, 14), (9, 15), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 3
current_bots_in_optional = [(9, 14), (9, 15), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 11)]
current_bots_in_occupied = [(9, 10), (9, 11), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 11), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 11), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
6 participants
     7   8   9  10  
 9                 
10       -   0     
11       ?   0     
12           0     
13           -     
14           ?     
15           ?     
16                 

Cell Scores:
     7   8   9  10  
 9                 
10      30  33     
11      30  28     
12          31     
13          33     
14          33     
15          30     
16                 

The system now has a total of 648 options
Optional squares exist

System result = ...
The system has a total of 648 options
(9, 14) - {'options': [(9, 13), (9, 14), (9, 15)], 'scores': [0, 0, 0]}
(9, 15) - {'options': [(9, 14), (9, 15)], 'scores': [0, 0]}
(8, 11) - {'options': [(9, 11), (8, 11), (8, 10)], 'scores': [3, 0, 0]}
(9, 10) - {'options': [(9, 11), (9, 10), (8, 10)], 'scores': [1, 0, -2]}
(9, 11) - {'options': [(9, 11), (9, 10), (9, 12), (8, 11)], 'scores': [0, -1, -2, -3]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [2, 0, -1]}


The system did not get simpler in simplify system, returning
settle_sys: this subsystem has 648 combinations
Ran full set of options and didnt find top result
Score is 0
(9, 14) - {'options': [(9, 13)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [0]}
(8, 11) - {'options': [(9, 11)], 'scores': [3]}
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
(9, 11) - {'options': [(9, 10)], 'scores': [-1]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 13) - {'options': [(13, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(3, 8)], 'scores': [1]}
(1, 9) - {'options': [(2, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 4) - {'options': [(13, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 14) - {'options': [(14, 14)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 16) - {'options': [(7, 16)], 'scores': [0]}
settle_sys returned with {(9, 14): {'options': [(9, 13)], 'scores': [0]}, (13, 13): {'options': [(13, 12)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [0]}, (2, 8): {'options': [(3, 8)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [3]}, (9, 10): {'options': [(8, 10)], 'scores': [-2]}, (9, 11): {'options': [(9, 10)], 'scores': [-1]}, (1, 9): {'options': [(2, 9)], 'scores': [1]}, (14, 4): {'options': [(13, 4)], 'scores': [1]}, (15, 14): {'options': [(14, 14)], 'scores': [1]}, (6, 16): {'options': [(7, 16)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 73 ---------------------------
[((2, 9), 0.5, [(3, 8)]), ((3, 8), 0.5, [(2, 9)]), ((9, 14), 1.0, [(9, 13), (9, 12)]), ((8, 10), 1.0, [(9, 10)]), ((9, 10), 1.5, [(9, 11), (8, 10), (9, 12)]), ((9, 13), 2.0, [(9, 14), (9, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (9, 13), (8, 10)]), ((9, 12), 2.0, [(9, 13), (9, 11), (9, 10), (9, 14)])]
There are 2 groups
[(3, 8), (2, 9)]
[(9, 10), (9, 13), (9, 11), (9, 14), (9, 12)]
frontline_radius = 0
( 8,13) (enemy)     vulnerability =  2 attack_ratio = -2 health_diffs = -100
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -12
( 7,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
(10, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
(13,12) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 6, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 2, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  7
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -8
(14,14) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(13, 4) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -21
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  2 health_diffs =  0
(13,15) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -13
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 4, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -30
( 9, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 6, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 5,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  30  31  32  32  31  33  29  30  30  29  28              
 4              29  30  31  32  33  33  31  30  30  30  31  30  29              
 5          29  30  31  32  32  33  31  32  28  31  29  30  31  29  29          
 6          30  31  32  32  31  31  29  30  27  27  32  31  30  28  29          
 7      30  31  32  31  31  31  27  27  27  29  30  30  31  30  30  28  29      
 8      31  32  32  31  30  31  28  28  29  28  29  33  33  31  31  29  30      
 9      32  32  32  35  33  30  29  32  31  33  33  32  33  33  30  31  32      
10      31  32  32  32  33  32  32  32  34  33  32  30  34  31  27  29  30      
11      30  31  32  32  33  31  32  31  37  34  29  30  30  28  28  28  27      
12          30  31  32  31  31  30  31  34  32  30  31  28  28  28  25          
13          29  30  30  30  29  27  33  33  31  31  28  29  30  27  27          
14              28  28  30  28  30  30  33  33  30  29  29  29  28              
15              28  28  28  29  30  31  34  33  30  29  30  27  27              
16                      28  30  30  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 14) - {'options': [(9, 15)], 'scores': [1]}
(8, 10) - {'options': [(9, 10)], 'scores': [2]}
(9, 10) - {'options': [(10, 10)], 'scores': [-1]}
(9, 11) - {'options': [(10, 11)], 'scores': [-3]}
(9, 12) - {'options': [(9, 11)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 12) - {'options': [(12, 12)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 8) - {'options': [(3, 8)], 'scores': [0]}
(2, 9) - {'options': [(2, 8)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 4) - {'options': [(13, 4)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 16) - {'options': [(8, 16)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 14) - {'options': [(14, 13)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (13, 12): {'options': [(12, 12)], 'scores': [3]}, (9, 14): {'options': [(9, 15)], 'scores': [1]}, (2, 9): {'options': [(2, 8)], 'scores': [0]}, (13, 4): {'options': [(13, 4)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [2]}, (3, 8): {'options': [(3, 8)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [-3]}, (7, 16): {'options': [(8, 16)], 'scores': [2]}, (14, 14): {'options': [(14, 13)], 'scores': [1]}, (9, 10): {'options': [(10, 10)], 'scores': [-1]}, (9, 12): {'options': [(9, 11)], 'scores': [3]}}
-------------------------- running turn 74 ---------------------------
[((2, 8), 0.3333333333333333, [(3, 8)]), ((8, 16), 0.3333333333333333, [(9, 15)]), ((3, 8), 0.5, [(2, 8)]), ((14, 13), 0.5, [(13, 12)]), ((9, 15), 0.6666666666666666, [(9, 13), (8, 16)]), ((10, 11), 1.5, [(9, 11), (10, 10), (9, 10)]), ((9, 10), 1.5, [(9, 11), (10, 10), (10, 11)]), ((10, 10), 2.0, [(9, 10), (10, 11)]), ((9, 11), 2.0, [(9, 10), (10, 11), (9, 13), (10, 10)])]
There are 4 groups
[(3, 8), (2, 8)]
[(9, 13), (8, 16), (9, 11), (9, 15)]
[(13, 12), (14, 13)]
[(9, 10), (9, 13), (9, 11), (10, 11), (10, 10)]
frontline_radius = 0
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 8,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -2
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,13) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 20
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -41
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
(16,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 33
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 4) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 24
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -25
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(13,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -24
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -31
( 5,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
( 9,13) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  2
(12, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -24
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  6
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(10, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 5, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(11, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(15, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(15, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -38
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  29                              
 2                      29  30  31  32  33  31  28  29  29                      
 3              28  29  30  31  32  33  33  29  30  27  29  29  28              
 4              29  30  31  32  33  33  33  29  28  27  29  30  28              
 5          29  30  31  31  33  32  32  32  32  25  30  30  29  28  28          
 6          30  31  31  31  31  30  33  30  29  31  30  30  30  31  28          
 7      30  31  31  30  33  29  29  26  32  28  30  32  34  32  29  30  30      
 8      31  32  32  31  30  28  28  27  29  30  31  33  33  33  30  30  31      
 9      32  32  32  34  30  32  29  31  30  33  31  33  33  31  33  29  30      
10      31  32  32  32  33  32  29  33  35  33  33  31  33  28  26  31  29      
11      30  31  32  32  33  31  33  32  37  34  30  29  29  31  26  27  29      
12          30  31  32  32  31  31  31  34  32  30  31  27  27  30  27          
13          29  30  31  31  30  27  33  33  31  31  28  29  29  28  28          
14              29  29  28  29  31  30  33  33  30  29  29  29  28              
15              27  27  30  28  29  31  34  33  30  29  30  27  27              
16                      27  29  30  32  33  32  31  29  27                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(10, 11) - {'options': [(9, 11)], 'scores': [3]}
(10, 10) - {'options': [(10, 11)], 'scores': [1]}
(9, 15) - {'options': [(9, 15)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
(9, 11) - {'options': [(9, 10)], 'scores': [-2]}
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 12) - {'options': [(12, 12)], 'scores': [4]}
(14, 13) - {'options': [(13, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 8) - {'options': [(3, 8)], 'scores': [0]}
(2, 8) - {'options': [(2, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 4) - {'options': [(14, 4)], 'scores': [1]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (13, 12): {'options': [(12, 12)], 'scores': [4]}, (8, 16): {'options': [(9, 16)], 'scores': [1]}, (10, 11): {'options': [(9, 11)], 'scores': [3]}, (9, 15): {'options': [(9, 15)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [0]}, (13, 4): {'options': [(14, 4)], 'scores': [1]}, (10, 10): {'options': [(10, 11)], 'scores': [1]}, (14, 13): {'options': [(13, 13)], 'scores': [0]}, (3, 8): {'options': [(3, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [-2]}, (9, 10): {'options': [(8, 10)], 'scores': [-2]}}
-------------------------- running turn 75 ---------------------------
[((2, 9), 0.5, [(3, 8)]), ((3, 8), 0.5, [(2, 9)]), ((9, 16), 0.6666666666666666, [(9, 15), (9, 13)]), ((13, 12), 1.0, [(13, 13)]), ((13, 13), 1.0, [(13, 12)]), ((9, 15), 1.0, [(9, 16), (9, 13)]), ((10, 10), 1.0, [(9, 10)]), ((8, 10), 1.0, [(9, 10)]), ((9, 10), 1.5, [(9, 11), (8, 10), (10, 10)]), ((9, 11), 2.0, [(9, 10), (9, 13), (8, 10), (10, 10)])]
There are 4 groups
[(3, 8), (2, 9)]
[(9, 13), (9, 16), (9, 11), (9, 15)]
[(13, 12), (13, 13)]
[(9, 10), (9, 13), (9, 11), (8, 10), (10, 10)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 4, 7) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -3
(13,13) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -37
(14, 4) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  0
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -40
( 8,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 9, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 5) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(15,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,14) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -34
(13,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -51
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
( 2, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(12, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  2
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -8
( 6,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -53
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(11, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -9
(15,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(14,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 14
( 9,13) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -52
(12, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -36
(13,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(11, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(10,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 3, 8) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = 26
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(12, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(12, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  29  28  28                      
 3              28  29  30  31  32  33  34  31  27  29  28  28  27              
 4              29  30  31  32  33  34  33  31  29  24  28  29  27              
 5          29  30  30  32  33  34  33  32  29  29  27  27  28  30  27          
 6          30  30  30  32  33  33  30  32  29  27  30  30  30  29  29          
 7      30  30  30  32  30  31  31  29  29  31  29  29  32  32  31  31  30      
 8      31  32  31  28  29  34  29  30  30  28  30  34  31  31  31  32  31      
 9      32  32  31  32  33  30  30  33  31  34  35  30  30  32  30  31  32      
10      31  32  32  31  31  31  34  31  35  35  32  31  32  26  29  30  30      
11      30  31  32  32  32  32  33  30  36  35  31  30  29  29  26  28  30      
12          30  31  32  33  32  29  32  33  31  31  31  26  27  29  28          
13          29  30  31  32  31  29  31  31  31  31  27  28  28  28  28          
14              29  30  30  29  29  31  32  32  29  28  31  28  27              
15              28  28  28  31  29  29  33  33  31  30  28  28  28              
16                      28  28  30  31  33  32  31  30  28                      
17                              30  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 10) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(10, 15)], 'scores': [0]}
(8, 10) - {'options': [(9, 10)], 'scores': [4]}
(9, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 12) - {'options': [(12, 12)], 'scores': [5]}
(13, 13) - {'options': [(13, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 8) - {'options': [(2, 8)], 'scores': [1]}
(2, 9) - {'options': [(1, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 4) - {'options': [(14, 4)], 'scores': [0]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [2]}, (13, 12): {'options': [(12, 12)], 'scores': [5]}, (13, 13): {'options': [(13, 14)], 'scores': [3]}, (2, 9): {'options': [(1, 9)], 'scores': [0]}, (9, 15): {'options': [(10, 15)], 'scores': [0]}, (14, 4): {'options': [(14, 4)], 'scores': [0]}, (10, 10): {'options': [(10, 11)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [4]}, (9, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (3, 8): {'options': [(2, 8)], 'scores': [1]}}
-------------------------- running turn 76 ---------------------------
[((10, 15), 0.3333333333333333, [(9, 16)]), ((9, 16), 0.3333333333333333, [(10, 15)]), ((1, 9), 0.3333333333333333, [(2, 8)]), ((2, 8), 0.3333333333333333, [(1, 9)]), ((13, 12), 1.0, [(13, 13)]), ((13, 13), 1.0, [(13, 12)]), ((10, 10), 1.0, [(9, 10)]), ((8, 10), 1.0, [(9, 10)]), ((9, 12), 1.0, [(9, 11)]), ((9, 10), 2.0, [(9, 11), (8, 10), (10, 10), (9, 12)]), ((9, 11), 2.0, [(9, 10), (9, 12), (8, 10), (10, 10)])]
There are 4 groups
[(10, 15), (9, 16)]
[(2, 8), (1, 9)]
[(13, 12), (13, 13)]
[(9, 10), (9, 11), (8, 10), (9, 12), (10, 10)]
frontline_radius = 0
( 4, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -3
(13,13) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -25
(14, 4) (friendly)  vulnerability =  9 attack_ratio = -2 health_diffs = -76
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -32
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -21
( 7,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
(15, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 5, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -51
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 8,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -48
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  2
( 2, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -53
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
(10,15) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 9,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 1, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  1
(14,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 24
(13, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -36
(13,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -2
(10,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -42
(13, 5) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -24
(11, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(12, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  28  27                      
 3              28  29  30  31  32  33  34  33  30  27  28  27  26              
 4              29  30  31  32  33  33  35  33  30  30  24  26  27              
 5          29  30  30  32  33  32  33  34  34  30  27  27  26  29  27          
 6          30  30  30  31  32  30  34  31  31  33  28  30  28  28  29          
 7      30  30  30  31  29  29  31  28  33  29  29  32  31  32  31  31  30      
 8      31  32  30  28  31  28  29  27  31  30  30  32  32  33  33  32  31      
 9      32  32  32  32  29  31  30  33  30  32  32  32  32  31  32  33  32      
10      31  32  32  32  32  32  30  33  36  33  30  30  32  29  26  30  31      
11      30  31  32  32  33  32  34  31  35  34  33  29  26  27  27  27  29      
12          30  31  32  33  32  30  32  34  32  29  32  27  25  28  27          
13          29  30  31  32  32  28  31  31  32  32  28  28  28  27  28          
14              29  30  31  30  28  30  32  32  30  28  31  28  27              
15              28  29  29  29  31  28  32  33  31  30  28  28  28              
16                      29  29  29  30  33  32  31  30  28                      
17                              29  31  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 10) - {'options': [(8, 9)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(10, 10) - {'options': [(10, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 12) - {'options': [(12, 12)], 'scores': [5]}
(13, 13) - {'options': [(13, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 4) - {'options': [(15, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 15) - {'options': [(10, 15)], 'scores': [0]}
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 8) - {'options': [(2, 9)], 'scores': [0]}
(1, 9) - {'options': [(1, 9)], 'scores': [0]}
settle_sys returned with {(10, 15): {'options': [(10, 15)], 'scores': [0]}, (13, 12): {'options': [(12, 12)], 'scores': [5]}, (13, 13): {'options': [(13, 14)], 'scores': [3]}, (10, 10): {'options': [(10, 11)], 'scores': [1]}, (14, 4): {'options': [(15, 4)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 9): {'options': [(1, 9)], 'scores': [0]}, (2, 8): {'options': [(2, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 77 ---------------------------
[((10, 15), 0.5, [(9, 16)]), ((9, 16), 0.5, [(10, 15)]), ((1, 9), 0.5, [(2, 9)]), ((13, 12), 1.0, [(13, 13)]), ((10, 11), 1.0, [(9, 11)]), ((13, 13), 1.0, [(13, 12)]), ((2, 9), 1.0, [(1, 9)]), ((9, 10), 1.5, [(9, 11), (10, 11), (9, 12)]), ((9, 11), 1.5, [(9, 10), (10, 11), (9, 12)]), ((9, 12), 1.5, [(9, 11), (9, 10), (10, 11)])]
There are 4 groups
[(10, 15), (9, 16)]
[(1, 9), (2, 9)]
[(13, 12), (13, 13)]
[(9, 10), (9, 11), (10, 11), (9, 12)]
frontline_radius = 0
( 8,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -3
(13,13) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -19
( 4, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -20
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -21
( 3, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(15,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -53
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 30
(13, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  7
(15, 4) (friendly)  vulnerability = 10 attack_ratio =  0 health_diffs = -8
( 8,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
( 9,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(15,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 21
( 9,16) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 1, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 9, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(10,15) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
(13, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -34
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  3
(12, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  28  27                      
 3              28  29  30  31  32  33  34  33  30  27  28  27  26              
 4              29  30  31  32  32  34  34  33  31  29  25  25  27              
 5          29  29  31  32  32  32  32  34  33  31  27  27  25  28  27          
 6          29  29  30  32  32  33  29  33  31  31  30  27  29  27  28          
 7      29  29  30  29  32  33  30  30  29  34  31  30  30  30  30  31  30      
 8      31  29  27  32  33  32  29  31  33  31  31  34  31  30  31  32  31      
 9      31  31  32  31  32  32  33  33  33  34  36  31  30  32  30  31  32      
10      31  31  31  31  33  34  29  32  37  36  32  30  32  26  29  30  30      
11      30  31  31  33  32  30  32  32  36  35  33  29  28  29  26  28  30      
12          30  31  32  32  30  32  31  34  33  29  32  27  27  29  28          
13          29  30  31  32  31  29  32  31  31  32  28  28  28  28  28          
14              29  30  31  32  29  28  33  31  29  28  31  28  27              
15              28  29  30  30  30  31  30  31  31  30  28  28  28              
16                      29  30  30  30  31  32  31  30  28                      
17                              30  30  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 15) - {'options': [(10, 16)], 'scores': [1]}
(9, 16) - {'options': [(9, 17)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 12) - {'options': [(12, 12)], 'scores': [5]}
(13, 13) - {'options': [(13, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(10, 11)], 'scores': [-1]}
(10, 11) - {'options': [(10, 10)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 9) - {'options': [(1, 10)], 'scores': [0]}
(2, 9) - {'options': [(3, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 4) - {'options': [(15, 5)], 'scores': [1]}
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (13, 12): {'options': [(12, 12)], 'scores': [5]}, (10, 11): {'options': [(10, 10)], 'scores': [1]}, (13, 13): {'options': [(13, 14)], 'scores': [3]}, (2, 9): {'options': [(3, 9)], 'scores': [1]}, (10, 15): {'options': [(10, 16)], 'scores': [1]}, (9, 16): {'options': [(9, 17)], 'scores': [1]}, (9, 11): {'options': [(10, 11)], 'scores': [-1]}, (1, 9): {'options': [(1, 10)], 'scores': [0]}, (15, 4): {'options': [(15, 5)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}}
-------------------------- running turn 78 ---------------------------
[((10, 16), 0.3333333333333333, [(9, 17)]), ((1, 10), 0.3333333333333333, [(2, 9)]), ((9, 17), 0.3333333333333333, [(10, 16)]), ((10, 10), 1.0, [(9, 10)]), ((9, 10), 1.0, [(9, 11), (10, 10)]), ((9, 11), 1.0, [(9, 10), (10, 10)])]
There are 3 groups
[(10, 16), (9, 17)]
[(1, 10), (2, 9)]
[(9, 10), (9, 11), (10, 10)]
frontline_radius = 0
( 6, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 8,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
(13,13) (friendly)  vulnerability =  6 attack_ratio = -1 health_diffs = -13
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -10
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -21
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 34
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
( 2, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs =  9
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 34
( 9,17) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 4) (friendly)  vulnerability = 11 attack_ratio = -1 health_diffs = -18
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 1,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -29
(13,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 21
(12, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -24
(10,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
(13,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -1
(10,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -20
(12, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  30  28  27                      
 3              28  29  30  31  32  33  34  32  30  29  26  26  27              
 4              29  30  31  32  33  33  35  34  30  26  27  25  25              
 5          28  30  31  32  33  32  33  34  34  32  29  23  26  28  26          
 6          28  29  32  33  32  30  34  32  33  33  30  30  27  27  29          
 7      28  30  27  31  33  31  32  28  33  32  34  32  32  31  31  31  30      
 8      29  27  30  31  32  31  31  28  33  35  32  33  32  33  33  32  31      
 9      31  29  32  31  33  34  28  35  34  33  32  35  31  30  32  33  32      
10      31  31  30  33  33  31  31  33  35  34  33  27  30  29  26  30  31      
11      30  31  31  33  33  30  32  31  36  34  32  27  26  27  27  27  29      
12          30  31  32  32  31  31  31  34  33  28  32  27  25  28  27          
13          29  30  31  32  31  29  32  31  31  32  28  28  28  27  28          
14              29  30  31  32  29  28  33  31  29  28  31  28  27              
15              28  29  30  30  30  31  30  31  31  30  28  28  28              
16                      29  30  30  30  31  32  31  30  28                      
17                              30  30  32  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 13) - {'options': [(13, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(2, 9) - {'options': [(3, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(10, 11)], 'scores': [-2]}
(10, 10) - {'options': [(9, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 16) - {'options': [(10, 16)], 'scores': [0]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 4) - {'options': [(15, 5)], 'scores': [3]}
settle_sys returned with {(13, 13): {'options': [(13, 14)], 'scores': [3]}, (2, 9): {'options': [(3, 9)], 'scores': [3]}, (10, 10): {'options': [(9, 10)], 'scores': [1]}, (10, 16): {'options': [(10, 16)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [1]}, (15, 4): {'options': [(15, 5)], 'scores': [3]}, (9, 11): {'options': [(10, 11)], 'scores': [-2]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}}
-------------------------- running turn 79 ---------------------------
[((1, 10), 0.3333333333333333, [(2, 9)]), ((10, 16), 0.5, [(9, 17)]), ((9, 17), 0.5, [(10, 16)]), ((10, 11), 1.0, [(9, 11)]), ((9, 10), 1.0, [(9, 11), (10, 11)]), ((9, 11), 1.0, [(9, 10), (10, 11)])]
There are 3 groups
[(1, 10), (2, 9)]
[(10, 16), (9, 17)]
[(9, 10), (9, 11), (10, 11)]
frontline_radius = 0
( 7,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(10,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -16
(13,13) (friendly)  vulnerability =  5 attack_ratio = -2 health_diffs = -72
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  4
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 23
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
(11,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 16
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 2, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -1
(13, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(10, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 9,17) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 4) (friendly)  vulnerability = 11 attack_ratio = -1 health_diffs = -27
(12,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(13, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
(16,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(15,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -23
( 1,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -19
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -10
( 8,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -19
(13,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  8
(10,16) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -5
(14,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 40
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  28  26                      
 3              28  29  30  31  32  33  34  33  30  26  26  25  26              
 4              29  30  31  32  33  34  34  33  30  28  24  22  25              
 5          28  30  31  32  33  34  33  34  33  32  27  25  26  27  26          
 6          28  29  32  33  34  33  31  34  31  33  32  29  28  28  29          
 7      28  30  27  31  34  34  32  31  28  32  32  34  32  32  31  31  30      
 8      29  27  30  31  34  34  29  30  31  32  31  32  33  33  32  32  31      
 9      31  29  32  32  34  33  32  32  32  32  34  31  33  32  31  31  32      
10      31  31  30  33  34  32  32  30  36  34  31  31  28  28  32  28  29      
11      30  31  31  33  33  32  31  31  35  35  31  27  29  27  26  30  28      
12          30  31  32  33  31  28  34  35  31  29  29  26  30  27  27          
13          29  30  31  31  31  32  31  31  31  31  28  26  28  29  28          
14              29  30  31  31  31  30  31  32  28  27  31  27  28              
15              28  29  30  31  30  31  33  29  29  30  28  28  28              
16                      29  30  31  31  31  30  31  30  28                      
17                              30  31  31  31  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 13) - {'options': [(13, 14)], 'scores': [5]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(2, 9) - {'options': [(3, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 16) - {'options': [(11, 16)], 'scores': [1]}
(9, 17) - {'options': [(8, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 4) - {'options': [(15, 5)], 'scores': [2]}
settle_sys returned with {(10, 11): {'options': [(10, 11)], 'scores': [0]}, (13, 13): {'options': [(13, 14)], 'scores': [5]}, (2, 9): {'options': [(3, 9)], 'scores': [3]}, (10, 16): {'options': [(11, 16)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 4): {'options': [(15, 5)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 17): {'options': [(8, 17)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}}
-------------------------- running turn 80 ---------------------------
[((1, 10), 0.25, [(3, 9)]), ((10, 11), 1.0, [(9, 11)]), ((9, 10), 1.0, [(9, 11), (10, 11)]), ((9, 11), 1.0, [(9, 10), (10, 11)])]
There are 2 groups
[(1, 10), (3, 9)]
[(9, 10), (9, 11), (10, 11)]
frontline_radius = 0
(11,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 6, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(10,11) (friendly)  vulnerability =  1 attack_ratio = -2 health_diffs = -51
(11,11) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 16
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 7, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 23
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -9
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  3
( 9,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(15,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 4) (friendly)  vulnerability = 12 attack_ratio = -1 health_diffs = -35
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  3
(13,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -32
( 1,10) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -1
( 8,17) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 16
( 2, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(12, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -19
(13,14) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 13
(13, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 3, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -5
(14,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10  10  10  10  10                              
 2                      10  10  31  32  33  32  30   8   8                      
 3               0  10  30  31  32  33  34  32  30  29  26   7  -1              
 4              10  30  31  32  33  33  35  34  30  26  27  25   6              
 5           9  30  31  32  33  32  33  34  34  32  29  23  26  28   7          
 6           8  29  32  33  32  30  34  32  34  33  30  30  27  27   9          
 7       8  30  28  30  33  31  32  28  34  33  35  32  32  31  31  31  10      
 8       8  28  31  30  31  31  31  29  34  33  33  34  32  33  33  32  10      
 9      10  30  30  33  32  33  28  34  33  35  31  34  30  31  32  33  10      
10      10  32  31  32  32  31  31  32  34  33  31  26  29  29  28  30  10      
11      10  31  32  32  33  30  31  30  35  32  30  25  27  24  29  29   9      
12          10  31  32  32  30  30  33  33  30  30  29  24  28  27   8          
13          10  30  31  32  32  30  32  33  32  29  29  27  28  28  10          
14              10  30  31  32  32  31  31  33  29  28  31  27   9              
15               0  10  30  31  31  31  33  29  30  30  28   9   0              
16                      10  10  31  31  31  30  31  10   9                      
17                              10  10   9  10  10                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 16) - {'options': [(11, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 11) - {'options': [(10, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(2, 10)], 'scores': [22]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [21]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 4) - {'options': [(15, 5)], 'scores': [22]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(4, 9)], 'scores': [3]}
settle_sys returned with {(11, 16): {'options': [(11, 16)], 'scores': [0]}, (10, 11): {'options': [(10, 10)], 'scores': [1]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 17): {'options': [(8, 16)], 'scores': [21]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (15, 4): {'options': [(15, 5)], 'scores': [22]}, (1, 10): {'options': [(2, 10)], 'scores': [22]}, (3, 9): {'options': [(4, 9)], 'scores': [3]}}
-------------------------- running turn 81 ---------------------------
[((3, 14), 0.2, [(2, 10)]), ((1, 10), 0.3333333333333333, [(2, 10)]), ((2, 10), 0.5, [(1, 10)]), ((10, 10), 1.0, [(9, 10)]), ((9, 10), 1.0, [(9, 11), (10, 10)]), ((9, 11), 1.0, [(9, 10), (10, 10)])]
There are 2 groups
[(1, 10), (3, 14), (2, 10)]
[(9, 10), (9, 11), (10, 10)]
frontline_radius = 0
(11,16) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 5, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
(17, 8) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 7,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(14,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 8, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 3,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs =  0
( 4, 9) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -7
( 3, 3) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(13, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
( 9, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 19
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 8,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -2
( 4,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
( 2, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(13,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 2,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -32
(12,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(14,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 23
(17, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -19
(10,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -39
(13, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -5
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(14, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(16,13) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  29  25                      
 3              28  29  30  31  32  33  34  33  31  27  25  25  24              
 4              29  30  31  32  33  34  34  34  32  28  25  20  24              
 5          27  29  31  32  33  34  33  34  33  33  29  25  23  26  26          
 6          29  28  31  33  34  33  31  34  32  33  32  27  28  26  28          
 7      28  26  28  32  33  34  33  31  29  33  34  34  31  29  30  31  29      
 8      28  29  31  29  32  34  31  32  32  31  33  34  32  30  32  31  29      
 9      31  30  29  30  35  33  31  33  33  35  31  29  33  32  30  30  32      
10      31  30  30  33  30  31  34  31  34  32  30  30  26  28  31  31  29      
11      30  31  31  31  31  32  32  31  35  31  29  27  25  29  30  30  29      
12          30  31  31  33  31  28  34  34  32  29  26  29  26  28  30          
13          29  30  31  31  31  32  31  34  32  29  28  27  29  28  28          
14              29  30  31  30  31  32  33  30  31  29  25  27  28              
15              28  29  29  29  30  32  32  32  27  26  28  25  27              
16                      27  30  29  31  32  30  28  27  27                      
17                              29  31  32  30  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 16) - {'options': [(11, 17)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(17, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 9) - {'options': [(5, 9)], 'scores': [5]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 3) - {'options': [(3, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 12)], 'scores': [-1]}
(10, 10) - {'options': [(10, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(2, 10) - {'options': [(2, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 16) - {'options': [(9, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 13) - {'options': [(16, 12)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 14) - {'options': [(4, 14)], 'scores': [1]}
settle_sys returned with {(11, 16): {'options': [(11, 17)], 'scores': [2]}, (17, 8): {'options': [(17, 9)], 'scores': [3]}, (4, 9): {'options': [(5, 9)], 'scores': [5]}, (3, 3): {'options': [(3, 4)], 'scores': [1]}, (10, 10): {'options': [(10, 9)], 'scores': [3]}, (2, 10): {'options': [(2, 11)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [1]}, (9, 11): {'options': [(9, 12)], 'scores': [-1]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (8, 16): {'options': [(9, 16)], 'scores': [1]}, (16, 13): {'options': [(16, 12)], 'scores': [2]}, (3, 14): {'options': [(4, 14)], 'scores': [1]}}
-------------------------- running turn 82 ---------------------------
[((11, 17), 0.3333333333333333, [(9, 16)]), ((2, 11), 0.3333333333333333, [(1, 10)]), ((1, 10), 0.3333333333333333, [(2, 11)]), ((9, 11), 0.5, [(9, 12)]), ((9, 12), 1.0, [(9, 11)])]
There are 3 groups
[(9, 16), (11, 17)]
[(1, 10), (2, 11)]
[(9, 11), (9, 12)]
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = 13
( 6, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
(11,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(12,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
(17, 8) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(11,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(12, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(10,12) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -26
(13,16) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -55
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 1,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
( 9, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
( 9,16) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(16,12) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 29
(12,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
(11,17) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
( 8,12) (enemy)     vulnerability =  1 attack_ratio = -1 health_diffs = -25
( 3, 4) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 2,11) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
(12, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 7, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -11
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  30  27  28                      
 3              28  29  30  31  32  33  34  32  29  29  25  24  27              
 4              28  30  31  32  33  33  35  33  30  29  25  28  24              
 5          28  28  30  32  33  33  33  34  35  33  29  28  26  26  28          
 6          27  30  30  32  33  32  35  32  33  34  31  31  25  29  28          
 7      29  27  27  31  34  33  32  30  34  32  33  32  30  31  27  28  30      
 8      28  30  30  31  31  32  33  29  33  34  31  32  31  31  28  29  30      
 9      31  30  31  32  32  33  29  35  33  32  34  34  30  29  31  31  29      
10      31  31  31  32  33  29  30  32  36  34  31  29  34  29  27  28  30      
11      30  31  32  32  31  29  31  30  34  33  33  29  28  27  30  28  29      
12          30  31  32  31  30  30  32  32  33  28  31  27  28  26  28          
13          29  30  31  32  31  30  32  34  31  29  28  28  29  26  28          
14              29  30  30  30  31  33  33  29  31  27  27  27  28              
15              28  28  28  31  30  31  32  31  26  28  26  26  28              
16                      28  28  30  32  32  30  27  26  28                      
17                              30  31  32  30  30                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 9) - {'options': [(5, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(17, 8)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 17) - {'options': [(11, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(2, 11) - {'options': [(3, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 14) - {'options': [(4, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
(9, 12) - {'options': [(9, 13)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 4) - {'options': [(4, 4)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 12) - {'options': [(16, 11)], 'scores': [0]}
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [1]}, (17, 8): {'options': [(17, 8)], 'scores': [0]}, (11, 17): {'options': [(11, 17)], 'scores': [0]}, (2, 11): {'options': [(3, 11)], 'scores': [1]}, (4, 14): {'options': [(4, 13)], 'scores': [1]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [2]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 13)], 'scores': [2]}, (16, 12): {'options': [(16, 11)], 'scores': [0]}}
-------------------------- running turn 83 ---------------------------
[((4, 13), 0.3333333333333333, [(3, 11)])]
There are 1 groups
[(4, 13), (3, 11)]
frontline_radius = 0
(17, 8) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
(15,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 4, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(16, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(13, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,11) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 23
(10,15) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
(11,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(13, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(10, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
(10,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -9
( 4,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 3, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -46
( 1,10) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 46
(12,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
(16,11) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
(14,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(12,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 5,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -19
(13,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9,10) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -87
(15, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 5,15) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(11,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 4, 4) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(11,17) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -31
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
( 8,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 34
(14,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 9,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -22
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  31  29  26                      
 3              28  29  30  31  32  33  34  33  31  28  28  24  25              
 4              28  30  31  32  32  34  35  34  32  29  27  22  27              
 5          28  28  30  32  32  32  34  36  34  34  31  26  27  24  27          
 6          28  31  29  31  31  35  34  35  34  34  33  29  28  24  28          
 7      30  29  29  30  32  32  32  35  35  36  34  34  31  25  28  27  29      
 8      30  29  29  33  31  33  32  34  35  33  34  34  32  29  28  26  29      
 9      30  33  31  32  31  31  33  32  36  35  31  33  33  29  26  32  30      
10      30  30  32  31  31  31  29  33  33  29  31  32  30  30  27  28  30      
11      30  30  31  31  32  29  30  31  32  30  30  29  29  27  29  28  29      
12          30  31  31  31  29  29  32  32  32  30  27  30  29  25  27          
13          29  30  31  29  31  32  31  33  31  28  30  28  27  28  27          
14              29  29  29  30  31  32  34  29  27  30  27  26  27              
15              27  27  30  29  30  32  31  31  28  24  28  27  26              
16                      27  29  31  32  32  29  28  27  27                      
17                              30  31  32  30  29                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 10) - {'options': [(9, 9)], 'scores': [3]}
(9, 12) - {'options': [(9, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 11) - {'options': [(15, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 17) - {'options': [(10, 17)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 10) - {'options': [(5, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 4) - {'options': [(5, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(17, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 11) - {'options': [(3, 10)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 13) - {'options': [(4, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys returned with {(4, 13): {'options': [(4, 13)], 'scores': [0]}, (16, 11): {'options': [(15, 11)], 'scores': [1]}, (11, 17): {'options': [(10, 17)], 'scores': [1]}, (5, 10): {'options': [(5, 11)], 'scores': [1]}, (4, 4): {'options': [(5, 4)], 'scores': [1]}, (17, 8): {'options': [(17, 9)], 'scores': [1]}, (3, 11): {'options': [(3, 10)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [3]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (9, 12): {'options': [(9, 13)], 'scores': [1]}}
-------------------------- running turn 84 ---------------------------
[((10, 17), 0.5, [(9, 16)]), ((3, 10), 0.5, [(1, 10)]), ((9, 16), 0.5, [(10, 17)]), ((1, 10), 0.5, [(3, 10)])]
There are 2 groups
[(9, 16), (10, 17)]
[(1, 10), (3, 10)]
frontline_radius = 0
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(10,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(10,17) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(16, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,11) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -85
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
(10,15) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(15, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -26
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(12, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(16, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -30
( 2, 9) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -96
( 3,10) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = 26
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(10,12) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -9
( 4,13) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
(15,11) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs =  0
( 1,10) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 46
(12, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 40
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 5, 4) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 5,11) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -31
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -19
(15, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -6
( 9,16) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 3, 5) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(12,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(17, 9) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
(13,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 5,14) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(10, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -27
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  30                              
 2                      29  30  31  32  33  32  30  28  28                      
 3              27  29  30  31  32  33  34  32  30  31  26  24  26              
 4              27  29  31  31  33  34  35  34  32  29  28  28  22              
 5          27  30  29  30  31  33  35  36  35  34  32  30  26  26  25          
 6          29  29  30  31  34  33  35  37  35  35  34  32  28  27  25          
 7      30  30  31  32  33  32  35  36  36  34  35  34  34  29  25  28  28      
 8      30  30  31  32  33  32  35  33  33  35  32  33  32  30  28  26  28      
 9      30  32  30  33  31  32  31  32  34  31  30  34  32  30  25  29  30      
10      30  30  31  31  30  31  29  31  30  28  34  32  30  27  26  27  29      
11      30  30  32  31  31  31  29  29  30  32  30  31  31  28  26  25  29      
12          30  31  32  31  30  30  30  30  32  29  32  30  27  27  27          
13          29  30  30  30  30  31  32  31  28  32  29  29  28  27  28          
14              28  28  31  30  31  31  33  29  26  26  30  28  27              
15              28  28  28  30  32  31  31  30  27  27  25  27  28              
16                      28  30  31  32  32  29  27  27  27                      
17                              30  31  32  30  29                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 13) - {'options': [(9, 14)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 11) - {'options': [(17, 11)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
(10, 17) - {'options': [(9, 17)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 11) - {'options': [(6, 11)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
(3, 10) - {'options': [(3, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 4) - {'options': [(6, 4)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 13) - {'options': [(4, 12)], 'scores': [2]}
settle_sys returned with {(9, 13): {'options': [(9, 14)], 'scores': [2]}, (16, 11): {'options': [(17, 11)], 'scores': [4]}, (17, 9): {'options': [(17, 9)], 'scores': [0]}, (10, 17): {'options': [(9, 17)], 'scores': [2]}, (5, 11): {'options': [(6, 11)], 'scores': [0]}, (3, 10): {'options': [(3, 11)], 'scores': [1]}, (5, 4): {'options': [(6, 4)], 'scores': [0]}, (4, 13): {'options': [(4, 12)], 'scores': [2]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}}
-------------------------- running turn 85 ---------------------------
[((9, 14), 0.5, [(9, 16)]), ((17, 11), 0.5, [(17, 9)]), ((4, 12), 0.6666666666666666, [(3, 11), (6, 11)]), ((9, 17), 0.6666666666666666, [(9, 16), (9, 14)]), ((3, 11), 1.0, [(4, 12), (6, 11), (1, 10)]), ((9, 16), 1.0, [(9, 17), (9, 14)])]
There are 3 groups
[(9, 16), (9, 14), (9, 17)]
[(17, 11), (17, 9)]
[(6, 11), (1, 10), (4, 12), (3, 11)]
frontline_radius = 0
(11,16) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(17,11) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 41
(11,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  1
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,11) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 40
(10,15) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -31
( 4,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -19
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 25
(10,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 22
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 46
( 7,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 6, 4) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 9,14) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -19
(12,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(13,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 6,11) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -31
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
(15, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs =  0
(15, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
( 6, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 2, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 31
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 9, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(17, 9) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -51
( 5,14) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
(10,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  31  29                              
 2                      29  30  31  32  33  31  29  29  29                      
 3              28  28  30  30  32  33  33  31  32  29  29  27  25              
 4              28  28  29  30  32  34  35  33  31  31  29  24  26              
 5          28  28  30  28  32  32  34  36  35  33  32  28  26  24  25          
 6          30  30  30  31  32  34  36  36  36  35  33  30  28  23  26          
 7      30  30  32  31  33  34  35  36  35  36  36  35  31  28  29  26  28      
 8      30  30  31  31  32  33  34  34  36  34  36  35  33  29  27  29  28      
 9      30  32  29  32  32  30  34  32  33  33  34  35  35  29  25  30  29      
10      30  30  31  30  30  33  29  27  31  32  32  32  30  29  27  25  29      
11      30  30  32  32  31  30  29  30  28  27  32  33  29  25  26  26  29      
12          30  31  32  32  30  28  30  29  31  29  29  30  28  26  26          
13          29  30  30  29  30  32  30  31  30  31  29  28  28  26  28          
14              28  28  31  29  30  32  34  29  27  30  27  27  28              
15              28  28  28  30  31  32  32  32  25  25  29  27  27              
16                      28  30  31  32  31  28  30  26  26                      
17                              30  31  32  29  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 4) - {'options': [(7, 4)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(8, 16)], 'scores': [1]}
(9, 14) - {'options': [(9, 14)], 'scores': [0]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 11) - {'options': [(17, 10)], 'scores': [0]}
(17, 9) - {'options': [(16, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 11) - {'options': [(6, 10)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 12) - {'options': [(5, 12)], 'scores': [0]}
(3, 11) - {'options': [(3, 11)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys returned with {(6, 4): {'options': [(7, 4)], 'scores': [2]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (17, 9): {'options': [(16, 9)], 'scores': [1]}, (6, 11): {'options': [(6, 10)], 'scores': [3]}, (17, 11): {'options': [(17, 10)], 'scores': [0]}, (3, 11): {'options': [(3, 11)], 'scores': [0]}, (9, 16): {'options': [(8, 16)], 'scores': [1]}, (4, 12): {'options': [(5, 12)], 'scores': [0]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}}
-------------------------- running turn 86 ---------------------------
[((9, 17), 0.6666666666666666, [(8, 16), (9, 14)]), ((8, 16), 0.6666666666666666, [(9, 17), (9, 14)]), ((17, 9), 1.0, [(17, 10)]), ((17, 10), 1.0, [(17, 9)])]
There are 2 groups
[(8, 16), (9, 14), (9, 17)]
[(17, 10), (17, 9)]
frontline_radius = 0
(11,16) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -30
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -32
(14, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3,11) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 30
(10,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 19
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(11,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
(10,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 24
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(10, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 40
( 5, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 2, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -46
(12,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 5,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 33
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,17) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -6
( 1,10) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 46
( 8,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 4) (friendly)  vulnerability =  7 attack_ratio = -1 health_diffs = -50
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 9,14) (friendly)  vulnerability =  3 attack_ratio = -2 health_diffs = -72
(17,10) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -31
(10,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -9
( 6,11) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -48
( 5,13) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 9,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
(16,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -34
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(12,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -3
(17, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -94
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
(14, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
(13, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 10
( 8, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  32  30  30                              
 2                      29  30  31  32  32  30  30  30  29                      
 3              28  29  29  30  32  32  32  33  30  30  28  27  27              
 4              29  29  28  29  32  34  34  32  32  30  27  29  26              
 5          29  29  28  30  31  31  34  36  34  33  31  31  25  26  28          
 6          30  31  31  30  31  34  35  37  36  35  33  29  26  29  27          
 7      30  30  32  33  33  33  35  34  37  37  36  34  31  30  25  25  29      
 8      30  30  32  33  33  32  32  35  35  37  37  36  31  27  27  27  27      
 9      30  33  31  30  30  32  29  32  34  36  38  35  32  30  25  27  28      
10      30  29  29  31  29  28  29  30  33  33  33  34  33  26  24  28  28      
11      30  30  31  30  29  30  32  29  31  33  32  30  29  29  28  25  28      
12          30  31  30  30  32  31  31  32  28  30  30  29  28  26  27          
13          29  29  29  32  29  29  32  30  28  26  29  29  27  29  27          
14              29  29  28  29  32  30  29  28  27  26  28  29  27              
15              28  29  29  30  30  30  32  29  24  27  28  28  27              
16                      29  30  30  32  31  28  28  26  27                      
17                              30  31  32  29  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 4) - {'options': [(7, 4)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 14) - {'options': [(9, 15)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 10)], 'scores': [0]}
(17, 9) - {'options': [(17, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 11) - {'options': [(6, 12)], 'scores': [2]}
(5, 12) - {'options': [(5, 13)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 11) - {'options': [(3, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 16) - {'options': [(8, 16)], 'scores': [0]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys returned with {(6, 4): {'options': [(7, 4)], 'scores': [3]}, (9, 14): {'options': [(9, 15)], 'scores': [3]}, (17, 9): {'options': [(17, 9)], 'scores': [0]}, (17, 10): {'options': [(17, 10)], 'scores': [0]}, (5, 12): {'options': [(5, 13)], 'scores': [2]}, (3, 11): {'options': [(3, 12)], 'scores': [0]}, (6, 11): {'options': [(6, 12)], 'scores': [2]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (8, 16): {'options': [(8, 16)], 'scores': [0]}}
-------------------------- running turn 87 ---------------------------
[((6, 12), 0.5, [(5, 12)]), ((3, 12), 0.6666666666666666, [(5, 12), (6, 12)]), ((17, 9), 1.0, [(17, 10)]), ((17, 10), 1.0, [(17, 9)]), ((5, 12), 1.0, [(6, 12)]), ((9, 17), 1.0, [(8, 16), (9, 15)]), ((8, 16), 1.0, [(9, 17), (9, 15)])]
There are 3 groups
[(6, 12), (5, 12), (3, 12)]
[(17, 10), (17, 9)]
[(8, 16), (9, 17), (9, 15)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 31
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -18
(12,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(10,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(11,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -69
( 5,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(10,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 3,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 9,17) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 1,10) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 46
( 8,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(14,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(17,10) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -73
(10,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
( 9, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 40
( 5,13) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -12
(13, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 26
(13, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 6,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -30
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 6, 5) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -28
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 2, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -46
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(10,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -31
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(17, 9) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -91
( 7, 4) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  0
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 7, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  31  31  31  30                              
 2                      29  30  31  31  31  31  31  30  29                      
 3              28  29  29  30  31  31  34  31  31  31  30  28  28              
 4              29  29  28  29  32  33  33  33  33  32  29  27  28              
 5          29  29  28  30  31  31  34  35  35  34  31  27  28  26  28          
 6          30  31  31  30  31  33  36  37  36  34  31  30  27  25  27          
 7      30  30  32  33  32  33  33  36  38  37  36  34  29  27  29  26  28      
 8      30  30  32  32  31  31  34  35  38  38  37  35  32  28  26  27  28      
 9      30  33  30  29  31  28  32  34  38  39  37  35  34  28  27  26  27      
10      30  29  29  30  28  29  30  30  35  36  37  33  31  30  24  25  27      
11      30  30  31  30  28  30  28  31  34  31  32  33  30  27  24  27  27      
12          30  31  30  30  31  29  30  28  30  27  31  28  28  28  24          
13          29  29  29  32  29  28  30  28  28  27  27  29  28  27  27          
14              29  29  28  29  32  29  30  24  27  27  30  29  28              
15              28  29  29  30  30  30  30  27  26  27  29  29  28              
16                      29  30  30  31  30  29  25  28  29                      
17                              30  31  31  28  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(6, 12)], 'scores': [0]}
(5, 12) - {'options': [(5, 13)], 'scores': [2]}
(3, 12) - {'options': [(3, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 10)], 'scores': [0]}
(17, 9) - {'options': [(17, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 16) - {'options': [(8, 17)], 'scores': [0]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
(9, 15) - {'options': [(9, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 4) - {'options': [(8, 4)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys returned with {(3, 12): {'options': [(3, 12)], 'scores': [0]}, (17, 9): {'options': [(17, 8)], 'scores': [1]}, (9, 15): {'options': [(9, 16)], 'scores': [0]}, (17, 10): {'options': [(17, 10)], 'scores': [0]}, (5, 12): {'options': [(5, 13)], 'scores': [2]}, (7, 4): {'options': [(8, 4)], 'scores': [1]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (6, 12): {'options': [(6, 12)], 'scores': [0]}, (8, 16): {'options': [(8, 17)], 'scores': [0]}}
-------------------------- running turn 88 ---------------------------
[((3, 12), 0.5, [(5, 12)]), ((6, 12), 0.5, [(5, 12)]), ((8, 17), 0.6666666666666666, [(9, 17), (9, 16)]), ((5, 12), 1.0, [(6, 12)]), ((9, 16), 1.0, [(9, 17)]), ((9, 17), 1.0, [(8, 17), (9, 16)])]
There are 2 groups
[(6, 12), (5, 12), (3, 12)]
[(8, 17), (9, 16), (9, 17)]
frontline_radius = 0
(11,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -4
( 5, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 7,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -6
(14, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 2, 9) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -46
(12,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
(11,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -18
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 1,10) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 46
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 9,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
(17,10) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -77
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 5,13) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -14
( 9,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 9,16) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -77
(17, 8) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -74
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,12) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -26
( 7, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 20
( 4,11) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -64
(16,10) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -1
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 8, 3) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(10,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -23
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 37
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(10,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 6, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 3,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
( 9,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 8, 4) (friendly)  vulnerability = 10 attack_ratio =  0 health_diffs =  0
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      28  30  30  30  32  32  31  30  29                      
 3              28  28  28  28  30  33  32  32  32  31  30  29  27              
 4              28  28  30  28  30  32  34  34  33  32  31  29  26              
 5          29  30  29  28  32  31  33  36  35  34  33  30  28  28  26          
 6          30  31  32  31  31  32  35  37  36  35  33  30  28  28  26          
 7      30  30  32  33  33  31  36  34  37  37  35  33  34  28  25  26  29      
 8      30  30  32  34  33  32  33  34  37  38  37  35  30  28  27  27  27      
 9      30  33  32  31  31  33  30  35  35  37  38  35  31  30  23  25  28      
10      30  30  30  29  31  30  27  31  35  35  34  34  32  24  23  24  26      
11      30  29  30  32  27  28  33  28  30  34  34  31  29  27  25  24  26      
12          30  30  29  29  30  30  30  31  29  33  30  29  29  26  26          
13          29  29  28  32  31  28  28  31  27  28  32  30  29  29  28          
14              29  29  29  29  29  30  27  29  27  29  30  30  29              
15              28  29  28  29  31  28  27  28  26  28  30  29  28              
16                      29  29  29  29  29  27  28  27  28                      
17                              29  31  31  27  27                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 9)], 'scores': [2]}
(17, 8) - {'options': [(17, 7)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(6, 13)], 'scores': [1]}
(5, 12) - {'options': [(5, 13)], 'scores': [3]}
(3, 12) - {'options': [(3, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 17)], 'scores': [0]}
(9, 16) - {'options': [(9, 16)], 'scores': [0]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 4) - {'options': [(9, 4)], 'scores': [2]}
settle_sys returned with {(17, 8): {'options': [(17, 7)], 'scores': [2]}, (3, 12): {'options': [(3, 12)], 'scores': [0]}, (17, 10): {'options': [(17, 9)], 'scores': [2]}, (5, 12): {'options': [(5, 13)], 'scores': [3]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 16)], 'scores': [0]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (8, 17): {'options': [(8, 17)], 'scores': [0]}, (6, 12): {'options': [(6, 13)], 'scores': [1]}, (8, 4): {'options': [(9, 4)], 'scores': [2]}}
-------------------------- running turn 89 ---------------------------
[((3, 12), 0.5, [(5, 12)]), ((17, 7), 0.5, [(17, 9)]), ((8, 17), 1.0, [(9, 17), (9, 16)]), ((9, 16), 1.0, [(9, 17)]), ((9, 17), 1.0, [(8, 17), (9, 16)])]
There are 3 groups
[(5, 12), (3, 12)]
[(17, 9), (17, 7)]
[(8, 17), (9, 16), (9, 17)]
frontline_radius = 0
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(17, 7) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -37
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 18
( 5,13) (enemy)     vulnerability =  3 attack_ratio = -1 health_diffs = -14
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 36
( 7,16) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -45
(11,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 2, 9) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -46
( 5,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -18
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(10,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 9,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs =  8
( 1,10) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 46
( 8,15) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 17
(11,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 9,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 22
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 9,16) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -109
( 7, 5) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  9
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 4,11) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -55
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 8, 3) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 3,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
(17, 9) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -95
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(10,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -22
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 18
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 6,13) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = -11
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 7, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 8, 4) (friendly)  vulnerability = 11 attack_ratio = -1 health_diffs = -40
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  29  30  30  32  32  31  30  29                      
 3              28  29  29  28  28  33  32  32  32  31  30  28  28              
 4              29  29  29  31  27  30  34  34  33  32  30  27  28              
 5          29  30  31  30  28  31  31  35  35  34  32  29  28  26  28          
 6          30  31  32  32  30  33  33  36  36  35  33  29  27  25  27          
 7      30  30  32  33  33  34  32  36  38  37  36  34  30  28  27  25  28      
 8      30  30  32  33  32  33  34  37  39  38  37  36  34  27  24  27  28      
 9      30  33  31  30  32  30  35  36  38  39  38  37  34  28  26  25  27      
10      30  30  30  28  30  31  29  31  35  36  37  35  32  29  24  23  26      
11      30  29  30  32  26  28  30  30  31  31  33  35  32  26  22  26  27      
12          30  30  29  29  30  29  29  29  31  29  31  30  29  27  24          
13          29  29  28  32  31  31  29  28  27  30  30  30  28  27  27          
14              29  29  29  31  30  29  31  24  27  28  30  29  28              
15              28  29  29  29  28  30  26  26  26  27  29  29  28              
16                      28  28  30  27  27  29  25  28  29                      
17                              28  29  31  28  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 12) - {'options': [(5, 13)], 'scores': [3]}
(3, 12) - {'options': [(3, 12)], 'scores': [0]}
(6, 13) - {'options': [(7, 13)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 8)], 'scores': [1]}
(17, 7) - {'options': [(17, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 17)], 'scores': [0]}
(9, 16) - {'options': [(10, 16)], 'scores': [2]}
(9, 17) - {'options': [(9, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(1, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 4) - {'options': [(9, 4)], 'scores': [4]}
settle_sys returned with {(3, 12): {'options': [(3, 12)], 'scores': [0]}, (17, 9): {'options': [(17, 8)], 'scores': [1]}, (17, 7): {'options': [(17, 7)], 'scores': [0]}, (5, 12): {'options': [(5, 13)], 'scores': [3]}, (1, 10): {'options': [(1, 10)], 'scores': [0]}, (9, 16): {'options': [(10, 16)], 'scores': [2]}, (9, 17): {'options': [(9, 17)], 'scores': [0]}, (6, 13): {'options': [(7, 13)], 'scores': [0]}, (8, 17): {'options': [(8, 17)], 'scores': [0]}, (8, 4): {'options': [(9, 4)], 'scores': [4]}}
-------------------------- running turn 90 ---------------------------
[((3, 12), 0.5, [(5, 12)]), ((6, 13), 0.5, [(5, 12)]), ((17, 7), 0.5, [(17, 8)]), ((8, 17), 0.5, [(9, 17)]), ((9, 17), 0.5, [(8, 17)]), ((17, 8), 1.0, [(17, 7)]), ((5, 12), 1.0, [(3, 12), (6, 13)])]
There are 3 groups
[(5, 12), (3, 12), (6, 13)]
[(17, 8), (17, 7)]
[(8, 17), (9, 17)]
frontline_radius = 0
(11,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 6, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(17, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -37
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(17, 8) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -77
(10,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,16) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -45
( 9, 4) (friendly)  vulnerability = 11 attack_ratio =  0 health_diffs =  0
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 2, 9) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = -46
(12,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 5,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -1
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 13
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 1,10) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 46
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 8,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
( 6,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -19
(10,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 9,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 7, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 7,12) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 18
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
( 3,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 30
( 4,11) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -55
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 24
( 8, 3) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 5,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  9
(10,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -13
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 27
( 5,14) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs = 11
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
(10,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 6,13) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -41
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              10   9  10  10  10                              
 2                      10   9  30  30  32  32  31  10  10                      
 3               0  10  29  28  28  33  32  32  32  31  30  10  -1              
 4              10  29  29  31  28  29  34  34  33  32  31  29   7              
 5          10  30  31  30  29  32  30  34  35  34  33  31  28  27   7          
 6          10  31  32  33  31  31  35  35  35  35  34  32  27  26   5          
 7      10  30  32  33  34  34  34  34  37  37  36  35  32  26  25  24   8      
 8       9  30  32  34  33  34  34  34  37  38  37  35  31  28  23  25   6      
 9       8  33  32  31  32  33  31  34  35  37  38  36  33  29  21  25   6      
10       9  30  30  30  31  27  29  32  35  35  36  36  32  25  24  24   5      
11      10  29  30  31  28  30  29  30  34  35  36  33  31  28  25  24   6      
12          10  30  30  28  30  33  32  31  32  33  32  31  29  26   6          
13          10  30  29  30  30  31  29  31  28  28  32  30  29  29   9          
14               9  28  31  30  28  28  28  26  26  29  30  30  10              
15               0   9  28  28  28  30  25  25  26  28  30  10   0              
16                       8   8  30  27  26  27  28   7   9                      
17                               8   8   9   6   7                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(16, 8)], 'scores': [19]}
(17, 7) - {'options': [(16, 7)], 'scores': [16]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 12) - {'options': [(6, 12)], 'scores': [2]}
(3, 12) - {'options': [(4, 12)], 'scores': [0]}
(6, 13) - {'options': [(7, 13)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [19]}
(9, 17) - {'options': [(9, 16)], 'scores': [17]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 4) - {'options': [(9, 5)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(1, 10) - {'options': [(2, 10)], 'scores': [21]}
settle_sys returned with {(17, 8): {'options': [(16, 8)], 'scores': [19]}, (3, 12): {'options': [(4, 12)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [0]}, (17, 7): {'options': [(16, 7)], 'scores': [16]}, (5, 12): {'options': [(6, 12)], 'scores': [2]}, (1, 10): {'options': [(2, 10)], 'scores': [21]}, (9, 17): {'options': [(9, 16)], 'scores': [17]}, (6, 13): {'options': [(7, 13)], 'scores': [1]}, (8, 17): {'options': [(8, 16)], 'scores': [19]}}
-------------------------- running turn 91 ---------------------------
[((14, 15), 0.3333333333333333, [(15, 15)]), ((15, 15), 0.3333333333333333, [(14, 15)]), ((9, 16), 1.0, [(8, 16)]), ((8, 16), 1.0, [(9, 16)])]
There are 2 groups
[(14, 15), (15, 15)]
[(9, 16), (8, 16)]
frontline_radius = 0
(17, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -5
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs = -15
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 12
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs = -13
( 4,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 21
( 7,16) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -27
(11,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 37
( 8, 5) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 19
(16, 7) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -138
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 7, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -23
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -22
( 8, 1) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(10,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 10
( 9,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 8,16) (friendly)  vulnerability =  1 attack_ratio = -2 health_diffs = -104
(15,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -41
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(14,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(12,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 6,11) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -2
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(17, 9) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -104
( 2,10) (friendly)  vulnerability =  4 attack_ratio = -1 health_diffs = -4
( 9,16) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -78
(14,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 21
( 9, 5) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -19
( 6,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -73
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 22
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 4,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -21
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 8, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 2, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -46
( 5,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,16) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -3
( 7,13) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -64
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,14) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 23
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 4, 3) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,17) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(16,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      28  30  29  30  32  32  31  30  29                      
 3              26  29  28  28  28  31  32  32  32  31  30  28  28              
 4              28  28  29  30  30  28  32  34  33  32  30  27  28              
 5          29  30  30  32  30  28  32  34  34  34  32  29  28  26  28          
 6          30  31  32  32  32  33  32  35  36  35  33  29  27  24  27          
 7      30  30  32  33  34  34  33  35  38  37  36  34  30  27  25  23  26      
 8      29  30  32  34  34  34  34  37  39  38  37  36  33  25  24  23  27      
 9      28  32  32  32  32  31  36  36  38  39  38  37  34  28  26  24  25      
10      30  28  29  29  31  30  27  32  36  36  37  35  33  31  23  25  26      
11      28  28  30  31  26  27  27  30  34  32  34  35  32  27  24  26  27      
12          30  30  30  28  28  30  26  30  35  32  31  30  29  27  22          
13          29  30  29  30  29  28  30  30  31  29  30  30  27  25  27          
14              28  28  31  29  26  29  28  26  29  29  28  28  27              
15              28  28  28  28  25  27  29  25  27  26  28  29  28              
16                      27  27  28  24  27  30  26  27  29                      
17                              28  27  29  29  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 8)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 16) - {'options': [(5, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 1) - {'options': [(9, 1)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
(7, 13) - {'options': [(8, 13)], 'scores': [2]}
(4, 12) - {'options': [(4, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 10) - {'options': [(2, 9)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(10, 16)], 'scores': [3]}
(8, 16) - {'options': [(7, 16)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 15) - {'options': [(14, 15)], 'scores': [0]}
(15, 15) - {'options': [(15, 15)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 5) - {'options': [(9, 6)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 7) - {'options': [(16, 6)], 'scores': [4]}
settle_sys returned with {(17, 9): {'options': [(17, 8)], 'scores': [2]}, (5, 16): {'options': [(5, 15)], 'scores': [1]}, (8, 1): {'options': [(9, 1)], 'scores': [2]}, (7, 13): {'options': [(8, 13)], 'scores': [2]}, (2, 10): {'options': [(2, 9)], 'scores': [4]}, (9, 16): {'options': [(10, 16)], 'scores': [3]}, (4, 12): {'options': [(4, 11)], 'scores': [1]}, (14, 15): {'options': [(14, 15)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [1]}, (6, 12): {'options': [(7, 12)], 'scores': [2]}, (8, 16): {'options': [(7, 16)], 'scores': [4]}, (15, 15): {'options': [(15, 15)], 'scores': [0]}, (16, 7): {'options': [(16, 6)], 'scores': [4]}}
-------------------------- running turn 92 ---------------------------
[((14, 15), 0.5, [(15, 15)]), ((15, 15), 0.5, [(14, 15)])]
There are 1 groups
[(14, 15), (15, 15)]
frontline_radius = 0
(16, 6) (friendly)  vulnerability =  4 attack_ratio = -2 health_diffs = -81
(17, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 17
(15,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 11
( 9, 1) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs =  9
( 6, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(10,15) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -4
( 4,12) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = 16
( 7,16) (friendly)  vulnerability =  2 attack_ratio = -2 health_diffs = -54
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -1
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 17
( 8,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
( 7,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -27
( 2, 9) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -4
( 9,15) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs = 33
( 4, 4) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(13, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
(15,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -18
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(10,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -27
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 9,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 9,16) (friendly)  vulnerability =  2 attack_ratio = -3 health_diffs = -109
( 5,15) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 18
(14,15) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 45
( 1, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  0
( 7,12) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = -41
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -22
(16,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 31
(17, 9) (friendly)  vulnerability =  4 attack_ratio = -3 health_diffs = -121
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
(13,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -45
(10,16) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 15
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 21
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 12
( 5,14) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -18
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs =  5
( 3, 9) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 7,17) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 18
( 9, 5) (friendly)  vulnerability =  4 attack_ratio = -2 health_diffs = -107
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 9,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              30  30  32  31  30                              
 2                      29  30  30  29  32  32  31  30  29                      
 3              27  27  29  30  29  30  31  32  32  31  30  29  27              
 4              27  30  29  30  29  29  31  33  33  32  31  29  26              
 5          29  29  29  31  32  30  30  32  34  34  33  30  28  27  26          
 6          30  31  31  33  33  32  33  34  35  35  33  30  26  27  25          
 7      29  31  31  33  34  34  35  33  37  37  35  33  32  25  26  24  26      
 8      29  30  31  32  34  34  34  34  37  38  37  34  30  29  22  25  28      
 9      31  29  32  29  31  35  31  34  35  37  38  36  32  31  23  26  26      
10      29  29  28  30  28  29  32  31  34  35  36  36  33  27  27  25  26      
11      29  30  27  29  31  30  31  28  32  35  36  35  33  28  27  23  27      
12          30  30  28  29  32  30  30  33  32  34  34  31  27  23  27          
13          29  30  29  29  31  29  29  28  30  33  31  27  28  26  24          
14              28  28  31  28  26  26  25  29  29  29  30  25  25              
15              28  28  27  27  27  25  26  26  27  29  28  27  27              
16                      28  28  26  25  27  28  28  29  28                      
17                              29  28  29  28  29                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(16, 6) - {'options': [(15, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(9, 2)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 9) - {'options': [(3, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 12) - {'options': [(6, 12)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 15) - {'options': [(5, 14)], 'scores': [4]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 16) - {'options': [(9, 17)], 'scores': [2]}
(7, 16) - {'options': [(7, 17)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 12) - {'options': [(3, 12)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(14, 15) - {'options': [(13, 15)], 'scores': [1]}
(15, 15) - {'options': [(14, 15)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 8)], 'scores': [2]}
settle_sys returned with {(16, 6): {'options': [(15, 6)], 'scores': [2]}, (4, 12): {'options': [(3, 12)], 'scores': [2]}, (9, 1): {'options': [(9, 2)], 'scores': [0]}, (2, 9): {'options': [(3, 9)], 'scores': [3]}, (7, 12): {'options': [(6, 12)], 'scores': [2]}, (14, 15): {'options': [(13, 15)], 'scores': [1]}, (9, 16): {'options': [(9, 17)], 'scores': [2]}, (5, 15): {'options': [(5, 14)], 'scores': [4]}, (7, 16): {'options': [(7, 17)], 'scores': [3]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (15, 15): {'options': [(14, 15)], 'scores': [0]}, (17, 9): {'options': [(17, 8)], 'scores': [2]}}
-------------------------- running turn 93 ---------------------------
[((14, 15), 0.5, [(13, 15)]), ((13, 15), 1.0, [(14, 15)])]
There are 1 groups
[(13, 15), (14, 15)]
frontline_radius = 0
(17, 8) (friendly)  vulnerability =  4 attack_ratio = -2 health_diffs = -94
(15,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(17, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 17
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 7,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 22
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
(15, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -16
( 4, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -46
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 9,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = -41
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 9,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 9,17) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -65
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 8,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 31
( 5, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(14,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 9,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
( 8, 2) (enemy)     vulnerability =  3 attack_ratio =  0 health_diffs = -19
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(13,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 35
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs =  5
( 3, 9) (friendly)  vulnerability =  3 attack_ratio = -1 health_diffs = 37
(14,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 45
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 21
( 8,17) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  1
( 6,12) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  2
( 9, 6) (friendly)  vulnerability =  4 attack_ratio = -1 health_diffs = -66
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -22
( 7, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,12) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs = 22
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9, 2) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 19
(10,16) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 15
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 12
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 45
( 7, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,14) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs = -85
(15, 6) (friendly)  vulnerability =  4 attack_ratio = -3 health_diffs = -131
( 5,15) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 16
( 7,17) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = -18
(11,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  29  31  31  30                              
 2                      28  29  28  32  31  31  31  30  29                      
 3              28  28  28  29  29  29  33  33  32  31  30  29  27              
 4              28  28  30  28  31  28  33  34  33  32  31  28  27              
 5          29  30  30  30  30  29  32  33  34  34  33  30  26  28  27          
 6          30  31  32  32  33  31  34  34  35  35  33  30  28  23  25          
 7      30  31  32  32  34  35  34  34  37  37  36  34  30  28  23  22  28      
 8      30  32  31  32  34  34  34  36  39  38  37  36  33  25  25  24  25      
 9      30  30  30  33  31  31  35  35  38  39  38  37  34  28  26  25  26      
10      30  28  30  26  27  32  32  30  35  37  37  35  33  32  23  25  27      
11      28  28  27  29  31  28  27  31  34  34  35  35  33  28  24  27  27      
12          30  29  29  29  31  29  30  28  33  35  34  30  26  27  24          
13          29  30  29  29  30  28  27  29  31  32  31  27  27  26  24          
14              28  28  30  28  29  23  28  28  29  29  30  25  24              
15              28  28  28  28  27  27  27  25  30  28  27  27  27              
16                      28  30  28  26  26  30  27  28  28                      
17                              28  30  28  28  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(17, 7)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 12) - {'options': [(2, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 3)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 15) - {'options': [(13, 14)], 'scores': [3]}
(14, 15) - {'options': [(13, 15)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(15, 6) - {'options': [(15, 5)], 'scores': [5]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 15) - {'options': [(5, 14)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 17) - {'options': [(8, 17)], 'scores': [2]}
(7, 17) - {'options': [(7, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(6, 12)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 9) - {'options': [(4, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 6) - {'options': [(9, 7)], 'scores': [3]}
settle_sys returned with {(17, 8): {'options': [(17, 7)], 'scores': [3]}, (3, 12): {'options': [(2, 12)], 'scores': [1]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (13, 15): {'options': [(13, 14)], 'scores': [3]}, (15, 6): {'options': [(15, 5)], 'scores': [5]}, (5, 15): {'options': [(5, 14)], 'scores': [2]}, (14, 15): {'options': [(13, 15)], 'scores': [0]}, (9, 17): {'options': [(8, 17)], 'scores': [2]}, (7, 17): {'options': [(7, 16)], 'scores': [0]}, (6, 12): {'options': [(6, 12)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [3]}, (9, 6): {'options': [(9, 7)], 'scores': [3]}}
-------------------------- running turn 94 ---------------------------
[((13, 15), 0.5, [(14, 15)]), ((14, 15), 0.5, [(13, 15)]), ((7, 17), 0.5, [(8, 17)]), ((8, 17), 1.0, [(7, 17)])]
There are 2 groups
[(13, 15), (14, 15)]
[(8, 17), (7, 17)]
frontline_radius = 0
(11,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 7, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
(15,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -46
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 37
( 7,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -18
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 2,12) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 33
( 7,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 37
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(15, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 8, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(16, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
( 6,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  0
( 8,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 4, 9) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = 37
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
( 9,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(17, 7) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = -57
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 26
( 8,16) (enemy)     vulnerability =  2 attack_ratio = -1 health_diffs =  1
( 9, 7) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -26
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -20
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -41
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -2
(10,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 40
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 2,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 5,15) (friendly)  vulnerability =  4 attack_ratio = -1 health_diffs = -6
(14,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -33
( 6,12) (friendly)  vulnerability =  4 attack_ratio = -2 health_diffs = -62
( 6, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 11
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9, 2) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 20
(10,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 32
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 12
( 7,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 11
( 5,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -16
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 9,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  31  31  30                              
 2                      29  27  27  31  31  31  31  30  29                      
 3              28  29  28  27  30  28  32  33  32  31  30  29  27              
 4              29  29  29  31  28  28  34  34  33  32  30  29  27              
 5          29  30  31  31  30  29  33  33  34  34  32  28  28  29  26          
 6          30  31  32  33  32  32  34  34  35  34  31  31  26  25  25          
 7      30  31  32  33  33  34  35  34  37  37  35  32  30  24  25  26  26      
 8      31  31  33  32  32  32  36  36  39  38  37  34  29  28  21  25  27      
 9      31  31  31  29  31  33  32  36  39  39  38  36  31  29  24  26  28      
10      29  31  28  28  25  29  30  35  36  37  37  36  33  26  27  25  29      
11      29  28  27  29  28  27  31  30  33  35  36  35  31  26  27  27  29      
12          29  30  28  29  28  28  30  34  31  33  32  28  27  23  27          
13          29  30  29  27  28  29  27  28  34  31  29  28  25  25  26          
14              28  27  29  27  24  28  29  29  31  31  28  25  26              
15              28  28  26  26  27  25  30  27  28  30  29  28  27              
16                      28  27  27  28  26  28  29  27  28                      
17                              28  29  29  28  27                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 9) - {'options': [(4, 8)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 7) - {'options': [(17, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 3)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 15) - {'options': [(12, 15)], 'scores': [1]}
(14, 15) - {'options': [(13, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 15) - {'options': [(5, 14)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(3, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(9, 17)], 'scores': [0]}
(7, 17) - {'options': [(8, 17)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(6, 12) - {'options': [(5, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 7) - {'options': [(9, 8)], 'scores': [2]}
settle_sys returned with {(4, 9): {'options': [(4, 8)], 'scores': [3]}, (17, 7): {'options': [(17, 8)], 'scores': [1]}, (9, 2): {'options': [(9, 3)], 'scores': [1]}, (13, 15): {'options': [(12, 15)], 'scores': [1]}, (5, 15): {'options': [(5, 14)], 'scores': [3]}, (14, 15): {'options': [(13, 15)], 'scores': [1]}, (2, 12): {'options': [(3, 12)], 'scores': [1]}, (7, 17): {'options': [(8, 17)], 'scores': [1]}, (8, 17): {'options': [(9, 17)], 'scores': [0]}, (6, 12): {'options': [(5, 12)], 'scores': [1]}, (9, 7): {'options': [(9, 8)], 'scores': [2]}}
-------------------------- running turn 95 ---------------------------
[((13, 15), 0.5, [(12, 15)]), ((7, 17), 0.5, [(8, 17)]), ((12, 15), 1.0, [(13, 15)]), ((8, 17), 1.0, [(7, 17)])]
There are 2 groups
[(12, 15), (13, 15)]
[(8, 17), (7, 17)]
frontline_radius = 0
(17, 8) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = -65
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 8,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(13,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 14
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -22
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(10,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 32
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(13, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
( 7,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(16, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 6,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
(15,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 5,14) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -6
(13,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 37
( 3,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
( 6,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 8, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 8,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  0
(11,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -20
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -2
( 8,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(13,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 5,13) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -24
( 9,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 42
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 9, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 8,17) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = -82
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 2,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 9,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
(12,15) (friendly)  vulnerability =  1 attack_ratio =  0 health_diffs = 27
( 3,12) (friendly)  vulnerability =  2 attack_ratio =  0 health_diffs = 22
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 8,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 9, 2) (friendly)  vulnerability =  6 attack_ratio = -1 health_diffs = -30
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 7, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 7,17) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = -8
(11,15) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -27
( 5,12) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -4
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              29  28  31  31  30                              
 2                      29  29  27  30  30  31  31  30  29                      
 3              28  29  30  29  27  30  30  32  32  31  30  29  28              
 4              29  30  30  30  32  27  31  33  33  32  31  29  28              
 5          29  30  31  32  32  30  29  35  33  33  33  31  27  26  27          
 6          30  31  32  33  32  32  35  33  34  35  33  28  27  24  23          
 7      30  31  32  33  33  33  34  35  36  37  36  33  28  25  22  24  26      
 8      31  31  32  33  32  35  35  36  39  38  36  34  33  24  24  26  27      
 9      31  30  30  33  31  32  35  38  40  39  38  36  33  28  26  26  30      
10      28  29  28  26  30  31  31  33  38  38  37  35  29  29  26  28  28      
11      28  26  28  27  28  27  30  32  33  36  35  33  28  27  24  26  29      
12          28  28  29  28  27  27  29  31  33  32  30  28  22  27  27          
13          29  28  29  29  26  26  28  31  29  31  27  27  26  25  27          
14              29  28  27  29  26  26  30  29  28  29  27  27  27              
15              28  29  27  27  29  26  26  30  29  28  28  28  28              
16                      29  27  26  29  30  26  27  29  29                      
17                              28  28  29  29  29                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 8) - {'options': [(17, 9)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 14) - {'options': [(6, 14)], 'scores': [2]}
(5, 12) - {'options': [(5, 13)], 'scores': [1]}
(3, 12) - {'options': [(4, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 8) - {'options': [(4, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 2) - {'options': [(9, 1)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 8) - {'options': [(9, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 15) - {'options': [(11, 15)], 'scores': [1]}
(13, 15) - {'options': [(13, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [1]}
(7, 17) - {'options': [(8, 17)], 'scores': [0]}
settle_sys returned with {(17, 8): {'options': [(17, 9)], 'scores': [3]}, (3, 12): {'options': [(4, 12)], 'scores': [1]}, (4, 8): {'options': [(4, 7)], 'scores': [0]}, (9, 2): {'options': [(9, 1)], 'scores': [1]}, (9, 8): {'options': [(9, 9)], 'scores': [1]}, (13, 15): {'options': [(13, 16)], 'scores': [1]}, (12, 15): {'options': [(11, 15)], 'scores': [1]}, (5, 14): {'options': [(6, 14)], 'scores': [2]}, (7, 17): {'options': [(8, 17)], 'scores': [0]}, (8, 17): {'options': [(8, 16)], 'scores': [1]}, (5, 12): {'options': [(5, 13)], 'scores': [1]}}
-------------------------- running turn 96 ---------------------------
[((13, 16), 0.3333333333333333, [(12, 15)]), ((5, 13), 1.0, [(5, 14)]), ((5, 14), 1.0, [(5, 13)])]
There are 2 groups
[(12, 15), (13, 16)]
[(5, 14), (5, 13)]
frontline_radius = 0
( 7, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 7) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(15,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  5
( 5, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  4
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 17
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -22
( 9, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(15, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(16, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 6,14) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  1
( 8,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 14
( 8, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 40
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
(14, 5) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 8,10) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -1
(13,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,13) (enemy)     vulnerability =  2 attack_ratio = -2 health_diffs = -35
(15,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
( 7,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
(14,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 8,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  3
(13,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 4,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(11,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 18
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -20
( 6,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(10,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 29
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(12,15) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -23
( 5,13) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
( 9,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 7,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 30
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -19
(17, 9) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = -57
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,12) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -40
( 6, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
(10,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 32
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 9, 9) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  1
( 5,14) (friendly)  vulnerability =  1 attack_ratio = -1 health_diffs = -34
(14,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,13) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  3
( 7,17) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -3
( 9, 1) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 20
(11,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -27
(14, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 27
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  28  31  31  30                              
 2                      29  28  26  29  29  31  31  30  29                      
 3              28  29  29  28  29  28  28  31  32  31  30  28  27              
 4              29  30  31  31  29  28  34  32  32  32  30  27  26              
 5          29  30  31  32  33  33  32  34  34  34  32  29  29  27  25          
 6          30  31  32  33  33  34  34  35  36  35  33  32  27  25  25          
 7      30  31  32  33  32  32  33  37  36  36  35  33  31  26  26  26  26      
 8      31  32  33  31  31  35  33  34  38  37  35  35  30  28  22  25  27      
 9      32  32  31  30  34  31  33  35  39  39  37  34  30  30  26  27  28      
10      30  28  27  30  28  28  33  36  36  37  37  34  32  27  27  27  30      
11      27  28  27  26  27  31  29  32  37  36  35  33  31  26  28  28  29      
12          27  26  26  28  27  32  32  35  34  33  31  27  27  25  27          
13          27  27  29  27  28  27  30  33  34  28  29  28  23  26  27          
14              28  27  27  28  25  31  30  27  30  27  26  27  25              
15              28  28  28  26  29  26  27  26  29  28  27  27  26              
16                      29  27  26  27  29  28  25  28  29                      
17                              28  28  28  28  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 15) - {'options': [(11, 15)], 'scores': [1]}
(13, 16) - {'options': [(13, 16)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 12) - {'options': [(2, 12)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 10)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 14) - {'options': [(5, 15)], 'scores': [1]}
(5, 13) - {'options': [(4, 13)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 7) - {'options': [(4, 7)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(7, 17) - {'options': [(8, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(9, 1)], 'scores': [0]}
settle_sys returned with {(12, 15): {'options': [(11, 15)], 'scores': [1]}, (3, 12): {'options': [(2, 12)], 'scores': [1]}, (17, 9): {'options': [(17, 10)], 'scores': [2]}, (4, 7): {'options': [(4, 7)], 'scores': [0]}, (13, 16): {'options': [(13, 16)], 'scores': [0]}, (5, 13): {'options': [(4, 13)], 'scores': [2]}, (5, 14): {'options': [(5, 15)], 'scores': [1]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 17): {'options': [(8, 17)], 'scores': [0]}, (9, 1): {'options': [(9, 1)], 'scores': [0]}}
-------------------------- running turn 97 ---------------------------
[]
There are 0 groups
frontline_radius = 0
(11,16) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  0
( 4, 7) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 46
( 9, 1) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 20
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = 17
( 2,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 34
(16,11) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  7
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,15) (enemy)     vulnerability =  1 attack_ratio =  3 health_diffs = -27
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
( 2,12) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = -34
(11,14) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 18
(16, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 6,14) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs =  9
(15,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 31
( 9,15) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  3
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -1
(13,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,14) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = -3
( 7, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 8,16) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 11
( 7,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -20
( 5,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(17,10) (friendly)  vulnerability =  9 attack_ratio = -1 health_diffs = -44
( 9, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(14, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 5,15) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -9
( 8,17) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = -11
( 6,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 5, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -46
( 4,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 5,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(13,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  7 attack_ratio = -1 health_diffs = -39
(11, 8) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 27
(15, 6) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 26
( 6,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(11,15) (friendly)  vulnerability =  3 attack_ratio = -3 health_diffs = -84
( 8, 4) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              27  28  30  31  30                              
 2                      28  27  29  28  28  30  31  30  29                      
 3              28  29  30  30  27  26  32  31  31  31  30  29  28              
 4              29  30  31  31  30  32  31  32  33  32  31  29  28              
 5          29  30  31  32  32  33  33  34  35  34  33  31  27  27  27          
 6          30  31  32  31  32  34  34  37  36  34  33  29  28  26  24          
 7      30  31  32  31  30  34  32  34  37  36  34  33  31  28  22  25  27      
 8      31  32  31  32  33  30  31  36  36  35  37  34  32  27  26  26  26      
 9      32  31  32  31  30  32  36  33  37  38  36  36  35  29  26  27  29      
10      29  28  30  27  30  30  32  36  37  37  36  35  31  32  27  24  28      
11      28  29  25  28  29  28  32  35  37  37  36  34  31  26  25  28  28      
12          28  28  28  26  30  31  34  37  35  33  32  30  24  27  26          
13          28  30  29  27  28  27  33  34  31  31  29  25  26  25  26          
14              29  29  27  26  28  27  28  29  28  26  26  26  24              
15              28  29  28  25  27  25  29  27  24  27  27  25  27              
16                      29  27  26  30  27  25  29  28  27                      
17                              28  29  30  29  28                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 7) - {'options': [(3, 7)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 1) - {'options': [(10, 1)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(9, 9) - {'options': [(10, 9)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(13, 16) - {'options': [(12, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(5, 15) - {'options': [(4, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 16)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 15) - {'options': [(11, 16)], 'scores': [5]}
settle_sys returned with {(4, 7): {'options': [(3, 7)], 'scores': [1]}, (9, 1): {'options': [(10, 1)], 'scores': [1]}, (17, 10): {'options': [(17, 9)], 'scores': [1]}, (9, 9): {'options': [(10, 9)], 'scores': [1]}, (13, 16): {'options': [(12, 16)], 'scores': [1]}, (5, 15): {'options': [(4, 15)], 'scores': [1]}, (2, 12): {'options': [(2, 11)], 'scores': [1]}, (8, 17): {'options': [(8, 16)], 'scores': [1]}, (11, 15): {'options': [(11, 16)], 'scores': [5]}}
-------------------------- running turn 98 ---------------------------
[]
There are 0 groups
frontline_radius = 0
(11,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -31
( 7, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(13,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  9
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
(12,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -5
( 4,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 2,12) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -35
(11,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 42
(12,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 23
( 3, 7) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(15, 5) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 5, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  4
( 6,14) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 17
(10, 8) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = 13
( 6, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 7,15) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 31
( 5,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 13
(15,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(10, 1) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 33
( 8,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(10, 9) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = -13
(16,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 27
( 8, 2) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
(10,13) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 29
( 9, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(15,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
( 5,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(13, 6) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 10
( 9,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 36
(15, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
( 7,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
( 8,17) (friendly)  vulnerability =  5 attack_ratio = -1 health_diffs = -63
( 7, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
(14,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (friendly)  vulnerability =  7 attack_ratio = -1 health_diffs = -65
(13,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
(10,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -3
( 4,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs =  8
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 28
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 32
( 8, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
(15, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(11,15) (friendly)  vulnerability =  2 attack_ratio = -1 health_diffs = -74
(14, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  28  30  31  30                              
 2                      29  28  26  28  28  30  31  30  29                      
 3              28  29  29  28  28  27  30  30  31  31  30  29  27              
 4              29  30  31  31  30  29  32  33  33  32  30  29  27              
 5          29  30  31  32  32  33  34  35  35  34  32  29  28  29  27          
 6          30  31  32  31  32  34  35  37  35  34  32  33  27  26  27          
 7      30  31  32  31  29  34  32  34  36  35  35  34  30  28  28  26  28      
 8      31  32  32  31  32  29  31  35  35  37  35  34  32  31  23  27  28      
 9      32  32  32  32  33  31  35  33  36  37  37  37  34  28  26  27  28      
10      30  29  30  31  31  33  32  36  37  36  37  35  33  27  26  23  28      
11      27  29  29  27  28  33  31  34  37  36  35  32  29  29  25  26  27      
12          26  25  28  28  26  32  32  35  33  31  33  27  26  26  27          
13          28  27  26  27  25  29  31  33  34  28  26  28  25  27  28          
14              29  27  26  29  26  30  32  29  30  25  26  27  26              
15              28  29  27  27  29  28  29  27  27  28  26  26  27              
16                      29  27  26  28  28  27  27  27  27                      
17                              28  28  28  27  27                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 9) - {'options': [(17, 10)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(11, 15) - {'options': [(11, 14)], 'scores': [3]}
(12, 16) - {'options': [(12, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 15) - {'options': [(4, 15)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(2, 12) - {'options': [(2, 11)], 'scores': [3]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 1) - {'options': [(10, 1)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(8, 17)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 7) - {'options': [(3, 8)], 'scores': [0]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 9) - {'options': [(10, 8)], 'scores': [0]}
settle_sys returned with {(3, 7): {'options': [(3, 8)], 'scores': [0]}, (17, 9): {'options': [(17, 10)], 'scores': [0]}, (4, 15): {'options': [(4, 15)], 'scores': [0]}, (2, 12): {'options': [(2, 11)], 'scores': [3]}, (10, 1): {'options': [(10, 1)], 'scores': [0]}, (12, 16): {'options': [(12, 15)], 'scores': [1]}, (8, 17): {'options': [(8, 17)], 'scores': [0]}, (11, 15): {'options': [(11, 14)], 'scores': [3]}, (10, 9): {'options': [(10, 8)], 'scores': [0]}}
-------------------------- running turn 99 ---------------------------
[]
There are 0 groups
frontline_radius = 0
(11,16) (enemy)     vulnerability =  1 attack_ratio =  0 health_diffs = -33
( 5, 7) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 35
( 4, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -46
(16, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 25
( 2,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 9, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 35
( 3,11) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  3
(14,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
( 8, 9) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs =  6
( 4,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  6
( 7,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 22
(11,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(12,16) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 33
( 5,14) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  9
(14, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 26
(10, 3) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 40
( 7, 2) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 13
( 4, 9) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = -41
(16,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 15
(12,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 19
(13, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 10
( 8,16) (enemy)     vulnerability =  1 attack_ratio =  2 health_diffs = 18
(10, 9) (friendly)  vulnerability =  8 attack_ratio = -2 health_diffs = -66
(14,10) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 20
(12,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 5,11) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(17,10) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = -52
( 9,10) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs =  8
( 9,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 41
(10, 1) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 20
( 8,17) (friendly)  vulnerability =  5 attack_ratio = -2 health_diffs = -99
( 6,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 30
(11,12) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 41
( 9, 2) (enemy)     vulnerability =  2 attack_ratio =  0 health_diffs = -20
(10,16) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs =  5
( 4,15) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = -9
(16, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 40
(14, 7) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  8 attack_ratio = -1 health_diffs = 37
(14,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
(15, 6) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 45
(10,14) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 29
( 6,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 14
(15, 8) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 45
( 8, 4) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  29  30  29  30                              
 2                      28  28  30  27  31  28  29  30  29                      
 3              28  29  30  30  29  28  29  32  30  30  30  29  28              
 4              29  30  31  31  30  34  31  31  32  32  31  30  28              
 5          29  30  31  31  33  33  33  35  34  34  33  31  29  28  28          
 6          30  31  30  31  33  35  35  36  35  35  33  29  27  29  27          
 7      30  31  30  28  33  33  35  35  35  34  34  32  32  28  24  25  29      
 8      31  31  30  31  30  34  35  33  35  36  34  34  30  25  27  27  27      
 9      32  31  30  33  31  35  36  37  33  34  37  36  32  30  25  27  28      
10      30  29  29  28  32  34  35  34  37  35  35  35  32  30  25  28  28      
11      27  29  28  24  31  30  34  35  36  35  34  33  32  26  27  27  29      
12          26  25  27  24  30  32  35  35  33  33  28  27  27  28  26          
13          27  26  27  23  29  31  34  35  30  26  28  26  27  25  27          
14              27  25  29  27  30  32  31  30  26  27  26  26  27              
15              28  27  28  28  29  29  29  26  25  26  29  28  28              
16                      27  27  28  27  27  26  27  26  28                      
17                              27  27  28  27  27                              
18                                                                              
settle_sys: Subsystem combinations < 1000 so brute forcing
(17, 10) - {'options': [(17, 11)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(4, 15) - {'options': [(3, 15)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(3, 8) - {'options': [(4, 8)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 1) - {'options': [(11, 1)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(12, 16) - {'options': [(13, 16)], 'scores': [2]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(8, 17) - {'options': [(9, 17)], 'scores': [1]}
settle_sys: Subsystem combinations < 1000 so brute forcing
(10, 9) - {'options': [(11, 9)], 'scores': [3]}
settle_sys returned with {(17, 10): {'options': [(17, 11)], 'scores': [1]}, (4, 15): {'options': [(3, 15)], 'scores': [1]}, (3, 8): {'options': [(4, 8)], 'scores': [1]}, (10, 1): {'options': [(11, 1)], 'scores': [1]}, (12, 16): {'options': [(13, 16)], 'scores': [2]}, (8, 17): {'options': [(9, 17)], 'scores': [1]}, (10, 9): {'options': [(11, 9)], 'scores': [3]}}
[41, 6] - seed: 789940-0
