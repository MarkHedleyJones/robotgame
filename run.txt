Game seed: 1891198582
Match seed: 1891198582-0
--------------------------- running turn 0 ---------------------------
--------------------------- running turn 1 ---------------------------
--------------------------- running turn 2 ---------------------------
--------------------------- running turn 3 ---------------------------
--------------------------- running turn 4 ---------------------------
--------------------------- running turn 5 ---------------------------
--------------------------- running turn 6 ---------------------------
--------------------------- running turn 7 ---------------------------
--------------------------- running turn 8 ---------------------------
--------------------------- running turn 9 ---------------------------
-------------------------- running turn 10 ---------------------------
-------------------------- running turn 11 ---------------------------
-------------------------- running turn 12 ---------------------------
-------------------------- running turn 13 ---------------------------
-------------------------- running turn 14 ---------------------------
-------------------------- running turn 15 ---------------------------
-------------------------- running turn 16 ---------------------------
-------------------------- running turn 17 ---------------------------
-------------------------- running turn 18 ---------------------------


=> INITIAL
BOT Positions:
9 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7               X   -             
 8           -   X   -             
 9       -   X   X   X   -   X     
10       -   -   X   -             
11       X   -   X   -             
12                                 

Awarded move for (12, 9)  to (11, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
8 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7               X   -             
 8           -   X   -             
 9       -   X   X   X             
10       -   -   X   -             
11       X   -   X   -             
12                                 

determine_ideal_outcome called with [(9, 8), (9, 9), (9, 10), (9, 11), (7, 11), (8, 9), (10, 9), (9, 7)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 2
optional - [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 8), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
levels - {9: [(10, 11), (10, 7), (9, 6), (8, 11)], 10: [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 76

-------------------------------------
TARGET system:
7 participants
()
     6   7   8   9  10  11  12  13  
 6                                 
 7               2                 
 8           2   X   2             
 9       2   X   X   X             
10           2   X   2             
11               2                 
12                                 

This is system split, groups are...
0
  [(7, 11), [(8, 11)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     6   7   8   9  10  11  12  13  
 6                                 
 7               ?                 
 8           -   0   -             
 9       -   0   0   0             
10           -   0   -             
11               ?                 
12                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6                                 
 7              10                 
 8          10  11  10             
 9      10  11  12  11             
10          10  11  10             
11              10                 
12                                 

The system now has a total of 10000 options
The initial system score was 101
The maximum obtainable for the system is 104
The score gain were looking for is 3
The system_score_gain_required = 0

bots_in_optional = [(9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 5
current_bots_in_optional = [(9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 10000 options
(11, 7) - {'options': [(11, 8)], 'scores': [1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(7, 11) - {'options': [(8, 11)], 'scores': [1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.838000ms for simplify_system to complete
possible bots to move = [(9, 8), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 8), (9, 8)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(11, 7): {'options': [(11, 8)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 3
this possibility has a score of 3
checking
{(11, 7): {'options': [(11, 8)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(11, 7) - {'options': [(11, 8)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [1]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.84 Ms for simplify_system to complete
-------------------------- running turn 19 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -   -     
 8       -   X   -   X     
 9   -   X   X   X   X     
10       -   X   -   -     
11   -   X   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -   -     
 8       -   X   -   X     
 9   -   X   X   X   X     
10       -   X   -   -     
11   -   X   X   -         
12                         

determine_ideal_outcome called with [(9, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 9), (9, 11), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (9, 11), (7, 9), (8, 8), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 9), (9, 11), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 7), (7, 11)], 9: [(11, 10), (10, 11), (11, 8), (8, 11), (10, 7)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (9, 11), (7, 9), (8, 8), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       -   0   -   X     
 9   -   0   0   0   ?     
10       -   0   -         
11       X   ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10   9     
 9  10  11  12  11  10     
10      10  11  10         
11       9  10             
12                         

The system now has a total of 100000 options
The initial system score was 104
The maximum obtainable for the system is 106
The score gain were looking for is 2
The system_score_gain_required = 2

bots_in_optional = [(11, 9), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(11, 8), (8, 11)]
bots_outside_system_moving_to_optional  = [(11, 8), (8, 11)]
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (9, 11), (9, 7), (11, 8), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 100000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8)], 'scores': [1, 1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(8, 11) - {'options': [(9, 11), (8, 10)], 'scores': [1, 1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.688000ms for simplify_system to complete
possible bots to move = [(9, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 9), (9, 11), (8, 11), (10, 9), (9, 7)]
filtered = [(11, 8), (8, 11)]
Will move (11, 8)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 8), (9, 9), (9, 10), (9, 11), (8, 11), (10, 9), (9, 7)]
filtered = [(8, 11), (10, 9)]
Will move (8, 11)
0 systems were filtered as they were not valid
possible bots to move = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9), (9, 7)]
filtered = [(9, 10), (10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 8), (9, 9), (9, 10), (9, 7)]
filtered = [(9, 9), (9, 10)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 10), (9, 8), (8, 9), (9, 7)]
filtered = [(9, 10), (8, 9)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 8), (9, 7)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 8), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 8), (9, 8)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(9, 10): {'options': [(8, 10)], 'scores': [-1]}, (11, 8): {'options': [(11, 9)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(9, 10): {'options': [(8, 10)], 'scores': [-1]}, (11, 8): {'options': [(11, 9)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(11, 8) - {'options': [(11, 9)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 11) - {'options': [(9, 11)], 'scores': [1]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.69 Ms for simplify_system to complete
-------------------------- running turn 20 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.625000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.62 Ms for simplify_system to complete
-------------------------- running turn 21 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.697000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.70 Ms for simplify_system to complete
-------------------------- running turn 22 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
occupied - [(9, 9), (9, 10), (9, 8), (8, 9), (10, 9)]
available_bots - [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
levels - {9: [(11, 8), (10, 7), (7, 10), (10, 11), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)], 11: [(9, 10), (9, 8), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
current_bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(8, 9), (9, 8), (9, 10), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.619000ms for simplify_system to complete
possible bots to move = [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.62 Ms for simplify_system to complete
-------------------------- running turn 23 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(8, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
occupied - [(9, 9), (9, 10), (9, 8), (8, 9), (10, 9)]
available_bots - [(8, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(11, 8), (10, 7), (7, 10), (10, 11), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)], 11: [(9, 10), (9, 8), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(8, 9), (9, 8), (9, 10), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.929000ms for simplify_system to complete
possible bots to move = [(8, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.93 Ms for simplify_system to complete
-------------------------- running turn 24 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
occupied - [(9, 9), (9, 10), (9, 8), (8, 9), (10, 9)]
available_bots - [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
levels - {9: [(11, 8), (10, 7), (7, 10), (10, 11), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)], 11: [(9, 10), (9, 8), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
current_bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(8, 9), (9, 8), (9, 10), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.629000ms for simplify_system to complete
possible bots to move = [(8, 9), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.63 Ms for simplify_system to complete
-------------------------- running turn 25 ---------------------------


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 225000 options
The initial system score was 106
The maximum obtainable for the system is 106
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.631000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.63 Ms for simplify_system to complete
-------------------------- running turn 26 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X   -                 
 8   -   X   X   -   -             
 9   -   X   X   X   X   -   X     
10   -   X   X   -                 
11       -   X   -                 
12                                 

Awarded move for (13, 9)  to (12, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X   -                 
 8   -   X   X   -   -             
 9   -   X   X   X   X             
10   -   X   X   -                 
11       -   X   -                 
12                                 

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  13  14  
 6                                 
 7           5                     
 8       5   X   5                 
 9   5   X   X   X   5             
10       5   X   5                 
11           5                     
12                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           ?                     
 8       ?   0   -                 
 9   -   0   0   0   ?             
10       ?   0   -                 
11           ?                     
12                                 

Cell Scores:
     7   8   9  10  11  12  13  14  
 6                                 
 7          10                     
 8      10  11  10                 
 9  10  11  12  11  10             
10      10  11  10                 
11          10                     
12                                 

The system now has a total of 225000 options
The initial system score was 114
The maximum obtainable for the system is 115
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.936000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.94 Ms for simplify_system to complete
-------------------------- running turn 27 ---------------------------


=> INITIAL
BOT Positions:
12 participants
     7   8   9  10  11  12  13  
 5                             
 6       X   -                 
 7       -   X   -             
 8   -   X   X   -   -         
 9   -   X   X   X   X   X   - 
10   -   X   X   -             
11       -   X   -             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
12 participants
     7   8   9  10  11  12  13  
 5                             
 6       X   -                 
 7       -   X   -             
 8   -   X   X   -   -         
 9   -   X   X   X   X   X   - 
10   -   X   X   -             
11       -   X   -             
12                             

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (8, 6), (9, 11), (12, 9), (10, 9), (9, 7)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (12, 9), (10, 9), (9, 7)]
levels - {8: [(13, 9)], 9: [(12, 9), (10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  13  
 5                             
 6                             
 7           6                 
 8       6   X   6             
 9   6   X   X   X   6         
10       6   X   6             
11           6                 
12                             

This is system split, groups are...
0
  [(8, 6), [(9, 6)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  13  
 5                             
 6                             
 7           ?                 
 8       ?   0   -             
 9   -   0   0   0   ?   X     
10       ?   0   -             
11           ?                 
12                             

Cell Scores:
     7   8   9  10  11  12  13  
 5                             
 6                             
 7          10                 
 8      10  11  10             
 9  10  11  12  11  10   9     
10      10  11  10             
11          10                 
12                             

The system now has a total of 54000 options
The initial system score was 130
The maximum obtainable for the system is 133
The score gain were looking for is 3
The system_score_gain_required = 1

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = [(11, 9)]
bots_outside_system = [(12, 9)]
bots_outside_system_moving_to_optional  = [(12, 9)]
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(10, 9)]
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(8, 10), (8, 8), (9, 11), (9, 7), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9), (11, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 9), (9, 10), (9, 8), (9, 9), (8, 9), (10, 9), (11, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(11, 9)]
So lets move one of [(9, 10), (9, 8), (8, 9), (10, 9)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 54000 options
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8)], 'scores': [0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(8, 6) - {'options': [(9, 6)], 'scores': [1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(12, 7) - {'options': [(11, 7)], 'scores': [1]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  2.428000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 11), (9, 8), (8, 10), (9, 9), (9, 10), (8, 8), (9, 7)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 10), (8, 8), (9, 8), (8, 10), (8, 9), (9, 7)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 8), (8, 8), (9, 7)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
And is max gain - returning this system
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(9, 10): {'options': [(8, 10)], 'scores': [-1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (8, 6): {'options': [(9, 6)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (12, 7): {'options': [(11, 7)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 3
this possibility has a score of 3
checking
{(9, 10): {'options': [(8, 10)], 'scores': [-1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (8, 6): {'options': [(9, 6)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (12, 7): {'options': [(11, 7)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 9) - {'options': [(9, 10)], 'scores': [-1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(8, 6) - {'options': [(9, 6)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(12, 7) - {'options': [(11, 7)], 'scores': [1]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.43 Ms for simplify_system to complete
-------------------------- running turn 28 ---------------------------


=> INITIAL
BOT Positions:
15 participants
     6   7   8   9  10  11  12  
 5                             
 6           -   X             
 7           -   X   -   X     
 8       -   X   X   X   -     
 9       -   X   X   X   X     
10       -   X   X   -   -     
11       X   -   X   -         
12               -             
13               X             
14                             

Awarded move for (9, 13)  to (9, 12)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
14 participants
     6   7   8   9  10  11  12  
 5                             
 6           -   X             
 7           -   X   -   X     
 8       -   X   X   X   -     
 9       -   X   X   X   X     
10       -   X   X   -   -     
11       X   -   X   -         
12                             
13                             
14                             

determine_ideal_outcome called with [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (11, 7), (7, 11), (8, 9), (9, 6), (10, 9), (9, 7)]
outcome = 
num_optional - 1
optional - [(10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (11, 7), (7, 11), (8, 9), (9, 6), (10, 9), (9, 7)]
levels - {8: [(7, 11), (8, 6), (11, 7)], 9: [(10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 145

-------------------------------------
TARGET system:
14 participants
()
     6   7   8   9  10  11  12  
 5                             
 6               1             
 7           1   X   1         
 8       1   X   X   X   1     
 9       X   X   X   X   X     
10       1   X   X   X   1     
11           1   X   1         
12                             
13                             
14                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
14 participants
     6   7   8   9  10  11  12  
 5                             
 6               ?             
 7           -   0   -   X     
 8       -   0   0   0   -     
 9       =   0   0   0   0     
10       -   0   0   =   -     
11       X   -   0   -         
12                             
13                             
14                             

Cell Scores:
     6   7   8   9  10  11  12  
 5                             
 6               9             
 7           9  10   9   8     
 8       9  10  11  10   9     
 9      10  11  12  11  10     
10       9  10  11  10   9     
11       8   9  10   9         
12                             
13                             
14                             

The system now has a total of 200000000 options
The initial system score was 149
The maximum obtainable for the system is 154
The score gain were looking for is 5
The system_score_gain_required = 4

bots_in_optional = [(9, 6)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(11, 7), (7, 11)]
bots_outside_system_moving_to_optional  = [(11, 7), (7, 11)]
bots_in_occupied = [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 13
current_bots_in_optional = [(9, 6), (11, 7), (7, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 6)]
current_bots_in_occupied = [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = [(10, 10), (7, 9)]
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]

ALERT! - There -1 bots too many that will have to stay in optional squares
Occupied squares that need someone assigned are
[(10, 10), (7, 9)]
Optional squares exist
2 bots need to move out of optional
And 2 bots need to move into occupied
len(current_bots_in_optional_that_can_move_to_occupied) = 1
Deficit = 1
failed_occupied_coord_scores = [10, 10]
optional_square_score = 9
The max gain should now be reduced by -1
score_gain_required now = 4
score_absolute_max now = 153
unoccupied squares exist ... [(10, 10), (7, 9)]
But bots in occupied need to shuffle but not sure how many

System result = ...
The system has a total of 200000000 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [1, 1, 0, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [1, 0, -1, -1]}
(11, 7) - {'options': [(11, 8), (10, 7)], 'scores': [1, 1]}
(7, 11) - {'options': [(8, 11), (7, 10)], 'scores': [1, 1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}


It took  2.541000ms for simplify_system to complete
possible bots to move = [(10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (11, 7), (7, 11), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = [(11, 7), (7, 11)]
Will move (11, 7)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (7, 11), (9, 11), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = [(7, 11)]
Will move (7, 11)
0 systems were filtered as they were not valid
possible bots to move = [(9, 11), (10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 11), (9, 11)), ((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((8, 9), (8, 9)), ((9, 6), (9, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
The found system has a score of 3 but we needed 4
Returning - {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 7): {'options': [(11, 8)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
possible bots to move = [(9, 11), (10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 11), (9, 11)), ((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((8, 9), (8, 9)), ((9, 6), (9, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
The found system has a score of 3 but we needed 4
Returning - {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 7): {'options': [(11, 8)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
possible bots to move = [(10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (7, 11), (9, 11), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = [(7, 11)]
Will move (7, 11)
0 systems were filtered as they were not valid
possible bots to move = [(9, 11), (10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 11), (9, 11)), ((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((8, 9), (8, 9)), ((9, 6), (9, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
The found system has a score of 3 but we needed 4
Returning - {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 7): {'options': [(10, 7)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
possible bots to move = [(9, 11), (10, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (8, 9), (9, 6), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 11), (9, 11)), ((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((8, 9), (8, 9)), ((9, 6), (9, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
The found system has a score of 3 but we needed 4
Returning - {(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 7): {'options': [(10, 7)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
SYSTEM WALK FAILED SO RUN A FULL SOULTION
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1484, in solve_system
  File "<string>", line 196, in pick_best
KeyboardInterrupt
-------------------------- running turn 29 ---------------------------
It took  82164.572000ms for start to complete


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12           -             
13           X             
14                         

Awarded move for (9, 13)  to (9, 12)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12                         
13                         
14                         

determine_ideal_outcome called with [(9, 8), (11, 9), (8, 10), (8, 8), (9, 10), (9, 11), (9, 9), (8, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 8), (11, 9), (8, 10), (8, 8), (9, 10), (9, 11), (9, 9), (8, 9), (10, 9), (9, 7)]
levels - {9: [(10, 11), (11, 8), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 106

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         
13                         
14                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         
13                         
14                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         
13                         
14                         

The system now has a total of 225000 options
The initial system score was 114
The maximum obtainable for the system is 115
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 10), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 10), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 10), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.859000ms for simplify_system to complete
possible bots to move = [(9, 8), (11, 9), (8, 10), (8, 8), (9, 10), (9, 11), (9, 9), (8, 9), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((8, 8), (8, 8)), ((9, 10), (9, 10)), ((9, 11), (9, 11)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 4.40 Ms for simplify_system to complete
It took a total of 82164.57 Ms for start to complete
-------------------------- running turn 30 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12           X             
13           -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           X   -         
 8   -   X   X   -   -     
 9   -   X   X   X   X     
10   -   X   X   -         
11       -   X   -         
12           X             
13           -             

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (10, 9), (9, 7)]
levels - {8: [(9, 13)], 9: [(10, 11), (11, 8), (10, 7), (9, 12), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         
13                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12           X             
13                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12           9             
13                         

The system now has a total of 36000 options
The initial system score was 115
The maximum obtainable for the system is 116
The score gain were looking for is 1
The system_score_gain_required = 1

bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = [(9, 11)]
bots_outside_system = [(9, 12)]
bots_outside_system_moving_to_optional  = [(9, 12)]
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 10)]
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 7), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9), (9, 11)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 10), (9, 8), (9, 9), (8, 9), (10, 9), (9, 11)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(9, 11)]
So lets move one of [(9, 10), (9, 8), (8, 9), (10, 9)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 36000 options
(9, 10) - {'options': [(9, 9), (8, 10), (10, 10)], 'scores': [1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(8, 10) - {'options': [(8, 9), (8, 10)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.730000ms for simplify_system to complete
possible bots to move = [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (10, 9), (9, 7)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(8, 9), (9, 8), (11, 9), (8, 10), (9, 9), (8, 8), (10, 9), (9, 7)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 8), (11, 9), (8, 9), (8, 8), (10, 9), (9, 7)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(11, 9), (10, 9)]
filtered = []
No bots that need to move could be found
Works... [((11, 9), (11, 9)), ((10, 9), (10, 9))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.73 Ms for simplify_system to complete
-------------------------- running turn 31 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         

determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (9, 6), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   ?         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 675000 options
The initial system score was 116
The maximum obtainable for the system is 116
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.790000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.79 Ms for simplify_system to complete
-------------------------- running turn 32 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         

determine_ideal_outcome called with [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (10, 7), (7, 10), (9, 6), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   ?         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 675000 options
The initial system score was 116
The maximum obtainable for the system is 116
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.690000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.69 Ms for simplify_system to complete
-------------------------- running turn 33 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         

determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (9, 6), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   ?         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 675000 options
The initial system score was 116
The maximum obtainable for the system is 116
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.694000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.69 Ms for simplify_system to complete
-------------------------- running turn 34 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         

determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (9, 6), (10, 7), (7, 10), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   ?         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 675000 options
The initial system score was 116
The maximum obtainable for the system is 116
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.687000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.69 Ms for simplify_system to complete
-------------------------- running turn 35 ---------------------------


=> INITIAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6           -             
 7           X   -         
 8   -   X   X   X   -     
 9   -   X   X   X   X     
10   -   X   X   -   -     
11       -   X   -         
12                         

determine_ideal_outcome called with [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (10, 7), (7, 10), (9, 6), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  
 6                         
 7           6             
 8       6   X   6         
 9   6   X   X   X   6     
10       6   X   6         
11           6             
12                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   ?         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          10             
 8      10  11  10         
 9  10  11  12  11  10     
10      10  11  10         
11          10             
12                         

The system now has a total of 675000 options
The initial system score was 116
The maximum obtainable for the system is 116
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  1.712000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 1.71 Ms for simplify_system to complete
-------------------------- running turn 36 ---------------------------


=> INITIAL
BOT Positions:
12 participants
     7   8   9  10  11  12  13  14  
 6           -                     
 7           X   -                 
 8   -   X   X   X   -             
 9   -   X   X   X   X   -   X     
10   -   X   X   -   -             
11       -   X   -                 
12                                 

Awarded move for (13, 9)  to (12, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     7   8   9  10  11  12  13  14  
 6           -                     
 7           X   -                 
 8   -   X   X   X   -             
 9   -   X   X   X   X             
10   -   X   X   -   -             
11       -   X   -                 
12                                 

determine_ideal_outcome called with [(10, 8), (9, 11), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 9), (9, 8), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 11), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (10, 9), (9, 7)]
levels - {9: [(11, 10), (10, 11), (11, 8), (10, 7), (7, 10), (9, 6), (7, 8), (8, 11)], 10: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)], 11: [(9, 8), (9, 10), (8, 9), (10, 9)], 12: [(9, 9)]}
max_score - 116

-------------------------------------
TARGET system:
11 participants
()
     7   8   9  10  11  12  13  14  
 6                                 
 7           6                     
 8       6   X   6                 
 9   6   X   X   X   6             
10       6   X   6                 
11           6                     
12                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           ?                     
 8       ?   0   ?                 
 9   -   0   0   0   ?             
10       ?   0   -                 
11           ?                     
12                                 

Cell Scores:
     7   8   9  10  11  12  13  14  
 6                                 
 7          10                     
 8      10  11  10                 
 9  10  11  12  11  10             
10      10  11  10                 
11          10                     
12                                 

The system now has a total of 675000 options
The initial system score was 124
The maximum obtainable for the system is 125
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(10, 8), (9, 11), (11, 9), (8, 10), (8, 8), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (9, 11), (11, 9), (8, 10), (8, 8), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (9, 11), (11, 9), (8, 10), (8, 8), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]

Optional squares exist

System result = ...
The system has a total of 675000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  2.015000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 11), (9, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 11), (9, 11)), ((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.02 Ms for simplify_system to complete
-------------------------- running turn 37 ---------------------------


=> INITIAL
BOT Positions:
15 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7               X   -             
 8       -   X   X   X   -         
 9       -   X   X   X   X   X   - 
10       -   X   X   -   -         
11       X   -   X   -             
12               -                 
13               X   -             
14               X   -             
15                                 

Awarded move for (9, 13)  to (9, 12)
simplification made, repeating
Awarded move for (9, 14)  to (9, 13)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
13 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7               X   -             
 8       -   X   X   X   -         
 9       -   X   X   X   X   X   - 
10       -   X   X   -   -         
11       X   -   X   -             
12                                 
13                                 
14                                 
15                                 

determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (7, 11), (9, 11), (8, 9), (12, 9), (10, 9), (9, 7)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 7
optional - [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (12, 9), (10, 9), (9, 7)]
levels - {8: [(13, 9)], 9: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (9, 6), (11, 8), (7, 8)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 126

-------------------------------------
TARGET system:
12 participants
()
     6   7   8   9  10  11  12  13  
 6                                 
 7               7                 
 8           7   X   7             
 9       7   X   X   X   7         
10           7   X   7             
11               7                 
12                                 
13                                 
14                                 
15                                 

This is system split, groups are...
0
  [(7, 11), [(8, 11)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
12 participants
     6   7   8   9  10  11  12  13  
 6                                 
 7               ?                 
 8           ?   0   ?             
 9       -   0   0   0   ?   X     
10           ?   0   -             
11               ?                 
12                                 
13                                 
14                                 
15                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6                                 
 7              10                 
 8          10  11  10             
 9      10  11  12  11  10   9     
10          10  11  10             
11              10                 
12                                 
13                                 
14                                 
15                                 

The system now has a total of 108000 options
The initial system score was 148
The maximum obtainable for the system is 152
The score gain were looking for is 4
The system_score_gain_required = 1

bots_in_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = [(11, 9)]
bots_outside_system = [(12, 9)]
bots_outside_system_moving_to_optional  = [(12, 9)]
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(10, 9)]
num_target_bots_in_optional = 7
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (8, 10), (8, 8), (9, 11), (9, 7), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9), (11, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 9), (9, 8), (9, 9), (9, 10), (8, 9), (10, 9), (11, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(11, 9)]
So lets move one of [(9, 8), (9, 10), (8, 9), (10, 9)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 108000 options
(10, 8) - {'options': [(9, 8), (10, 8)], 'scores': [1, 0]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8)], 'scores': [0, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [1, 1, 0]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [1, 1, 0]}
(7, 11) - {'options': [(8, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [1, 0]}


It took  3.164000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 8), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (9, 7)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 11), (9, 8), (9, 9), (8, 10), (9, 10), (8, 8), (8, 9), (9, 7)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (8, 8), (9, 8), (8, 10), (9, 10), (8, 9), (9, 7)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 8), (8, 8), (8, 9), (9, 7)]
filtered = [(8, 9)]
Will move (8, 9)
System failed because a bot has no moves
1 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 8), (8, 8), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((8, 8), (8, 8)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 10): {'options': [(8, 10)], 'scores': [-1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(7, 9)], 'scores': [-1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 4
this possibility has a score of 4
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 10): {'options': [(8, 10)], 'scores': [-1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (8, 9): {'options': [(7, 9)], 'scores': [-1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 9) - {'options': [(9, 10)], 'scores': [-1]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 10) - {'options': [(8, 10)], 'scores': [-1]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [1]}
(8, 9) - {'options': [(7, 9)], 'scores': [-1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 3.16 Ms for simplify_system to complete
-------------------------- running turn 38 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X     
10       -   X   X   -   -     
11       -   X   X   -         
12           -   X   X   -     
13               X             
14               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X     
10       -   X   X   -   -     
11       -   X   X   -         
12           -   X   X   -     
13               X             
14               -             

determine_ideal_outcome called with [(10, 8), (9, 13), (9, 8), (11, 9), (9, 9), (10, 12), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (11, 10), (10, 7), (9, 6), (7, 10), (8, 11), (8, 7), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (9, 13), (9, 8), (11, 9), (9, 9), (10, 12), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {7: [(9, 14), (11, 12)], 8: [(10, 12), (7, 11), (9, 13), (8, 12)], 9: [(6, 9), (10, 11), (11, 10), (10, 7), (9, 6), (7, 10), (8, 11), (8, 7), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X     
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             
14                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0     
10       -   0   0   =   -     
11           ?   0   -         
12               ?   X         
13               X             
14                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10     
10       9  10  11  10   9     
11           9  10   9         
12               9   8         
13               8             
14                             

The system now has a total of 60000000 options
The initial system score was 160
The maximum obtainable for the system is 163
The score gain were looking for is 3
The system_score_gain_required = 3

bots_in_optional = [(9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = [(9, 12)]
bots_outside_system = [(9, 13), (10, 12)]
bots_outside_system_moving_to_optional  = [(9, 13), (10, 12)]
bots_in_occupied = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 11)]
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(8, 11), (9, 13), (10, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 11)]
current_bots_in_occupied = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = [(10, 10)]
target_occupied_with_bot_now_or_definite_bot_next = [(9, 11), (10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7), (9, 12)]

Optional squares exist
unoccupied squares exist ... [(10, 10)]
1 bots need to shuffle
From (9, 11) to (10, 10)
1 different ways
[[(9, 11), (9, 10), (10, 10)]]
Will start filtering and trying combinations
Valid combo length = 1 (checking) = ([(9, 11), (9, 10), (10, 10)],)
Works... ([(9, 11), (9, 10), (10, 10)],)
Found a way of moving the bots around...
([(9, 11), (9, 10), (10, 10)],)
It worked

System result = ...
The system has a total of 3840000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1]}
(10, 12) - {'options': [(10, 11)], 'scores': [1]}
(8, 10) - {'options': [(8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 0, -1, -1]}
(9, 10) - {'options': [(10, 10)], 'scores': [-1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(8, 10), (8, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9)], 'scores': [1, 0, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  3.720000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 8), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 8), (8, 8)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [-1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 3
this possibility has a score of 3
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [-1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(10, 12) - {'options': [(10, 11)], 'scores': [1]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(10, 10)], 'scores': [-1]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 3.72 Ms for simplify_system to complete
-------------------------- running turn 39 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             

determine_ideal_outcome called with [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (7, 11), (9, 13)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             

The system now has a total of 10546875000 options
The initial system score was 163
The maximum obtainable for the system is 163
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (9, 12), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.156000ms for simplify_system to complete
possible bots to move = [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.16 Ms for simplify_system to complete
-------------------------- running turn 40 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             

determine_ideal_outcome called with [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (7, 11), (9, 13)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             

The system now has a total of 10546875000 options
The initial system score was 163
The maximum obtainable for the system is 163
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (9, 12), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.146000ms for simplify_system to complete
possible bots to move = [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.15 Ms for simplify_system to complete
-------------------------- running turn 41 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             

determine_ideal_outcome called with [(8, 9), (10, 11), (10, 8), (10, 10), (8, 8), (8, 11), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (9, 12), (7, 9)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(8, 9), (10, 11), (10, 8), (10, 10), (8, 8), (8, 11), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (9, 12), (7, 9)]
levels - {8: [(11, 11), (7, 11), (9, 13)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             

The system now has a total of 10546875000 options
The initial system score was 163
The maximum obtainable for the system is 163
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (8, 11), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (8, 11), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (8, 11), (9, 12)]
current_bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (7, 9)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  2.158000ms for simplify_system to complete
possible bots to move = [(8, 9), (10, 11), (10, 8), (10, 10), (8, 8), (8, 11), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7), (9, 8), (9, 12), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((10, 11), (10, 11)), ((10, 8), (10, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((9, 8), (9, 8)), ((9, 12), (9, 12)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 2.16 Ms for simplify_system to complete
-------------------------- running turn 42 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             

determine_ideal_outcome called with [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (7, 11), (9, 13)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             

The system now has a total of 10546875000 options
The initial system score was 163
The maximum obtainable for the system is 163
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (9, 12), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.161000ms for simplify_system to complete
possible bots to move = [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.16 Ms for simplify_system to complete
-------------------------- running turn 43 ---------------------------


=> INITIAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12               X             
13               -             

determine_ideal_outcome called with [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (7, 11), (9, 13)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             

The system now has a total of 10546875000 options
The initial system score was 163
The maximum obtainable for the system is 163
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 12), (10, 11), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(9, 12), (10, 11), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 12), (10, 11), (8, 11)]
current_bots_in_occupied = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (9, 11), (10, 10), (11, 9), (8, 10), (8, 8), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.174000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((9, 11), (9, 11)), ((9, 10), (9, 10)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((10, 11), (10, 11)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.17 Ms for simplify_system to complete
-------------------------- running turn 44 ---------------------------


=> INITIAL
BOT Positions:
18 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13               -             
14               X             
15               -             
16               X             
17                             

Awarded move for (9, 16)  to (9, 15)
Awarded move for (9, 14)  to (9, 13)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13                             
14                             
15                             
16                             
17                             

determine_ideal_outcome called with [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 3
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (10, 12), (7, 11), (8, 12)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 163

-------------------------------------
TARGET system:
16 participants
()
     6   7   8   9  10  11  12  
 6               3             
 7           3   X   3         
 8       3   X   X   X   3     
 9   3   X   X   X   X   X   3 
10       3   X   X   X   3     
11           3   X   3         
12               3             
13                             
14                             
15                             
16                             
17                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
16 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             
14                             
15                             
16                             
17                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             
14                             
15                             
16                             
17                             

The system now has a total of 10546875000 options
The initial system score was 175
The maximum obtainable for the system is 177
The score gain were looking for is 2
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (9, 12), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 10546875000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.973000ms for simplify_system to complete
possible bots to move = [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 16) - {'options': [(9, 15)], 'scores': [1]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.97 Ms for simplify_system to complete
-------------------------- running turn 45 ---------------------------


=> INITIAL
BOT Positions:
18 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13               X   -         
14               -             
15               X             
16                             

Awarded move for (9, 15)  to (9, 14)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
17 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -         
 8       -   X   X   X   -     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13               X   -         
14                             
15                             
16                             

determine_ideal_outcome called with [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 13), (9, 12), (9, 11), (10, 11), (9, 7), (8, 11), (10, 9), (7, 9)]
outcome = 
num_optional - 4
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 13), (9, 12), (9, 11), (10, 11), (9, 7), (8, 11), (10, 9), (7, 9)]
levels - {7: [(10, 13)], 8: [(11, 11), (10, 12), (7, 11), (9, 13), (8, 12)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 172

-------------------------------------
TARGET system:
17 participants
()
     6   7   8   9  10  11  12  
 6               4             
 7           4   X   4         
 8       4   X   X   X   4     
 9   4   X   X   X   X   X   4 
10       4   X   X   X   4     
11           4   X   4         
12               4             
13                             
14                             
15                             
16                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
17 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   -     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13               X             
14                             
15                             
16                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13               8             
14                             
15                             
16                             

The system now has a total of 1125000000 options
The initial system score was 177
The maximum obtainable for the system is 179
The score gain were looking for is 2
The system_score_gain_required = 1

bots_in_optional = [(9, 12), (10, 11), (8, 11)]
bots_in_optional_moving_to_occupied = [(9, 12)]
bots_outside_system = [(9, 13)]
bots_outside_system_moving_to_optional  = [(9, 13)]
bots_in_occupied = [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 11)]
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (8, 11), (9, 13)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (8, 11)]
current_bots_in_occupied = [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (9, 7), (10, 9), (7, 9), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 11), (10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (9, 7), (10, 9), (7, 9), (9, 12)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(9, 12)]
So lets move one of [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 1125000000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10), (8, 11), (10, 11)], 'scores': [1, -1, -1]}
(10, 11) - {'options': [(10, 10), (10, 11)], 'scores': [1, 0]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(8, 11) - {'options': [(8, 10), (8, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  2.976000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 11), (9, 7), (8, 11), (10, 9), (7, 9)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (10, 9), (7, 9), (8, 9), (8, 11), (9, 7)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 8), (8, 9), (8, 11), (10, 9), (7, 9)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 9), (10, 11), (9, 8), (10, 10), (8, 10), (8, 8), (10, 9), (7, 9), (8, 9), (8, 11), (9, 7)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (9, 8), (11, 9), (8, 10), (8, 8), (8, 11), (10, 9), (7, 9)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 9), (10, 11), (9, 8), (10, 10), (8, 10), (10, 9), (7, 9), (8, 11), (9, 7)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (11, 9), (8, 10), (8, 11), (10, 9), (7, 9)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(11, 9), (10, 11), (10, 10), (8, 10), (10, 9), (7, 9), (8, 11), (9, 7)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 7), (10, 11), (10, 10), (11, 9), (8, 10), (8, 11), (7, 9)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (10, 10), (8, 10), (7, 9), (8, 11), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 11), (10, 11)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 9)], 'scores': [1]}, (11, 9): {'options': [(11, 8)], 'scores': [-1]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(11, 9)], 'scores': [-1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(10, 8): {'options': [(10, 9)], 'scores': [1]}, (11, 9): {'options': [(11, 8)], 'scores': [-1]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [1]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(11, 9)], 'scores': [-1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 9)], 'scores': [1]}
(11, 9) - {'options': [(11, 8)], 'scores': [-1]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [1]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(10, 9) - {'options': [(11, 9)], 'scores': [-1]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.98 Ms for simplify_system to complete
-------------------------- running turn 46 ---------------------------


=> INITIAL
BOT Positions:
18 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -   -     
 8       -   X   X   X   X     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13               -             
14               X             
15                             

Awarded move for (9, 14)  to (9, 13)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
17 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -   -     
 8       -   X   X   X   X     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12           -   X   -         
13                             
14                             
15                             

determine_ideal_outcome called with [(10, 8), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 4
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (10, 12), (7, 11), (11, 7), (8, 12)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 172

-------------------------------------
TARGET system:
17 participants
()
     6   7   8   9  10  11  12  
 6               4             
 7           4   X   4         
 8       4   X   X   X   4     
 9   4   X   X   X   X   X   4 
10       4   X   X   X   4     
11           4   X   4         
12               4             
13                             
14                             
15                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
17 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   ?     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13                             
14                             
15                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13                             
14                             
15                             

The system now has a total of 31640625000 options
The initial system score was 179
The maximum obtainable for the system is 180
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (11, 8), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (11, 8), (9, 12), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (11, 8), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 31640625000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.736000ms for simplify_system to complete
possible bots to move = [(10, 8), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.74 Ms for simplify_system to complete
-------------------------- running turn 47 ---------------------------


=> INITIAL
BOT Positions:
19 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -   -     
 8       -   X   X   X   X     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12       X   -   X   -         
13               X             
14               -             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
19 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   X   -   -     
 8       -   X   X   X   X     
 9   -   X   X   X   X   X   - 
10       -   X   X   X   -     
11       -   X   X   X   -     
12       X   -   X   -         
13               X             
14               -             

determine_ideal_outcome called with [(10, 8), (9, 11), (9, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (7, 12), (8, 8), (9, 13), (9, 12), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 5
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (9, 11), (9, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 13), (9, 12), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {7: [(9, 14)], 8: [(11, 11), (10, 12), (7, 11), (9, 13), (11, 7), (8, 12)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 181

-------------------------------------
TARGET system:
18 participants
()
     6   7   8   9  10  11  12  
 6               5             
 7           5   X   5         
 8       5   X   X   X   5     
 9   5   X   X   X   X   X   5 
10       5   X   X   X   5     
11           5   X   5         
12               5             
13                             
14                             

This is system split, groups are...
0
  [(7, 12), [(7, 11)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
18 participants
     6   7   8   9  10  11  12  
 6               -             
 7           -   0   -         
 8       -   0   0   0   ?     
 9   -   0   0   0   0   0   - 
10       -   0   0   0   -     
11           ?   0   ?         
12               ?             
13               X             
14                             

Cell Scores:
     6   7   8   9  10  11  12  
 6               9             
 7           9  10   9         
 8       9  10  11  10   9     
 9   9  10  11  12  11  10   9 
10       9  10  11  10   9     
11           9  10   9         
12               9             
13               8             
14                             

The system now has a total of 3375000000 options
The initial system score was 187
The maximum obtainable for the system is 189
The score gain were looking for is 2
The system_score_gain_required = 1

bots_in_optional = [(11, 8), (9, 12), (10, 11), (8, 11)]
bots_in_optional_moving_to_occupied = [(9, 12)]
bots_outside_system = [(9, 13)]
bots_outside_system_moving_to_optional  = [(9, 13)]
bots_in_occupied = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 11)]
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 8), (10, 11), (8, 11), (9, 13)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 8), (10, 11), (8, 11)]
current_bots_in_occupied = [(10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (9, 11), (10, 10), (11, 9), (8, 10), (8, 8), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 11), (10, 8), (9, 11), (9, 10), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (7, 9), (10, 9), (9, 7), (9, 12)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(9, 12)]
So lets move one of [(10, 8), (9, 11), (10, 10), (11, 9), (8, 10), (8, 8), (7, 9), (9, 7)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 3375000000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (8, 11), (10, 11)], 'scores': [1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 12) - {'options': [(7, 11)], 'scores': [1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(10, 11) - {'options': [(10, 10), (10, 11)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(8, 10), (8, 11)], 'scores': [1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.946000ms for simplify_system to complete
possible bots to move = [(10, 8), (9, 11), (9, 10), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (10, 11), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (11, 8), (8, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (10, 9), (8, 9), (8, 11), (7, 9)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 8), (7, 9), (8, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (8, 10), (8, 8), (10, 9), (8, 9), (8, 11), (7, 9)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (8, 10), (8, 8), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (9, 7), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (8, 10), (10, 9), (8, 11), (7, 9)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (10, 11), (10, 10), (11, 8), (11, 9), (8, 10), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(9, 7), (10, 11), (10, 10), (11, 8), (11, 9), (8, 10), (10, 9), (8, 11), (7, 9)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (10, 10), (11, 9), (8, 10), (7, 9), (8, 11), (9, 7)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(9, 7), (10, 11), (10, 10), (8, 10), (8, 11), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((9, 7), (9, 7)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((8, 11), (8, 11)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 10)], 'scores': [-1]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (7, 12): {'options': [(7, 11)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(11, 9)], 'scores': [-1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(10, 8): {'options': [(10, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 10)], 'scores': [-1]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (7, 12): {'options': [(7, 11)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(11, 9)], 'scores': [-1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(11, 9) - {'options': [(11, 10)], 'scores': [-1]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(7, 12) - {'options': [(7, 11)], 'scores': [1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(10, 9) - {'options': [(11, 9)], 'scores': [-1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 2.95 Ms for simplify_system to complete
-------------------------- running turn 48 ---------------------------


=> INITIAL
BOT Positions:
20 participants
     6   7   8   9  10  11  12  13  14  
 6               -                     
 7           -   X   -   -             
 8       -   X   X   X   X             
 9   -   X   X   X   X   X   -   X     
10       -   X   X   X   X   -         
11       X   X   X   X   -             
12       -   -   X   -                 
13               -                     

Awarded move for (13, 9)  to (12, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
19 participants
     6   7   8   9  10  11  12  13  14  
 6               -                     
 7           -   X   -   -             
 8       -   X   X   X   X             
 9   -   X   X   X   X   X             
10       -   X   X   X   X   -         
11       X   X   X   X   -             
12       -   -   X   -                 
13               -                     

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (7, 11), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(6, 9), (10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (7, 11), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
levels - {7: [(7, 12)], 8: [(11, 11), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (8, 12)], 9: [(6, 9), (10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 190

-------------------------------------
TARGET system:
19 participants
()
     6   7   8   9  10  11  12  13  14  
 6               6                     
 7           6   X   6                 
 8       6   X   X   X   6             
 9   6   X   X   X   X   X             
10       6   X   X   X   6             
11           6   X   6                 
12               6                     
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
19 participants
     6   7   8   9  10  11  12  13  14  
 6               -                     
 7           -   0   -                 
 8       -   0   0   0   ?             
 9   -   0   0   0   0   0             
10       -   0   0   0   ?             
11       X   ?   0   ?                 
12               ?                     
13                                     

Cell Scores:
     6   7   8   9  10  11  12  13  14  
 6               9                     
 7           9  10   9                 
 8       9  10  11  10   9             
 9   9  10  11  12  11  10             
10       9  10  11  10   9             
11       8   9  10   9                 
12               9                     
13                                     

The system now has a total of 151875000000 options
The initial system score was 197
The maximum obtainable for the system is 199
The score gain were looking for is 2
The system_score_gain_required = 1

bots_in_optional = [(11, 10), (10, 11), (11, 8), (9, 12), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 11)]
bots_outside_system_moving_to_optional  = [(7, 11)]
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (11, 8), (9, 12), (8, 11), (7, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (11, 8), (9, 12), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 151875000000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(7, 11) - {'options': [(8, 11), (7, 10)], 'scores': [1, 1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  3.087000ms for simplify_system to complete
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (7, 11), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(7, 11)]
Will move (7, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (9, 11), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (10, 9), (8, 9), (9, 7), (8, 11), (9, 12), (7, 9)]
filtered = [(8, 11)]
Will move (8, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (8, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (10, 9), (8, 9), (9, 7), (7, 9)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 8), (8, 9), (7, 9), (10, 9), (9, 7)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (8, 8), (9, 8), (11, 9), (8, 10), (10, 9), (8, 9), (9, 7), (7, 9)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (8, 10), (8, 8), (7, 9), (10, 9), (9, 7)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (9, 8), (11, 9), (8, 10), (10, 9), (9, 7), (7, 9)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (11, 9), (8, 10), (7, 9), (10, 9), (9, 7)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(11, 10), (10, 11), (10, 10), (11, 8), (11, 9), (8, 10), (10, 9), (9, 7), (7, 9)]
filtered = [(10, 9)]
Will move (10, 9)
System failed because two bots take the same coordinate
System failed because two bots take the same coordinate
2 systems were filtered as they were not valid
possible bots to move = [(11, 10), (10, 11), (10, 10), (11, 9), (8, 10), (10, 9), (9, 7), (7, 9)]
filtered = [(11, 9)]
Will move (11, 9)
System failed because a bot has no moves
System failed because a bot has no moves
2 systems were filtered as they were not valid
possible bots to move = [(11, 10), (10, 11), (10, 10), (11, 8), (11, 9), (8, 10), (10, 9), (9, 7), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [1]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (8, 11): {'options': [(9, 11)], 'scores': [1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 7)], 'scores': [-1]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 11) - {'options': [(8, 11)], 'scores': [1]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(8, 11) - {'options': [(9, 11)], 'scores': [1]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 3.09 Ms for simplify_system to complete
-------------------------- running turn 49 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7       X   -   X   X   -         
 8       -   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7       X   -   X   X   -         
 8       -   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (10, 6), (7, 7), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7       X   -   0   ?             
 8       -   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7       8   9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1139062500000 options
The initial system score was 207
The maximum obtainable for the system is 208
The score gain were looking for is 1
The system_score_gain_required = 1

bots_in_optional = [(11, 10), (10, 11), (10, 7), (11, 8), (9, 12), (12, 9), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 7)]
bots_outside_system_moving_to_optional  = [(7, 7)]
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (10, 7), (11, 8), (9, 12), (12, 9), (8, 11), (7, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (10, 7), (11, 8), (9, 12), (12, 9), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 1139062500000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(7, 7) - {'options': [(7, 8), (8, 7)], 'scores': [1, 1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  3.094000ms for simplify_system to complete
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (8, 11), (10, 9), (9, 7)]
filtered = [(7, 7)]
Will move (7, 7)
0 systems were filtered as they were not valid
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (10, 9), (9, 11), (8, 9), (9, 7), (12, 9), (8, 11), (9, 12), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((10, 7), (10, 7)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((10, 9), (10, 9)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((9, 7), (9, 7)), ((12, 9), (12, 9)), ((8, 11), (8, 11)), ((9, 12), (9, 12)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [1]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 7) - {'options': [(7, 8)], 'scores': [1]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 3.09 Ms for simplify_system to complete
-------------------------- running turn 50 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (7, 8), (8, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (7, 8), (8, 11), (10, 9), (9, 7)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 10), (10, 11), (10, 7), (12, 9), (11, 8), (9, 12), (7, 8), (8, 11)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (10, 7), (12, 9), (11, 8), (9, 12), (7, 8), (8, 11)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (10, 7), (12, 9), (11, 8), (9, 12), (7, 8), (8, 11)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}


It took  2.954000ms for simplify_system to complete
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (10, 7), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (11, 8), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (7, 8), (8, 11), (10, 9), (9, 7)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((10, 7), (10, 7)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((7, 8), (7, 8)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
It took a total of 2.95 Ms for simplify_system to complete
-------------------------- running turn 51 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  3.153000ms for simplify_system to complete
possible bots to move = [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 8), (10, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((7, 8), (7, 8)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((10, 7), (10, 7)), ((9, 11), (9, 11)), ((9, 12), (9, 12)), ((9, 7), (9, 7)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 3.15 Ms for simplify_system to complete
-------------------------- running turn 52 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  2.940000ms for simplify_system to complete
possible bots to move = [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 8), (10, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((7, 8), (7, 8)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((10, 7), (10, 7)), ((9, 11), (9, 11)), ((9, 12), (9, 12)), ((9, 7), (9, 7)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 2.94 Ms for simplify_system to complete
-------------------------- running turn 53 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_occupied = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (9, 7), (9, 8), (10, 9), (7, 9)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  3.150000ms for simplify_system to complete
possible bots to move = [(8, 9), (11, 10), (10, 11), (10, 8), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((8, 9), (8, 9)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 8), (10, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((7, 8), (7, 8)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((10, 7), (10, 7)), ((9, 11), (9, 11)), ((9, 12), (9, 12)), ((9, 7), (9, 7)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(8, 9): {'options': [(8, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 3.15 Ms for simplify_system to complete
-------------------------- running turn 54 ---------------------------


=> INITIAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (8, 9), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (8, 9), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 6               8                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 6               -                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 6               9                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 208
The maximum obtainable for the system is 208
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (9, 7), (9, 8), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (10, 11), (11, 8), (8, 11), (7, 8), (10, 7), (9, 12), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (9, 7), (9, 8), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (9, 7), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (8, 9), (9, 7), (9, 8), (10, 9), (7, 9)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [1, 0, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}


It took  2.972000ms for simplify_system to complete
possible bots to move = [(10, 8), (11, 10), (10, 11), (10, 10), (11, 8), (8, 8), (8, 11), (11, 9), (7, 8), (8, 10), (9, 9), (9, 10), (10, 7), (9, 11), (9, 12), (8, 9), (9, 7), (12, 9), (9, 8), (10, 9), (7, 9)]
filtered = []
No bots that need to move could be found
Works... [((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 11), (10, 11)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((7, 8), (7, 8)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((10, 7), (10, 7)), ((9, 11), (9, 11)), ((9, 12), (9, 12)), ((8, 9), (8, 9)), ((9, 7), (9, 7)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
It took a total of 2.97 Ms for simplify_system to complete
-------------------------- running turn 55 ---------------------------


=> INITIAL
BOT Positions:
22 participants
     6   7   8   9  10  11  12  13  
 4                                 
 5               X                 
 6               -   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

Awarded move for (9, 5)  to (9, 6)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 4                                 
 5                                 
 6                   -             
 7           -   X   X   -         
 8   -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   - 
10       -   X   X   X   X   -     
11       -   X   X   X   -         
12               X   -             
13               -                 

determine_ideal_outcome called with [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 208

-------------------------------------
TARGET system:
21 participants
()
     6   7   8   9  10  11  12  13  
 4                                 
 5                                 
 6                                 
 7           8   X   8             
 8       8   X   X   X   8         
 9   8   X   X   X   X   X   8     
10       8   X   X   X   8         
11           8   X   8             
12               8                 
13                                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     6   7   8   9  10  11  12  13  
 4                                 
 5                                 
 6                                 
 7           -   0   ?             
 8       ?   0   0   0   ?         
 9   -   0   0   0   0   0   ?     
10       -   0   0   0   ?         
11           ?   0   ?             
12               ?                 
13                                 

Cell Scores:
     6   7   8   9  10  11  12  13  
 4                                 
 5                                 
 6                                 
 7           9  10   9             
 8       9  10  11  10   9         
 9   9  10  11  12  11  10   9     
10       9  10  11  10   9         
11           9  10   9             
12               9                 
13                                 

The system now has a total of 1708593750000 options
The initial system score was 216
The maximum obtainable for the system is 217
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (11, 8), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (11, 8), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (11, 8), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]

Optional squares exist

System result = ...
The system has a total of 1708593750000 options
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  3.505000ms for simplify_system to complete
possible bots to move = [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 6)], 'scores': [1]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.51 Ms for simplify_system to complete
-------------------------- running turn 56 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6           -   X   -                         
 7           -   X   X   -                     
 8   -   X   X   X   X   X   -       -   X     
 9   -   X   X   X   X   X   X   -   X   -     
10       -   X   X   X   X   -   -   X         
11       -   X   X   X   -                     
12           -   X   -                         
13               -   X                         
14                                             

Awarded move for (14, 9)  to (13, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6           -   X   -                         
 7           -   X   X   -                     
 8   -   X   X   X   X   X   -       -   X     
 9   -   X   X   X   X   X   X       -   -     
10       -   X   X   X   X   -   -   X         
11       -   X   X   X   -                     
12           -   X   -                         
13               -   X                         
14                                             

determine_ideal_outcome called with [(10, 11), (9, 8), (8, 9), (15, 8), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (8, 11), (10, 9), (9, 7), (14, 10), (10, 13), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 9
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (8, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 217

-------------------------------------
TARGET system:
22 participants
()
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6               9                             
 7           9   X   9                         
 8       9   X   X   X   9                     
 9   9   X   X   X   X   X   9                 
10       9   X   X   X   9                     
11           9   X   9                         
12               9                             
13                                             
14                                             

This is system split, groups are...
0
  [(10, 13), [(9, 13)], [1]]


1
  [(14, 10), [(14, 9)], [1]]


2
  [(15, 8), [(15, 9)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
22 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6               ?                             
 7           -   0   ?                         
 8       ?   0   0   0   ?                     
 9   -   0   0   0   0   0   ?                 
10       -   0   0   0   ?                     
11           ?   0   ?                         
12               ?                             
13                                             
14                                             

Cell Scores:
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6               9                             
 7           9  10   9                         
 8       9  10  11  10   9                     
 9   9  10  11  12  11  10   9                 
10       9  10  11  10   9                     
11           9  10   9                         
12               9                             
13                                             
14                                             

The system now has a total of 4271484375000 options
The initial system score was 242
The maximum obtainable for the system is 246
The score gain were looking for is 4
The system_score_gain_required = 0

bots_in_optional = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 9
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]

Optional squares exist

System result = ...
The system has a total of 4271484375000 options
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(15, 8) - {'options': [(15, 9)], 'scores': [1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(10, 13) - {'options': [(9, 13)], 'scores': [1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  5.521000ms for simplify_system to complete
possible bots to move = [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (8, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((8, 11), (8, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (10, 13): {'options': [(9, 13)], 'scores': [1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 4
this possibility has a score of 4
checking
{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (10, 13): {'options': [(9, 13)], 'scores': [1]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(15, 8) - {'options': [(15, 9)], 'scores': [1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(10, 13) - {'options': [(9, 13)], 'scores': [1]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 5.52 Ms for simplify_system to complete
-------------------------- running turn 57 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6           -   X   -                         
 7           -   X   X   -                     
 8   -   X   X   X   X   X   -                 
 9   -   X   X   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   -   -   -         
11       -   X   X   X   -                     
12           -   X   -                         
13               X                             
14               -                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6           -   X   -                         
 7           -   X   X   -                     
 8   -   X   X   X   X   X   -                 
 9   -   X   X   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   -   -   -         
11       -   X   X   X   -                     
12           -   X   -                         
13               X                             
14               -                             

determine_ideal_outcome called with [(10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (15, 9), (13, 9), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
Determining ideal outcome again as the result changed
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {7: [(13, 10), (9, 14)], 8: [(11, 11), (10, 6), (7, 11), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 235

-------------------------------------
TARGET system:
24 participants
()
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6              11                             
 7          11   X  11                         
 8      11   X   X   X  11                     
 9  11   X   X   X   X   X  11                 
10      11   X   X   X  11                     
11          11   X  11                         
12              11                             
13                                             
14                                             

This is system split, groups are...
0
  [(14, 9), [(13, 9)], [1]]
  [(15, 9), [(14, 9)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
24 participants
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6               ?                             
 7           -   0   ?                         
 8       ?   0   0   0   ?                     
 9   -   0   0   0   0   0   ?   X             
10       -   0   0   0   ?                     
11           ?   0   ?                         
12               ?                             
13               X                             
14                                             

Cell Scores:
     6   7   8   9  10  11  12  13  14  15  16  
 5                                             
 6               9                             
 7           9  10   9                         
 8       9  10  11  10   9                     
 9   9  10  11  12  11  10   9   8             
10       9  10  11  10   9                     
11           9  10   9                         
12               9                             
13               8                             
14                                             

The system now has a total of 48600000000 options
The initial system score was 246
The maximum obtainable for the system is 250
The score gain were looking for is 4
The system_score_gain_required = 2

bots_in_optional = [(10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = [(12, 9), (9, 12)]
bots_outside_system = [(9, 13), (13, 9)]
bots_outside_system_moving_to_optional  = [(9, 13), (13, 9)]
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 11), (11, 9)]
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 13
current_bots_in_optional = [(10, 11), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 11), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8), (12, 9), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 11), (11, 9), (9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8), (12, 9), (9, 12)]

Optional squares exist
2 bots need to move into optional
And 2 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(12, 9), (9, 12)]
So lets move one of [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 48600000000 options
(10, 11) - {'options': [(10, 10), (10, 11)], 'scores': [1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(10, 10), (11, 10)], 'scores': [1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (8, 11), (10, 11)], 'scores': [1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(8, 10), (8, 11)], 'scores': [1, 0]}
(11, 9) - {'options': [(10, 9), (11, 8), (11, 10)], 'scores': [1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [1, 0, -1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(10, 8), (11, 8)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}


It took  5.586000ms for simplify_system to complete
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8)]
filtered = [(9, 11), (11, 9)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8)]
filtered = [(11, 9), (9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8)]
filtered = [(11, 9), (9, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (10, 9), (9, 7), (8, 11), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8)]
filtered = [(10, 9), (9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (10, 9), (9, 7), (8, 11), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 9), (10, 9)]
Will move (10, 9)
System failed because a bot has no moves
1 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (8, 11), (9, 6), (7, 9), (10, 10), (8, 8), (7, 8)]
filtered = [(8, 9), (10, 8)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (8, 11), (9, 6), (7, 9), (10, 10), (8, 8), (7, 8)]
filtered = [(10, 8), (8, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(10, 11), (11, 10), (8, 10), (8, 11), (10, 10)]
filtered = []
No bots that need to move could be found
Works... [((10, 11), (10, 11)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((8, 11), (8, 11)), ((10, 10), (10, 10))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 7)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(9, 8)], 'scores': [1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 8)], 'scores': [-1]}, (9, 7): {'options': [(8, 7)], 'scores': [-1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 8): {'options': [(7, 8)], 'scores': [-1]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 9)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}}]
checking possibility for score of 4
this possibility has a score of 4
checking
{(10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 7)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(9, 8)], 'scores': [1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [1]}, (10, 9): {'options': [(10, 8)], 'scores': [-1]}, (9, 7): {'options': [(8, 7)], 'scores': [-1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 9)], 'scores': [1]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [-1]}, (9, 13): {'options': [(9, 12)], 'scores': [1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [-1]}, (8, 8): {'options': [(7, 8)], 'scores': [-1]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 9)], 'scores': [1]}, (9, 12): {'options': [(9, 11)], 'scores': [1]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 7)], 'scores': [-1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(9, 8)], 'scores': [1]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [1]}
(10, 9) - {'options': [(10, 8)], 'scores': [-1]}
(9, 7) - {'options': [(8, 7)], 'scores': [-1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 9)], 'scores': [1]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(6, 9)], 'scores': [-1]}
(9, 13) - {'options': [(9, 12)], 'scores': [1]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(8, 9)], 'scores': [-1]}
(8, 8) - {'options': [(7, 8)], 'scores': [-1]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(7, 9)], 'scores': [1]}
(9, 12) - {'options': [(9, 11)], 'scores': [1]}
It took a total of 5.59 Ms for simplify_system to complete
-------------------------- running turn 58 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                   -                         
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12                   X   -                     
13                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                   -                         
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12                   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {6: [(14, 10)], 7: [(14, 9), (13, 10)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 5                   1                         
 6               1   X   1                     
 7           1   X   X   X   1                 
 8       1   X   X   X   X   X   1             
 9   1   X   X   X   X   X   X   X   1         
10           X   X   X   X   X   1             
11           1   X   X   X   1                 
12                   X   1                     
13                   1                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                   -                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0   ?   X     
10           =   0   0   0   0   -             
11           -   0   0   0   -                 
12                   0   -                     
13                   -                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9   8   7     
10           9  10  11  10   9   8             
11           8   9  10   9   8                 
12                   9   8                     
13                   8                         

The system now has a total of 8239746093750000 options
The initial system score was 250
The maximum obtainable for the system is 252
The score gain were looking for is 2
The system_score_gain_required = 2

bots_in_optional = [(13, 9)]
bots_in_optional_moving_to_occupied = [(13, 9)]
bots_outside_system = [(14, 9)]
bots_outside_system_moving_to_optional  = [(14, 9)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(12, 9)]
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(14, 9)]
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = [(7, 10)]
target_occupied_with_bot_now_or_definite_bot_next = [(12, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]

Optional squares exist
unoccupied squares exist ... [(7, 10)]
1 bots need to shuffle
From (12, 9) to (7, 10)
5 different ways
[[(12, 9), (13, 9), (11, 10), (10, 10), (9, 10), (8, 10), (7, 10)], [(12, 9), (13, 9), (10, 9), (9, 9), (9, 10), (8, 10), (7, 10)], [(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (8, 10), (7, 10)], [(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (7, 9), (7, 10)], [(12, 9), (13, 9), (10, 9), (10, 10), (9, 10), (8, 10), (7, 10)]]
Will start filtering and trying combinations
Valid combo length = 1 (checking) = ([(12, 9), (13, 9), (11, 10), (10, 10), (9, 10), (8, 10), (7, 10)],)
Referenced non-available move
The bots couldnt move like this
([(12, 9), (13, 9), (11, 10), (10, 10), (9, 10), (8, 10), (7, 10)],)
Valid combo length = 1 (checking) = ([(12, 9), (13, 9), (10, 9), (9, 9), (9, 10), (8, 10), (7, 10)],)
Referenced non-available move
The bots couldnt move like this
([(12, 9), (13, 9), (10, 9), (9, 9), (9, 10), (8, 10), (7, 10)],)
Valid combo length = 1 (checking) = ([(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (8, 10), (7, 10)],)
Referenced non-available move
The bots couldnt move like this
([(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (8, 10), (7, 10)],)
Valid combo length = 1 (checking) = ([(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (7, 9), (7, 10)],)
Referenced non-available move
The bots couldnt move like this
([(12, 9), (13, 9), (10, 9), (9, 9), (8, 9), (7, 9), (7, 10)],)
Valid combo length = 1 (checking) = ([(12, 9), (13, 9), (10, 9), (10, 10), (9, 10), (8, 10), (7, 10)],)
Referenced non-available move
The bots couldnt move like this
([(12, 9), (13, 9), (10, 9), (10, 10), (9, 10), (8, 10), (7, 10)],)
It failed

System result = ...
The system has a total of 8239746093750000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11)], 'scores': [1, 1, 0, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  13.657000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(12, 9)]
Will move (12, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 11)]
Will move (8, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 10)]
Will move (8, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(11, 8)]
Will move (11, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((9, 7), (9, 7)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
The found system has a score of 1 but we needed 2
Returning - {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(11, 8)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [-1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((9, 7), (9, 7)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
The found system has a score of 1 but we needed 2
Returning - {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(11, 8)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(12, 8)], 'scores': [-1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(10, 7)]
Will move (10, 7)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(9, 7)]
Will move (9, 7)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(9, 6)]
Will move (9, 6)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (8, 7), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((8, 7), (8, 7)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
The found system has a score of 1 but we needed 2
Returning - {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 6)], 'scores': [-1]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [-1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
possible bots to move = [(6, 9), (10, 11), (11, 10), (8, 7), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((8, 7), (8, 7)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
The found system has a score of 1 but we needed 2
Returning - {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 6)], 'scores': [-1]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(10, 6)], 'scores': [-1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
possible bots to move = [(6, 9), (10, 11), (11, 10), (8, 7), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((8, 7), (8, 7)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
The found system has a score of 1 but we needed 2
Returning - {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 6)], 'scores': [-1]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 5)], 'scores': [-1]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
possible bots to move = [(6, 9), (10, 11), (11, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(8, 7)]
Will move (8, 7)
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1481, in solve_system
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1424, in system_walk
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 230, in _deepcopy_list
    y.append(deepcopy(a, memo))
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 237, in _deepcopy_tuple
    y.append(deepcopy(a, memo))
KeyboardInterrupt
-------------------------- running turn 59 ---------------------------
It took  64.094000ms for start to complete


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                                             
 6               -   X   -                     
 7           -   -   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12                   X   -                     
13                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                                             
 6               -   X   -                     
 7           -   -   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12                   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {7: [(13, 10)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 235

-------------------------------------
TARGET system:
24 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 5                                             
 6                  11                         
 7              11   X  11                     
 8          11   X   X   X  11                 
 9      11   X   X   X   X   X  11             
10          11   X   X   X  11                 
11              11   X  11                     
12                  11                         
13                                             

This is system split, groups are...
0
  [(14, 9), [(13, 9)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
24 participants
     5   6   7   8   9  10  11  12  13  14  15  
 5                                             
 6                   ?                         
 7               -   0   ?                     
 8           ?   0   0   0   ?                 
 9       ?   0   0   0   0   0   ?   X         
10           -   0   0   0   ?                 
11               ?   0   ?                     
12                   ?                         
13                                             

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 5                                             
 6                   9                         
 7               9  10   9                     
 8           9  10  11  10   9                 
 9       9  10  11  12  11  10   9   8         
10           9  10  11  10   9                 
11               9  10   9                     
12                   9                         
13                                             

The system now has a total of 1518750000000 options
The initial system score was 241
The maximum obtainable for the system is 243
The score gain were looking for is 2
The system_score_gain_required = 1

bots_in_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = [(12, 9)]
bots_outside_system = [(13, 9)]
bots_outside_system_moving_to_optional  = [(13, 9)]
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(11, 9)]
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 13
current_bots_in_optional = [(6, 9), (10, 11), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (10, 11), (11, 10), (10, 7), (8, 11), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8), (12, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(11, 9), (9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (9, 9), (8, 8), (12, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(12, 9)]
So lets move one of [(10, 8), (8, 10), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 1518750000000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(10, 10), (11, 10)], 'scores': [1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 8), (11, 10)], 'scores': [1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(10, 8), (11, 8)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.665000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(9, 11)]
Will move (9, 11)
System failed because two bots take the same coordinate
1 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 10)]
Will move (8, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (9, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (7, 9), (10, 10), (7, 8)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((7, 8), (7, 8))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(8, 7)], 'scores': [-1]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 2
this possibility has a score of 2
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 7)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [1]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(8, 7)], 'scores': [-1]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(10, 7)], 'scores': [-1]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(9, 7)], 'scores': [1]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(8, 7)], 'scores': [-1]}
(8, 11) - {'options': [(8, 10)], 'scores': [1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-1]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 10)], 'scores': [-1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 18.32 Ms for simplify_system to complete
It took a total of 64.09 Ms for start to complete
-------------------------- running turn 60 ---------------------------


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  14  
 5                   -                     
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -     
11           -   X   X   X   -             
12                   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  14  
 5                   -                     
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10           -   X   X   X   X   -   -     
11           -   X   X   X   -             
12                   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {7: [(13, 10)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  14  
 5                                         
 6                   X                     
 7               X   X   X                 
 8           X   X   X   X   X             
 9       X   X   X   X   X   X   X         
10           X   X   X   X   X             
11               X   X   X                 
12                   X                     
13                                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  14  
 5                                         
 6                   0                     
 7               0   0   0                 
 8           0   0   0   0   0             
 9       0   0   0   0   0   0   0   X     
10           =   0   0   0   0             
11               0   0   0                 
12                   0                     
13                                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 5                                         
 6                   9                     
 7               9  10   9                 
 8           9  10  11  10   9             
 9       9  10  11  12  11  10   9   8     
10           9  10  11  10   9             
11               9  10   9                 
12                   9                     
13                                         

The system now has a total of 4556250000000 options
The initial system score was 243
The maximum obtainable for the system is 244
The score gain were looking for is 1
The system_score_gain_required = 1

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(13, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(11, 9)]
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = [(7, 10)]
target_occupied_with_bot_now_or_definite_bot_next = [(11, 9), (12, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 4556250000000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(10, 10), (11, 10)], 'scores': [1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [1, 0, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 8), (11, 10)], 'scores': [1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(10, 8), (11, 8)], 'scores': [1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.329000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (9, 7), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(9, 11)]
Will move (9, 11)
System failed because two bots take the same coordinate
1 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 10)]
Will move (8, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8)]
filtered = [(9, 8)]
Will move (9, 8)
System failed because a bot has no moves
System failed because two bots take the same coordinate
2 systems were filtered as they were not valid
possible bots to move = [(10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (9, 7), (8, 7), (9, 6), (10, 10), (11, 8)]
filtered = []
No bots that need to move could be found
Works... [((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((9, 7), (9, 7)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((10, 10), (10, 10)), ((11, 8), (11, 8))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 10)], 'scores': [-1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(7, 8)], 'scores': [-1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 9)], 'scores': [1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 10)], 'scores': [-1]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(7, 8)], 'scores': [-1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 9)], 'scores': [1]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 10)], 'scores': [1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-1]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 10)], 'scores': [-1]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 10)], 'scores': [-1]}
(8, 8) - {'options': [(7, 8)], 'scores': [-1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(7, 9)], 'scores': [1]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.33 Ms for simplify_system to complete
-------------------------- running turn 61 ---------------------------


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   X             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   X             
12                   X                 
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   0                 
 7               0   0   0             
 8           0   0   0   0   0         
 9       0   0   0   0   0   0   0     
10           0   0   0   0   0         
11               0   0   0             
12                   0                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   9                 
 7               9  10   9             
 8           9  10  11  10   9         
 9       9  10  11  12  11  10   9     
10           9  10  11  10   9         
11               9  10   9             
12                   9                 
13                                     

The system now has a total of 128144531250000 options
The initial system score was 244
The maximum obtainable for the system is 244
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 128144531250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.051000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.05 Ms for simplify_system to complete
-------------------------- running turn 62 ---------------------------


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   X             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   X             
12                   X                 
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   0                 
 7               0   0   0             
 8           0   0   0   0   0         
 9       0   0   0   0   0   0   0     
10           0   0   0   0   0         
11               0   0   0             
12                   0                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   9                 
 7               9  10   9             
 8           9  10  11  10   9         
 9       9  10  11  12  11  10   9     
10           9  10  11  10   9         
11               9  10   9             
12                   9                 
13                                     

The system now has a total of 128144531250000 options
The initial system score was 244
The maximum obtainable for the system is 244
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 128144531250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.210000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.21 Ms for simplify_system to complete
-------------------------- running turn 63 ---------------------------


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   X             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   X             
12                   X                 
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   0                 
 7               0   0   0             
 8           0   0   0   0   0         
 9       0   0   0   0   0   0   0     
10           0   0   0   0   0         
11               0   0   0             
12                   0                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   9                 
 7               9  10   9             
 8           9  10  11  10   9         
 9       9  10  11  12  11  10   9     
10           9  10  11  10   9         
11               9  10   9             
12                   9                 
13                                     

The system now has a total of 128144531250000 options
The initial system score was 244
The maximum obtainable for the system is 244
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 128144531250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  3.986000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.99 Ms for simplify_system to complete
-------------------------- running turn 64 ---------------------------


=> INITIAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   X             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   X             
12                   X                 
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   0                 
 7               0   0   0             
 8           0   0   0   0   0         
 9       0   0   0   0   0   0   0     
10           0   0   0   0   0         
11               0   0   0             
12                   0                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   9                 
 7               9  10   9             
 8           9  10  11  10   9         
 9       9  10  11  12  11  10   9     
10           9  10  11  10   9         
11               9  10   9             
12                   9                 
13                                     

The system now has a total of 128144531250000 options
The initial system score was 244
The maximum obtainable for the system is 244
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 128144531250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.313000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.31 Ms for simplify_system to complete
-------------------------- running turn 65 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  
 2                   -                 
 3                   X                 
 4                   X   -             
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -   X             
14                                     

Awarded move for (9, 4)  to (9, 5)
Awarded move for (9, 3)  to (9, 4)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 2                                     
 3                                     
 4                                     
 5                                     
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -   X             
14                                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 13), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 13), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {7: [(10, 13)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 2                                     
 3                                     
 4                                     
 5                                     
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 
14                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 2                                     
 3                                     
 4                                     
 5                                     
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -   X             
14                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 2                                     
 3                                     
 4                                     
 5                                     
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8   7             
14                                     

The system now has a total of 171661376953125000 options
The initial system score was 269
The maximum obtainable for the system is 273
The score gain were looking for is 4
The system_score_gain_required = 1

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(10, 13)]
bots_outside_system_moving_to_optional  = [(10, 13)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(10, 13)]
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 171661376953125000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 4) - {'options': [(9, 5)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 13) - {'options': [(9, 13), (10, 12)], 'scores': [1, 1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(9, 3) - {'options': [(9, 4)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6)], 'scores': [1, 0, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(7, 4) - {'options': [(7, 5)], 'scores': [1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [1, 0, -1, -1, -1]}


It took  4.513000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 13), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(10, 13)]
Will move (10, 13)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 13): {'options': [(9, 13)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 4): {'options': [(7, 5)], 'scores': [1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 4
this possibility has a score of 4
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 13): {'options': [(9, 13)], 'scores': [1]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 4): {'options': [(7, 5)], 'scores': [1]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 4) - {'options': [(9, 5)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 13) - {'options': [(9, 13)], 'scores': [1]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 3) - {'options': [(9, 4)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(7, 4) - {'options': [(7, 5)], 'scores': [1]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.51 Ms for simplify_system to complete
-------------------------- running turn 66 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  
 3                   -                 
 4                   X                 
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   X                 
14                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  
 3                   -                 
 4                   X                 
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   X                 
14                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (9, 4), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 3
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (8, 6), (9, 13), (9, 5), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (9, 4), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {6: [(9, 3)], 7: [(9, 4), (9, 14), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (8, 6), (9, 13), (9, 5), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 268

-------------------------------------
TARGET system:
28 participants
()
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                                     
 5                   3                 
 6               3   X   3             
 7           3   X   X   X   3         
 8       3   X   X   X   X   X   3     
 9   3   X   X   X   X   X   X   X   3 
10       3   X   X   X   X   X   3     
11           3   X   X   X   3         
12               3   X   3             
13                   3                 
14                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                   X                 
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   ?                 
14                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                   7                 
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 
14                                     

The system now has a total of 102996826171875000 options
The initial system score was 273
The maximum obtainable for the system is 275
The score gain were looking for is 2
The system_score_gain_required = 1

bots_in_optional = [(9, 13), (9, 5)]
bots_in_optional_moving_to_occupied = [(9, 5)]
bots_outside_system = [(9, 4)]
bots_outside_system_moving_to_optional  = [(9, 4)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 6)]
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 13), (9, 4)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 13)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (9, 5)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 6), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (9, 5)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(9, 5)]
So lets move one of [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 102996826171875000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 4) - {'options': [(9, 5)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [1, 0, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(7, 5) - {'options': [(7, 6)], 'scores': [1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (8, 6), (10, 6)], 'scores': [1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6)], 'scores': [1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [1, 0, -1, -1, -1]}


It took  4.394000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 6)]
Will move (9, 6)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 7)]
Will move (9, 7)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1481, in solve_system
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1424, in system_walk
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 230, in _deepcopy_list
    y.append(deepcopy(a, memo))
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 244, in _deepcopy_tuple
    if x[i] is not y[i]:
KeyboardInterrupt
-------------------------- running turn 67 ---------------------------
It took  19.623000ms for start to complete


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                   X                 
 5                   -                 
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

Awarded move for (9, 4)  to (9, 5)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                                     
 5                                     
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 244

-------------------------------------
TARGET system:
25 participants
()
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                                     
 5                                     
 6                   X                 
 7               X   X   X             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   X             
12                   X                 
13                                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
25 participants
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                                     
 5                                     
 6                   0                 
 7               0   0   0             
 8           0   0   0   0   0         
 9       0   0   0   0   0   0   0     
10           0   0   0   0   0         
11               0   0   0             
12                   0                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 3                                     
 4                                     
 5                                     
 6                   9                 
 7               9  10   9             
 8           9  10  11  10   9         
 9       9  10  11  12  11  10   9     
10           9  10  11  10   9         
11               9  10   9             
12                   9                 
13                                     

The system now has a total of 128144531250000 options
The initial system score was 251
The maximum obtainable for the system is 252
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 25
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 128144531250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [1, 0]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11)], 'scores': [1, 1, 0]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 4) - {'options': [(9, 5)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [1, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [1, 1, 0]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7)], 'scores': [1, 1, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [1, 1, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [1, 1, 0]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [1, 1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [1, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [1, 1, 0]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [1, 1, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [1, 0]}


It took  4.762000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 4) - {'options': [(9, 5)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 9.16 Ms for simplify_system to complete
It took a total of 19.62 Ms for start to complete
-------------------------- running turn 68 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.565000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.56 Ms for simplify_system to complete
-------------------------- running turn 69 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.697000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.70 Ms for simplify_system to complete
-------------------------- running turn 70 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.521000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.52 Ms for simplify_system to complete
-------------------------- running turn 71 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.808000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.81 Ms for simplify_system to complete
-------------------------- running turn 72 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.561000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.56 Ms for simplify_system to complete
-------------------------- running turn 73 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.777000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.78 Ms for simplify_system to complete
-------------------------- running turn 74 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.626000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.63 Ms for simplify_system to complete
-------------------------- running turn 75 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.778000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.78 Ms for simplify_system to complete
-------------------------- running turn 76 ---------------------------


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   X   -             
 6               -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X   -             
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   1                 
 6               1   X   1             
 7           1   X   X   X   1         
 8       1   X   X   X   X   X   1     
 9   1   X   X   X   X   X   X   X   1 
10       1   X   X   X   X   X   1     
11           1   X   X   X   1         
12               1   X   1             
13                   1                 


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   ?                 
 6               -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   0   0   0   -     
 9   -   0   0   0   0   0   0   0   - 
10       -   0   0   0   0   0   -     
11           -   0   0   0   -         
12               -   0   -             
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 4                                     
 5                   8                 
 6               8   9   8             
 7           8   9  10   9   8         
 8       8   9  10  11  10   9   8     
 9   8   9  10  11  12  11  10   9   8 
10       8   9  10  11  10   9   8     
11           8   9  10   9   8         
12               8   9   8             
13                   8                 

The system now has a total of 128746032714843750 options
The initial system score was 252
The maximum obtainable for the system is 252
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 128746032714843750 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [1, 0, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.618000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.62 Ms for simplify_system to complete
-------------------------- running turn 77 ---------------------------


=> INITIAL
BOT Positions:
30 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -       -     
 9   -   X   X   X   X   X   X   X   -   X     
10       -   X   X   X   X   X   -   -   X     
11           -   X   X   X   -                 
12           X   -   X   -                     
13                   -                         
14                   X                         
15                                             

Awarded move for (14, 9)  to (13, 9)
Awarded move for (9, 14)  to (9, 13)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X       -     
10       -   X   X   X   X   X   -   -   X     
11           -   X   X   X   -                 
12           X   -   X   -                     
13                                             
14                                             
15                                             

determine_ideal_outcome called with [(6, 9), (10, 11), (7, 12), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (14, 10), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (7, 12), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(7, 12), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   2                         
 6               2   X   2                     
 7           2   X   X   X   2                 
 8       2   X   X   X   X   X   2             
 9   2   X   X   X   X   X   X   X             
10       2   X   X   X   X   X   2             
11           2   X   X   X   2                 
12               2   X   2                     
13                                             
14                                             
15                                             

This is system split, groups are...
0
  [(14, 10), [(14, 9)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0             
10       -   0   0   0   0   0   -             
11           -   0   0   0   -                 
12           X   -   0   -                     
13                                             
14                                             
15                                             

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9             
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12           7   8   9   8                     
13                                             
14                                             
15                                             

The system now has a total of 457763671875000000 options
The initial system score was 279
The maximum obtainable for the system is 283
The score gain were looking for is 4
The system_score_gain_required = 1

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 12)]
bots_outside_system_moving_to_optional  = [(7, 12)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5), (7, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 457763671875000000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(7, 12) - {'options': [(7, 11), (8, 12)], 'scores': [1, 1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (10, 12), (8, 12)], 'scores': [1, 0, -1, -1]}


It took  5.476000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (7, 12), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(7, 12)]
Will move (7, 12)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 11)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 4
this possibility has a score of 4
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 11)], 'scores': [1]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (9, 14): {'options': [(9, 13)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(7, 12) - {'options': [(7, 11)], 'scores': [1]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(9, 14) - {'options': [(9, 13)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 5.48 Ms for simplify_system to complete
-------------------------- running turn 78 ---------------------------


=> INITIAL
BOT Positions:
31 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7       X   -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           X   X   X   X   -                 
12           -   -   X   -                     
13                   X                         
14                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7       X   -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           X   X   X   X   -                 
12           -   -   X   -                     
13                   X                         
14                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {6: [(14, 10)], 7: [(7, 12), (14, 9), (6, 7), (13, 10), (9, 14), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 292

-------------------------------------
TARGET system:
31 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   6                         
 6               6   X   6                     
 7           6   X   X   X   6                 
 8       6   X   X   X   X   X   6             
 9   6   X   X   X   X   X   X   X   6         
10       6   X   X   X   X   X   6             
11           6   X   X   X   6                 
12               6   X   6                     
13                   6                         
14                                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7       X   -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0   ?   X     
10       -   0   0   0   0   0   -             
11           ?   0   0   0   -                 
12               -   0   -                     
13                   ?                         
14                                             

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7       7   8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9   8   7     
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12               8   9   8                     
13                   8                         
14                                             

The system now has a total of 2059936523437500000 options
The initial system score was 290
The maximum obtainable for the system is 292
The score gain were looking for is 2
The system_score_gain_required = 2

bots_in_optional = [(7, 11), (13, 9), (9, 13), (9, 5)]
bots_in_optional_moving_to_occupied = [(13, 9)]
bots_outside_system = [(14, 9), (6, 7)]
bots_outside_system_moving_to_optional  = [(14, 9), (6, 7)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(12, 9)]
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 25
current_bots_in_optional = [(7, 11), (9, 13), (9, 5), (14, 9), (6, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(7, 11), (9, 13), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(12, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(13, 9)]
So lets move one of [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 2059936523437500000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [1, 1, 0]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(6, 7) - {'options': [(7, 7), (6, 8)], 'scores': [1, 1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [1, 0, -1, -1, -1]}


It took  4.990000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(12, 9), (6, 7)]
Will move (6, 7)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(12, 9)]
Will move (12, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (7, 10), (9, 7), (8, 11), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 11)]
Will move (8, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (8, 10), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(8, 10)]
Will move (8, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (7, 11), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (7, 11), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (7, 11), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (7, 11), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(11, 8)]
Will move (11, 8)
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1481, in solve_system
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1424, in system_walk
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 193, in deepcopy
    _keep_alive(x, memo) # Make sure x lives at least as long as d
KeyboardInterrupt
-------------------------- running turn 79 ---------------------------
It took  53.535000ms for start to complete


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   -   X     
10       -   X   X   X   X   X   -             
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         

Awarded move for (14, 9)  to (13, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X             
10       -   X   X   X   X   X   -             
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 1
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 252

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   1                         
 6               1   X   1                     
 7           1   X   X   X   1                 
 8       1   X   X   X   X   X   1             
 9   1   X   X   X   X   X   X   X             
10       1   X   X   X   X   X   1             
11           1   X   X   X   1                 
12               1   X   1                     
13                   1                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0             
10       -   0   0   0   0   0   -             
11           -   0   0   0   -                 
12               -   0   -                     
13                   -                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9             
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12               8   9   8                     
13                   8                         

The system now has a total of 171661376953125000 options
The initial system score was 259
The maximum obtainable for the system is 260
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 171661376953125000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.111000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 9.10 Ms for simplify_system to complete
It took a total of 53.54 Ms for start to complete
-------------------------- running turn 80 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.866000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.87 Ms for simplify_system to complete
-------------------------- running turn 81 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.962000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.96 Ms for simplify_system to complete
-------------------------- running turn 82 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.818000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.82 Ms for simplify_system to complete
-------------------------- running turn 83 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  16  
 4                                                 
 5                   X   -                         
 6               -   X   -                         
 7           -   X   X   X   -                     
 8       -   X   X   X   X   X   -                 
 9   -   X   X   X   X   X   X   X   X   -   X     
10       -   X   X   X   X   X   -   -             
11           -   X   X   X   -                     
12               -   X   -                         
13                   -                             

Awarded move for (15, 9)  to (14, 9)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  15  16  
 4                                                 
 5                   X   -                         
 6               -   X   -                         
 7           -   X   X   X   -                     
 8       -   X   X   X   X   X   -                 
 9   -   X   X   X   X   X   X   X   X             
10       -   X   X   X   X   X   -   -             
11           -   X   X   X   -                     
12               -   X   -                         
13                   -                             

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  15  16  
 4                                                 
 5                   2                             
 6               2   X   2                         
 7           2   X   X   X   2                     
 8       2   X   X   X   X   X   2                 
 9   2   X   X   X   X   X   X   X   2             
10       2   X   X   X   X   X   2                 
11           2   X   X   X   2                     
12               2   X   2                         
13                   2                             


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  15  16  
 4                                                 
 5                   ?                             
 6               -   0   -                         
 7           -   0   0   0   -                     
 8       -   0   0   0   0   0   -                 
 9   -   0   0   0   0   0   0   0   ?             
10       -   0   0   0   0   0   -                 
11           -   0   0   0   -                     
12               -   0   -                         
13                   -                             

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  16  
 4                                                 
 5                   8                             
 6               8   9   8                         
 7           8   9  10   9   8                     
 8       8   9  10  11  10   9   8                 
 9   8   9  10  11  12  11  10   9   8             
10       8   9  10  11  10   9   8                 
11           8   9  10   9   8                     
12               8   9   8                         
13                   8                             

The system now has a total of 429153442382812500 options
The initial system score was 266
The maximum obtainable for the system is 267
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.447000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [1]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(15, 9) - {'options': [(14, 9)], 'scores': [1]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.45 Ms for simplify_system to complete
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 70, in _get_action
    robot.robot_id + 1, action, robot.location)
Exception: Bot 59: ['guard', (9, 6)] is not a valid action from (9, 6)
-------------------------- running turn 84 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 3
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {6: [(14, 10)], 7: [(14, 9), (13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 268

-------------------------------------
TARGET system:
28 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   3                         
 6               3   X   3                     
 7           3   X   X   X   3                 
 8       3   X   X   X   X   X   3             
 9   3   X   X   X   X   X   X   X   3         
10       3   X   X   X   X   X   3             
11           3   X   X   X   3                 
12               3   X   3                     
13                   3                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0   ?   X     
10       -   0   0   0   0   0   -             
11           -   0   0   0   -                 
12               -   0   -                     
13                   -                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9   8   7     
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12               8   9   8                     
13                   8                         

The system now has a total of 102996826171875000 options
The initial system score was 267
The maximum obtainable for the system is 268
The score gain were looking for is 1
The system_score_gain_required = 1

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = [(13, 9)]
bots_outside_system = [(14, 9)]
bots_outside_system_moving_to_optional  = [(14, 9)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(12, 9)]
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5), (14, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(12, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(13, 9)]
So lets move one of [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 102996826171875000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.628000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(12, 9)]
Will move (12, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 11)]
Will move (9, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (7, 10), (9, 7), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(8, 11)]
Will move (8, 11)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 10)]
Will move (8, 10)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(8, 9)]
Will move (8, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
filtered = [(8, 8)]
Will move (8, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(9, 8)]
Will move (9, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (9, 12)]
filtered = [(10, 8)]
Will move (10, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(11, 8)]
Will move (11, 8)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (11, 10), (10, 7), (7, 10), (9, 7), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 10), (7, 10)), ((9, 7), (9, 7)), ((8, 7), (8, 7)), ((9, 5), (9, 5)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
Top solution detected - avalanching down
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(11, 8)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [-1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [-1]}, (8, 9): {'options': [(8, 8)], 'scores': [-1]}, (14, 9): {'options': [(13, 9)], 'scores': [1]}, (12, 9): {'options': [(11, 9)], 'scores': [1]}, (10, 8): {'options': [(11, 8)], 'scores': [-1]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 9)], 'scores': [1]}, (9, 11): {'options': [(8, 11)], 'scores': [-1]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(9, 9)], 'scores': [1]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [1]}, (11, 9): {'options': [(10, 9)], 'scores': [1]}, (9, 10): {'options': [(9, 11)], 'scores': [-1]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [-1]}, (9, 9): {'options': [(9, 10)], 'scores': [-1]}, (8, 8): {'options': [(9, 8)], 'scores': [1]}, (13, 9): {'options': [(12, 9)], 'scores': [1]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [-1]}
(8, 9) - {'options': [(8, 8)], 'scores': [-1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9)], 'scores': [1]}
(10, 8) - {'options': [(11, 8)], 'scores': [-1]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 9)], 'scores': [1]}
(9, 11) - {'options': [(8, 11)], 'scores': [-1]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(9, 9)], 'scores': [1]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 10)], 'scores': [1]}
(11, 9) - {'options': [(10, 9)], 'scores': [1]}
(9, 10) - {'options': [(9, 11)], 'scores': [-1]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 7)], 'scores': [-1]}
(9, 9) - {'options': [(9, 10)], 'scores': [-1]}
(8, 8) - {'options': [(9, 8)], 'scores': [1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.63 Ms for simplify_system to complete
-------------------------- running turn 85 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   X   -         
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   X   -         
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 3
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (12, 7), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 268

-------------------------------------
TARGET system:
28 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   3                     
 6               3   X   3                 
 7           3   X   X   X   3             
 8       3   X   X   X   X   X   3         
 9   3   X   X   X   X   X   X   X   3     
10       3   X   X   X   X   X   3         
11           3   X   X   X   3             
12               3   X   3                 
13                   3                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   ?             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 1287460327148437500 options
The initial system score was 268
The maximum obtainable for the system is 268
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (11, 7), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (11, 7), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (11, 7), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 1287460327148437500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7)], 'scores': [1, 1, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.110000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (11, 7), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1481, in solve_system
  File "<string>", line 1452, in system_walk
  File "<string>", line 1325, in is_valid
  File "<string>", line 253, in consolodate
KeyboardInterrupt
-------------------------- running turn 86 ---------------------------
It took  3.109000ms for start to complete


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.071000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 8.18 Ms for simplify_system to complete
It took a total of 3.11 Ms for start to complete
-------------------------- running turn 87 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.841000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.84 Ms for simplify_system to complete
-------------------------- running turn 88 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -   -         
 9   -   X   X   X   X   X   X   X   X   -     
10       -   X   X   X   X   X   -   -   X     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -   -         
 9   -   X   X   X   X   X   X   X   X   -     
10       -   X   X   X   X   X   -   -   X     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (14, 10), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 8), (14, 9), (13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   2                         
 6               2   X   2                     
 7           2   X   X   X   2                 
 8       2   X   X   X   X   X   2             
 9   2   X   X   X   X   X   X   X   2         
10       2   X   X   X   X   X   2             
11           2   X   X   X   2                 
12               2   X   2                     
13                   2                         

This is system split, groups are...
0
  [(14, 10), [(14, 9)], [1]]



-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0   ?         
10       -   0   0   0   0   0   -             
11           -   0   0   0   -                 
12               -   0   -                     
13                   -                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9   8         
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12               8   9   8                     
13                   8                         

The system now has a total of 429153442382812500 options
The initial system score was 266
The maximum obtainable for the system is 267
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.771000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(14, 9)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(14, 10) - {'options': [(14, 9)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.77 Ms for simplify_system to complete
-------------------------- running turn 89 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   X   -                     
 6               -   X   -                     
 7           -   X   X   X   -                 
 8       -   X   X   X   X   X   -             
 9   -   X   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -   -     
11           -   X   X   X   -                 
12               -   X   -                     
13                   -                         

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 3
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {6: [(14, 10)], 7: [(14, 9), (13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 268

-------------------------------------
TARGET system:
28 participants
()
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   3                         
 6               3   X   3                     
 7           3   X   X   X   3                 
 8       3   X   X   X   X   X   3             
 9   3   X   X   X   X   X   X   X   3         
10       3   X   X   X   X   X   3             
11           3   X   X   X   3                 
12               3   X   3                     
13                   3                         


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   ?                         
 6               -   0   -                     
 7           -   0   0   0   -                 
 8       -   0   0   0   0   0   -             
 9   -   0   0   0   0   0   0   0   ?   X     
10       -   0   0   0   0   0   -             
11           -   0   0   0   -                 
12               -   0   -                     
13                   -                         

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  15  
 4                                             
 5                   8                         
 6               8   9   8                     
 7           8   9  10   9   8                 
 8       8   9  10  11  10   9   8             
 9   8   9  10  11  12  11  10   9   8   7     
10       8   9  10  11  10   9   8             
11           8   9  10   9   8                 
12               8   9   8                     
13                   8                         

The system now has a total of 102996826171875000 options
The initial system score was 267
The maximum obtainable for the system is 268
The score gain were looking for is 1
The system_score_gain_required = 1

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = [(13, 9)]
bots_outside_system = [(14, 9)]
bots_outside_system_moving_to_optional  = [(14, 9)]
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(12, 9)]
num_target_bots_in_optional = 3
num_target_bots_in_occupied = 25
current_bots_in_optional = [(9, 5), (14, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(12, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12), (13, 9)]

Optional squares exist
1 bots need to move into optional
And 1 bots need to move out of occupied
LOGIC NEEDS ATTENTION ON MOVE
bots_in_optional_moving_to_occupied = [(13, 9)]
So lets move one of [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
Who is near the entering bot (above), into the nearest available optional square

System result = ...
The system has a total of 102996826171875000 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(14, 9) - {'options': [(13, 9)], 'scores': [1]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [1, 0, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9)], 'scores': [1]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.351000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(12, 9)]
Will move (12, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(11, 9)]
Will move (11, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(10, 9)]
Will move (10, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 5), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
filtered = [(9, 9)]
Will move (9, 9)
0 systems were filtered as they were not valid
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = [(9, 10)]
Will move (9, 10)
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1718, in act
  File "<string>", line 1673, in decide_actions
  File "<string>", line 1559, in choose_moves
  File "<string>", line 1481, in solve_system
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1441, in system_walk
  File "<string>", line 1424, in system_walk
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 163, in deepcopy
    y = copier(x, memo)
  File "/usr/lib/python2.7/copy.py", line 257, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/usr/lib/python2.7/copy.py", line 155, in deepcopy
    y = memo.get(d, _nil)
KeyboardInterrupt
-------------------------- running turn 90 ---------------------------
It took  21.632000ms for start to complete


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.823000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 8.17 Ms for simplify_system to complete
It took a total of 21.63 Ms for start to complete
-------------------------- running turn 91 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.169000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.17 Ms for simplify_system to complete
-------------------------- running turn 92 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.966000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.97 Ms for simplify_system to complete
-------------------------- running turn 93 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.021000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.02 Ms for simplify_system to complete
-------------------------- running turn 94 ---------------------------


=> INITIAL
BOT Positions:
28 participants
     5   6   7   8   9  10  11  12  13  14  
 2                                         
 3                   X                     
 4                   -                     
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

Awarded move for (9, 3)  to (9, 4)
simplification made, repeating

-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 2                                         
 3                                         
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 2                                         
 3                                         
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 2                                         
 3                                         
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 2                                         
 3                                         
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 266
The maximum obtainable for the system is 267
The score gain were looking for is 1
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(9, 3) - {'options': [(9, 4)], 'scores': [1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  4.420000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 1
this possibility has a score of 1
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [1]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 3) - {'options': [(9, 4)], 'scores': [1]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 4.42 Ms for simplify_system to complete
-------------------------- running turn 95 ---------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.7/site-packages/rgkit/game.py", line 65, in _get_action
    action = self._robot.act(game_info)
  File "<string>", line 1713, in act
  File "<string>", line 156, in movement_gains
KeyboardInterrupt
-------------------------- running turn 96 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.828000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.83 Ms for simplify_system to complete
-------------------------- running turn 97 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.821000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.82 Ms for simplify_system to complete
-------------------------- running turn 98 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.918000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.92 Ms for simplify_system to complete
-------------------------- running turn 99 ---------------------------


=> INITIAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   X   -                 
 6               -   X   -                 
 7           -   X   X   X   -             
 8       -   X   X   X   X   X   -         
 9   -   X   X   X   X   X   X   X   X     
10       -   X   X   X   X   X   -   -     
11           -   X   X   X   -             
12               -   X   -                 
13                   -                     

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 2
optional - [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(9, 9), (9, 8), (8, 9), (10, 9), (9, 10), (8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8), (6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {7: [(13, 10), (10, 5)], 8: [(5, 9), (11, 11), (10, 6), (7, 7), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)], 9: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)], 10: [(8, 10), (10, 8), (9, 11), (9, 7), (11, 9), (7, 9), (10, 10), (8, 8)], 11: [(9, 8), (8, 9), (10, 9), (9, 10)], 12: [(9, 9)]}
max_score - 260

-------------------------------------
TARGET system:
27 participants
()
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   2                     
 6               2   X   2                 
 7           2   X   X   X   2             
 8       2   X   X   X   X   X   2         
 9   2   X   X   X   X   X   X   X   2     
10       2   X   X   X   X   X   2         
11           2   X   X   X   2             
12               2   X   2                 
13                   2                     


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
27 participants
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   ?                     
 6               -   0   -                 
 7           -   0   0   0   -             
 8       -   0   0   0   0   0   -         
 9   -   0   0   0   0   0   0   0   ?     
10       -   0   0   0   0   0   -         
11           -   0   0   0   -             
12               -   0   -                 
13                   -                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  14  
 4                                         
 5                   8                     
 6               8   9   8                 
 7           8   9  10   9   8             
 8       8   9  10  11  10   9   8         
 9   8   9  10  11  12  11  10   9   8     
10       8   9  10  11  10   9   8         
11           8   9  10   9   8             
12               8   9   8                 
13                   8                     

The system now has a total of 429153442382812500 options
The initial system score was 260
The maximum obtainable for the system is 260
The score gain were looking for is 0
The system_score_gain_required = 0

bots_in_optional = [(13, 9), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 25
current_bots_in_optional = [(13, 9), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(13, 9), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]

Optional squares exist

System result = ...
The system has a total of 429153442382812500 options
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9)], 'scores': [1, 0, -1]}
(10, 11) - {'options': [(9, 11), (10, 10), (10, 11), (11, 11), (10, 12)], 'scores': [1, 1, 0, -1, -1]}
(9, 8) - {'options': [(9, 9), (9, 8), (10, 8), (8, 8), (9, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8), (8, 10), (7, 9)], 'scores': [1, 0, -1, -1, -1]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [1, 0, -1, -1, -1]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [1, 1, 0, -1, -1]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10), (11, 11)], 'scores': [1, 1, 0, -1, -1]}
(10, 7) - {'options': [(10, 8), (9, 7), (10, 7), (10, 6), (11, 7)], 'scores': [1, 1, 0, -1, -1]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [1, 1, 0, -1, -1]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [1, 0, -1, -1, -1]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10), (7, 11), (6, 10)], 'scores': [1, 1, 0, -1, -1]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [1, 0, -1, -1, -1]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11), (7, 11), (8, 12)], 'scores': [1, 1, 0, -1, -1]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10), (12, 9)], 'scores': [1, 0, -1, -1, -1]}
(9, 10) - {'options': [(9, 9), (9, 10), (9, 11), (8, 10), (10, 10)], 'scores': [1, 0, -1, -1, -1]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7), (8, 6), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [1, 0]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [1, 0, -1, -1, -1]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [1, 0, -1, -1, -1]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [1, 1, 0, -1, -1]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7), (12, 8)], 'scores': [1, 1, 0, -1, -1]}
(9, 9) - {'options': [(9, 9), (9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [0, -1, -1, -1, -1]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [1, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8), (7, 7)], 'scores': [1, 1, 0, -1, -1]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [1, 0, -1]}


It took  3.829000ms for simplify_system to complete
possible bots to move = [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
filtered = []
No bots that need to move could be found
Works... [((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((13, 9), (13, 9)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
A system with max gain has been found!
possibilities from system_walk are...
[{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}]
checking possibility for score of 0
this possibility has a score of 0
checking
{(6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
Found a winner!!!!!!!!!!!!!!
solve_system returned - choose moves will return
(6, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 11) - {'options': [(10, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 7)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(9, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
It took a total of 3.83 Ms for simplify_system to complete
