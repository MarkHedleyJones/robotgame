Game seed: 682678103
Match seed: 682678103-0
--------------------------- running turn 0 ---------------------------
--------------------------- running turn 1 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 2,12) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 1) (friendly)  vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 2, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 5): {'options': [(2, 6)], 'scores': [2]}
(2, 6): {'options': [(2, 7)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(2, 5): {'options': [(2, 6)], 'scores': [2]}, (2, 6): {'options': [(2, 7)], 'scores': [2]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (2, 12): {'options': [(3, 12)], 'scores': [2]}, (10, 1): {'options': [(9, 1)], 'scores': [2]}}
--------------------------- running turn 2 ---------------------------
frontline_radius = 0
( 2, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,12) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 5,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 7): {'options': [(2, 8)], 'scores': [2]}
(2, 6): {'options': [(2, 7)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(2, 7): {'options': [(2, 8)], 'scores': [2]}, (2, 6): {'options': [(2, 7)], 'scores': [2]}, (3, 12): {'options': [(4, 12)], 'scores': [2]}, (9, 1): {'options': [(9, 2)], 'scores': [2]}, (5, 15): {'options': [(5, 14)], 'scores': [2]}}
--------------------------- running turn 3 ---------------------------
frontline_radius = 0
( 2, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 2) (friendly)  vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 4,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 7): {'options': [(2, 8)], 'scores': [2]}
(2, 8): {'options': [(3, 8)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(2, 7): {'options': [(2, 8)], 'scores': [2]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (4, 12): {'options': [(5, 12)], 'scores': [2]}, (5, 14): {'options': [(6, 14)], 'scores': [2]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}}
--------------------------- running turn 4 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability = 11 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 6,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(3, 8): {'options': [(3, 9)], 'scores': [2]}
(2, 8): {'options': [(3, 8)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(3, 8): {'options': [(3, 9)], 'scores': [2]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (5, 12): {'options': [(6, 12)], 'scores': [2]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (6, 14): {'options': [(7, 14)], 'scores': [2]}}
--------------------------- running turn 5 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 6,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(3, 8): {'options': [(3, 9)], 'scores': [2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(3, 8): {'options': [(3, 9)], 'scores': [2]}, (6, 12): {'options': [(7, 12)], 'scores': [2]}, (7, 14): {'options': [(8, 14)], 'scores': [2]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}}
--------------------------- running turn 6 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  9 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(7, 12): {'options': [(7, 11)], 'scores': [2]}, (8, 14): {'options': [(9, 14)], 'scores': [2]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}}
--------------------------- running turn 7 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(9, 6): {'options': [(9, 7)], 'scores': [2]}, (5, 9): {'options': [(6, 9)], 'scores': [2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (7, 11): {'options': [(8, 11)], 'scores': [2]}}
--------------------------- running turn 8 ---------------------------
frontline_radius = 0
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 8)], 'scores': [2]}, (8, 11): {'options': [(9, 11)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}}
--------------------------- running turn 9 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(7, 9): {'options': [(8, 9)], 'scores': [2]}
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 11): {'options': [(9, 10)], 'scores': [2]}
(9, 12): {'options': [(9, 11)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 10)], 'scores': [2]}, (9, 8): {'options': [(9, 9)], 'scores': [2]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [2]}}
-------------------------- running turn 10 ---------------------------
frontline_radius = 0
(16, 6) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,17) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (8, 9), (9, 11), (9, 9), (7, 9)]
Precheck for obvious moves
BOT Positions:
5 participants
     6   7   8   9  10  
 8           -   =     
 9       ?   0   0     
10           -   0     
11               ?     
12                     




TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
BOT Positions:
2 participants
     6   7   8   9  10  
 8                     
 9       O   .         
10               .     
11               O     
12                     
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
The tmp_system has under 100 moves, solving NOW


=> INITIAL
BOT Positions:
4 participants
     6   7   8   9  10  
 8           -   -     
 9       X   X   X     
10           -   X     
11                     
12                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
4 participants
     6   7   8   9  10  
 8           -   -     
 9       X   X   X     
10           -   X     
11                     
12                     

System can be split into 2 systems
Solving system # 0
(9, 10) - {'options': [(9, 9), (8, 10)], 'scores': [2, -2]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8)], 'scores': [2, 0, -2]}
(9, 9) - {'options': [(9, 9), (8, 9), (9, 8)], 'scores': [0, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
This subsystem has less than 10000 options, solving
(9, 10) - {'options': [(9, 9), (8, 10)], 'scores': [2, -2]}
(8, 9) - {'options': [(9, 9), (8, 9), (8, 8)], 'scores': [2, 0, -2]}
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 9), (8, 9), (9, 8)], 'scores': [0, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
Solving system # 1
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 9)], 'scores': [2]}
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [2]}
(9, 9): {'options': [(9, 8)], 'scores': [-2]}
(7, 9): {'options': [(7, 9)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     


The initial system score was 188
The maximum obtainable for the system is 190
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     

Cell Scores:
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(9, 10) - {'options': [(9, 9)], 'scores': [2]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [-2]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}


The system changed while in simplyfy, running system through simplyfy_system again


=> INITIAL
BOT Positions:
0 participants
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     

System can be split into 5 systems
Solving system # 0
(9, 10) - {'options': [(9, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 8)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 4
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 9)], 'scores': [2]}
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 11): {'options': [(9, 10)], 'scores': [2]}
(9, 9): {'options': [(9, 8)], 'scores': [-2]}
(7, 9): {'options': [(7, 9)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     


The initial system score was 188
The maximum obtainable for the system is 190
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     

Cell Scores:
     6   7   8   9  10  
 8                     
 9                     
10                     
11                     
12                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(9, 10) - {'options': [(9, 9)], 'scores': [2]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 11) - {'options': [(9, 10)], 'scores': [2]}
(9, 9) - {'options': [(9, 8)], 'scores': [-2]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}


The system did not change in simplify system, returning
settle_sys returned with {(9, 10): {'options': [(9, 9)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [2]}, (9, 9): {'options': [(9, 8)], 'scores': [-2]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 11 ---------------------------
frontline_radius = 0
( 3,15) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8,17) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              20  22  24  22  20                              
 2                      18  20  22  24  26  24  22  20  18                      
 3              16  18  20  22  24  26  28  26  24  22  20  18  16              
 4              18  20  22  24  26  28  30  28  26  24  22  20  18              
 5          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
 6          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 7      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
 8      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 9      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
10      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
11      20  22  24  26  28  30  32  34  36  34  32  30  28  26  24  22  20      
12          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
13          18  20  22  24  26  28  30  32  30  28  26  24  22  20  18          
14              18  20  22  24  26  28  30  28  26  24  22  20  18              
15              16  18  20  22  24  26  28  26  24  22  20  18  16              
16                      18  20  22  24  26  24  22  20  18                      
17                              20  22  24  22  20                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (7, 9)]


=> INITIAL
BOT Positions:
0 participants
     6   7   8   9  10  
 7                     
 8                     
 9                     
10                     
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     6   7   8   9  10  
 7                     
 8                     
 9                     
10                     
11                     

System can be split into 5 systems
Solving system # 0
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(10, 9)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 4
(7, 9) - {'options': [(8, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(8, 9): {'options': [(9, 9)], 'scores': [2]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(9, 9): {'options': [(10, 9)], 'scores': [-2]}
(7, 9): {'options': [(8, 9)], 'scores': [2]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     6   7   8   9  10  
 7                     
 8                     
 9                     
10                     
11                     


The initial system score was 190
The maximum obtainable for the system is 192
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     6   7   8   9  10  
 7                     
 8                     
 9                     
10                     
11                     

Cell Scores:
     6   7   8   9  10  
 7                     
 8                     
 9                     
10                     
11                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 9) - {'options': [(9, 9)], 'scores': [2]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(9, 9) - {'options': [(10, 9)], 'scores': [-2]}
(7, 9) - {'options': [(8, 9)], 'scores': [2]}


The system did not change in simplify system, returning
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(15, 14): {'options': [(15, 13)], 'scores': [2]}
(15, 15): {'options': [(15, 14)], 'scores': [2]}
determine_ideal_outcome called with []
settle_sys returned with {(3, 15): {'options': [(4, 15)], 'scores': [2]}, (15, 14): {'options': [(15, 13)], 'scores': [2]}, (8, 1): {'options': [(8, 2)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(10, 9)], 'scores': [-2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 17): {'options': [(8, 16)], 'scores': [2]}, (8, 9): {'options': [(9, 9)], 'scores': [2]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [2]}}
-------------------------- running turn 12 ---------------------------
frontline_radius = 1
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 2) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 4,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,16) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     

determine_ideal_outcome called with [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
available_bots - [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
levels - {40: [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]}
max_score - 200

-------------------------------------
TARGET system:
5 participants
()
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


The initial system score was 200
The maximum obtainable for the system is 200
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           0         
 9       0   0   0     
10           0         
11                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8          40         
 9      40  40  40     
10          40         
11                     

The system now has a total of 80 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 80 options
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(15, 14): {'options': [(15, 13)], 'scores': [2]}
(15, 13): {'options': [(15, 12)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 13): {'options': [(15, 12)], 'scores': [2]}, (8, 2): {'options': [(9, 2)], 'scores': [2]}, (4, 15): {'options': [(5, 15)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 14): {'options': [(15, 13)], 'scores': [2]}, (8, 16): {'options': [(9, 16)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 13 ---------------------------
frontline_radius = 1
(15,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  0 health_diffs =  0
( 9, 2) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 5,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  0 health_diffs =  0
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(15, 12): {'options': [(14, 12)], 'scores': [2]}
(15, 13): {'options': [(15, 12)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     

determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
available_bots - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
levels - {40: [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]}
max_score - 200

-------------------------------------
TARGET system:
5 participants
()
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


The initial system score was 200
The maximum obtainable for the system is 200
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           0         
 9       0   0   0     
10           0         
11                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8          40         
 9      40  40  40     
10          40         
11                     

The system now has a total of 80 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 80 options
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(15, 12): {'options': [(14, 12)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 13): {'options': [(15, 12)], 'scores': [2]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [2]}, (5, 15): {'options': [(5, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 14 ---------------------------
frontline_radius = 1
(15,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 5,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(15, 12): {'options': [(14, 12)], 'scores': [2]}
(14, 12): {'options': [(14, 11)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     

determine_ideal_outcome called with [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
available_bots - [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
levels - {40: [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]}
max_score - 200

-------------------------------------
TARGET system:
5 participants
()
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


The initial system score was 200
The maximum obtainable for the system is 200
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 10), (9, 8), (9, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           0         
 9       0   0   0     
10           0         
11                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8          40         
 9      40  40  40     
10          40         
11                     

The system now has a total of 80 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 80 options
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(15, 12): {'options': [(14, 12)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (14, 12): {'options': [(14, 11)], 'scores': [2]}, (5, 14): {'options': [(6, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 15 ---------------------------
frontline_radius = 1
(14,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(14, 11): {'options': [(14, 10)], 'scores': [2]}
(14, 12): {'options': [(14, 11)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     

determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
available_bots - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
levels - {40: [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]}
max_score - 200

-------------------------------------
TARGET system:
5 participants
()
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


The initial system score was 200
The maximum obtainable for the system is 200
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           0         
 9       0   0   0     
10           0         
11                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8          40         
 9      40  40  40     
10          40         
11                     

The system now has a total of 80 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 80 options
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(14, 11): {'options': [(14, 10)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (14, 12): {'options': [(14, 11)], 'scores': [2]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (6, 14): {'options': [(7, 14)], 'scores': [2]}}
-------------------------- running turn 16 ---------------------------
frontline_radius = 1
(14,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(14, 11): {'options': [(14, 10)], 'scores': [2]}
(14, 10): {'options': [(14, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


=> INITIAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     

determine_ideal_outcome called with [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
available_bots - [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
levels - {40: [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]}
max_score - 200

-------------------------------------
TARGET system:
5 participants
()
     7   8   9  10  11  
 7                     
 8           X         
 9       X   X   X     
10           X         
11                     


The initial system score was 200
The maximum obtainable for the system is 200
The score gain were looking for is 0
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 5
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
5 participants
     7   8   9  10  11  
 7                     
 8           0         
 9       0   0   0     
10           0         
11                     

Cell Scores:
     7   8   9  10  11  
 7                     
 8          40         
 9      40  40  40     
10          40         
11                     

The system now has a total of 80 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 80 options
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(9, 10) - {'options': [(9, 10), (9, 9)], 'scores': [0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9)], 'scores': [0, 0]}
(9, 8) - {'options': [(9, 8), (9, 9)], 'scores': [0, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(10, 9) - {'options': [(9, 9), (10, 9)], 'scores': [0, 0]}
determine_ideal_outcome called with []
settle_sys returned with {(14, 11): {'options': [(14, 10)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (7, 14): {'options': [(8, 14)], 'scores': [2]}, (14, 10): {'options': [(14, 9)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 17 ---------------------------
frontline_radius = 1
( 8,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(14, 9): {'options': [(13, 9)], 'scores': [2]}
(14, 10): {'options': [(14, 9)], 'scores': [2]}
determine_ideal_outcome called with []
Awarded move for (9, 12)  to (9, 11)
Awarded move for (9, 6)  to (9, 7)
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8)], 'scores': [0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9)], 'scores': [0, 0, -2, -2]}
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(9, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [2]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  
 5                     
 6                     
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  
 5                     
 6                     
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     

System can be split into 7 systems
Solving system # 0
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 1
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 3
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 6
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(9, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 10): {'options': [(9, 10)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [2]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(10, 9): {'options': [(10, 9)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  
 5                     
 6                     
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     


The initial system score was 272
The maximum obtainable for the system is 276
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  
 5                     
 6                     
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     

Cell Scores:
     7   8   9  10  11  
 5                     
 6                     
 7                     
 8                     
 9                     
10                     
11                     
12                     
13                     

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}


The system did not change in simplify system, returning
settle_sys returned with {(8, 14): {'options': [(9, 14)], 'scores': [2]}, (14, 10): {'options': [(14, 9)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}}
-------------------------- running turn 18 ---------------------------
frontline_radius = 1
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (9, 8), (9, 9), (8, 9), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           X         
 8       -   X   -     
 9   -   X   X   X   - 
10       -   X   -     
11           X         
12                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           X         
 8       -   X   -     
 9   -   X   X   X   - 
10       -   X   -     
11           X         
12                     

determine_ideal_outcome called with [(9, 10), (9, 8), (9, 9), (8, 9), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 2
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (9, 9), (8, 9), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 276

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  
 6                     
 7           2         
 8       2   X   2     
 9   2   X   X   X   2 
10       2   X   2     
11           2         
12                     


The initial system score was 276
The maximum obtainable for the system is 276
The score gain were looking for is 0
bots_in_optional = [(9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 5
current_bots_in_optional = [(9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           ?         
 8       -   0   -     
 9   -   0   0   0   - 
10       -   0   -     
11           ?         
12                     

Cell Scores:
     7   8   9  10  11  
 6                     
 7          38         
 8      38  40  38     
 9  38  40  40  40  38 
10      38  40  38     
11          38         
12                     

The system now has a total of 10000 options
Optional squares exist

System result = ...
The system has a total of 10000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 0
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(14, 9): {'options': [(13, 9)], 'scores': [2]}
determine_ideal_outcome called with []
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 19 ---------------------------
frontline_radius = 1
( 9,13) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Awarded move for (12, 9)  to (11, 9)
Awarded move for (13, 9)  to (12, 9)
determine_ideal_outcome called with [(8, 9), (9, 8), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           X         
 8       -   X   -     
 9   -   X   X   X     
10       -   X   -     
11           X         
12                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           X         
 8       -   X   -     
 9   -   X   X   X     
10       -   X   -     
11           X         
12                     

determine_ideal_outcome called with [(8, 9), (9, 8), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 2
optional - [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]
occupied - [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
available_bots - [(8, 9), (9, 8), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (9, 7), (7, 9)]}
max_score - 276

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  
 6                     
 7           2         
 8       2   X   2     
 9   2   X   X   X     
10       2   X   2     
11           2         
12                     


The initial system score was 276
The maximum obtainable for the system is 276
The score gain were looking for is 0
bots_in_optional = [(9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 5
current_bots_in_optional = [(9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 11), (9, 7)]
current_bots_in_occupied = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(8, 9), (9, 8), (9, 10), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(8, 9), (9, 8), (9, 9), (9, 10), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  
 6                     
 7           ?         
 8       -   0   -     
 9   -   0   0   0     
10       -   0   -     
11           ?         
12                     

Cell Scores:
     7   8   9  10  11  
 6                     
 7          38         
 8      38  40  38     
 9  38  40  40  40     
10      38  40  38     
11          38         
12                     

The system now has a total of 10000 options
Optional squares exist

System result = ...
The system has a total of 10000 options
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X                     
 8       -   X   -                 
 9   -   X   X   X                 
10       -   X   -                 
11           X                     
12                                 
13                                 
14                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X                     
 8       -   X   -                 
 9   -   X   X   X                 
10       -   X   -                 
11           X                     
12                                 
13                                 
14                                 

System can be split into 4 systems
Solving system # 0
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A subsystem...
has 7 members
10000 combinations
determine_ideal_outcome called with [(8, 9), (9, 8), (9, 9), (9, 10), (9, 11), (10, 9), (9, 7)]
simplified...
10000 combinations

Solving system # 2
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 2
optional - [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 8), (9, 9), (9, 10), (9, 11), (8, 9), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]}
max_score - 276

-------------------------------------
TARGET system:
7 participants
()
     7   8   9  10  11  12  13  14  
 6                                 
 7           2                     
 8       2   X   2                 
 9   2   X   X   X                 
10       2   X   2                 
11           2                     
12                                 
13                                 
14                                 


The initial system score was 380
The maximum obtainable for the system is 386
The score gain were looking for is 6
bots_in_optional = [(9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 2
num_target_bots_in_occupied = 5
current_bots_in_optional = [(9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
7 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           ?                     
 8       -   0   -                 
 9   -   0   0   0                 
10       -   0   -                 
11           ?                     
12                                 
13                                 
14                                 

Cell Scores:
     7   8   9  10  11  12  13  14  
 6                                 
 7          38                     
 8      38  40  38                 
 9  38  40  40  40                 
10      38  40  38                 
11          38                     
12                                 
13                                 
14                                 

The system now has a total of 10000 options
Optional squares exist

System result = ...
The system has a total of 10000 options
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 6
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (10, 10)], 'scores': [0, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
settle_sys returned with {(9, 13): {'options': [(9, 12)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 10)], 'scores': [2]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (8, 9): {'options': [(8, 8)], 'scores': [-2]}, (12, 9): {'options': [(11, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 20 ---------------------------
frontline_radius = 1
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability = 16 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 3, 4) (enemy)     vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
Awarded move for (9, 12)  to (9, 11)
determine_ideal_outcome called with [(8, 9), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (12, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
7 participants
     7   8   9  10  11  12  13  
 6                             
 7           X                 
 8       X   X   -             
 9   -   X   X   X             
10       -   X   -             
11                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
7 participants
     7   8   9  10  11  12  13  
 6                             
 7           X                 
 8       X   X   -             
 9   -   X   X   X             
10       -   X   -             
11                             

System can be split into 3 systems
Solving system # 0
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
This subsystem has less than 10000 options, solving
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
Solving system # 1
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(11, 9): {'options': [(10, 9)], 'scores': [2]}
(9, 9): {'options': [(9, 10)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [-2]}
(8, 8): {'options': [(8, 8)], 'scores': [0]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 7): {'options': [(9, 7)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             


The initial system score was 350
The maximum obtainable for the system is 352
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             

Cell Scores:
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(9, 9) - {'options': [(9, 10)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}


The system changed while in simplyfy, running system through simplyfy_system again


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             

System can be split into 9 systems
Solving system # 0
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 1
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 7
(10, 9) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 8
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(11, 9): {'options': [(10, 9)], 'scores': [2]}
(9, 9): {'options': [(9, 10)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [-2]}
(8, 8): {'options': [(8, 8)], 'scores': [0]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 7): {'options': [(9, 7)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             


The initial system score was 350
The maximum obtainable for the system is 352
The score gain were looking for is 2
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             

Cell Scores:
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(9, 9) - {'options': [(9, 10)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(11, 9): {'options': [(10, 9)], 'scores': [2]}
(9, 9): {'options': [(9, 10)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [-2]}
(8, 8): {'options': [(8, 8)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [2]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 7): {'options': [(9, 7)], 'scores': [0]}
determine_ideal_outcome called with []


=> INITIAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             
12                             
13                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             
12                             
13                             

System can be split into 10 systems
Solving system # 0
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
This system has 1 move so it already solved!
Solving system # 1
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 2
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 9) - {'options': [(9, 10)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 4
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 5
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 6
(10, 9) - {'options': [(9, 9)], 'scores': [0]}
This system has 1 move so it already solved!
Solving system # 7
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 8
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 9
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(8, 9): {'options': [(8, 9)], 'scores': [0]}
(9, 8): {'options': [(9, 8)], 'scores': [0]}
(11, 9): {'options': [(10, 9)], 'scores': [2]}
(9, 9): {'options': [(9, 10)], 'scores': [0]}
(9, 10): {'options': [(8, 10)], 'scores': [-2]}
(8, 8): {'options': [(8, 8)], 'scores': [0]}
(9, 12): {'options': [(9, 11)], 'scores': [2]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9)], 'scores': [0]}
(9, 7): {'options': [(9, 7)], 'scores': [0]}
determine_ideal_outcome called with []
outcome = 
num_optional - 0
optional - []
occupied - []
available_bots - []
levels - {}
max_score - 0

-------------------------------------
TARGET system:
0 participants
()
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             
12                             
13                             


The initial system score was 386
The maximum obtainable for the system is 390
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = []
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 0
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = []
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = []


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
0 participants
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             
12                             
13                             

Cell Scores:
     7   8   9  10  11  12  13  
 6                             
 7                             
 8                             
 9                             
10                             
11                             
12                             
13                             

The system now has a total of 1 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 1 options
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(9, 9) - {'options': [(9, 10)], 'scores': [0]}
(9, 10) - {'options': [(8, 10)], 'scores': [-2]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 11)], 'scores': [2]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}


The system did not change in simplify system, returning
settle_sys returned with {(8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [2]}, (9, 9): {'options': [(9, 10)], 'scores': [0]}, (9, 10): {'options': [(8, 10)], 'scores': [-2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [2]}, (12, 9): {'options': [(11, 9)], 'scores': [2]}, (10, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 21 ---------------------------
frontline_radius = 1
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs =  0
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7, 1) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 4) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,12) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
(12,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  0 health_diffs =  0
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


The initial system score was 390
The maximum obtainable for the system is 390
The score gain were looking for is 0
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          38             
 8      38  40  38         
 9  38  40  40  40  38     
10      38  40  38         
11          38             
12                         

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.233000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (17, 9): {'options': [(16, 9)], 'scores': [2]}, (7, 1): {'options': [(8, 1)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (2, 12): {'options': [(3, 12)], 'scores': [2]}, (12, 16): {'options': [(11, 16)], 'scores': [2]}, (15, 4): {'options': [(15, 5)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 22 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  0
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs =  0
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs =  0
( 3,12) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 9) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 5) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


The initial system score was 390
The maximum obtainable for the system is 390
The score gain were looking for is 0
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          38             
 8      38  40  38         
 9  38  40  40  40  38     
10      38  40  38         
11          38             
12                         

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.230000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 12): {'options': [(4, 12)], 'scores': [2]}, (8, 1): {'options': [(8, 2)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (16, 9): {'options': [(15, 9)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (15, 5): {'options': [(15, 6)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 23 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  4
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -4
( 4,12) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 8, 2) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  0
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


The initial system score was 390
The maximum obtainable for the system is 390
The score gain were looking for is 0
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          38             
 8      38  40  38         
 9  38  40  40  40  38     
10      38  40  38         
11          38             
12                         

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.240000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (4, 12): {'options': [(5, 12)], 'scores': [2]}, (8, 2): {'options': [(9, 2)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 24 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs =  8
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -4
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -8
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 2) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  4
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,12) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


The initial system score was 390
The maximum obtainable for the system is 390
The score gain were looking for is 0
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          38             
 8      38  40  38         
 9  38  40  40  40  38     
10      38  40  38         
11          38             
12                         

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.237000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (5, 12): {'options': [(6, 12)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 25 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 12
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -12
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  8
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 6,12) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           X             
 8       X   X   -         
 9   -   X   X   X   X     
10       X   X   -         
11           X             
12                         

determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  
 6                         
 7           5             
 8       5   X   5         
 9   5   X   X   X   5     
10       5   X   5         
11           5             
12                         


The initial system score was 390
The maximum obtainable for the system is 390
The score gain were looking for is 0
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  
 6                         
 7           ?             
 8       ?   0   -         
 9   -   0   0   0   ?     
10       ?   0   -         
11           ?             
12                         

Cell Scores:
     7   8   9  10  11  12  
 6                         
 7          38             
 8      38  40  38         
 9  38  40  40  40  38     
10      38  40  38         
11          38             
12                         

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
10 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X                     
 8       X   X   -                 
 9   -   X   X   X   X             
10       X   X   -                 
11           X                     
12                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
10 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           X                     
 8       X   X   -                 
 9   -   X   X   X   X             
10       X   X   -                 
11           X                     
12                                 

System can be split into 2 systems
Solving system # 0
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A subsystem...
has 10 members
225000 combinations
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
simplified...
225000 combinations

Solving system # 1
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (8, 8), (11, 9), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 390

-------------------------------------
TARGET system:
10 participants
()
     7   8   9  10  11  12  13  14  
 6                                 
 7           5                     
 8       5   X   5                 
 9   5   X   X   X   5             
10       5   X   5                 
11           5                     
12                                 


The initial system score was 424
The maximum obtainable for the system is 426
The score gain were looking for is 2
bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 5
current_bots_in_optional = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 9), (8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
10 participants
     7   8   9  10  11  12  13  14  
 6                                 
 7           ?                     
 8       ?   0   -                 
 9   -   0   0   0   ?             
10       ?   0   -                 
11           ?                     
12                                 

Cell Scores:
     7   8   9  10  11  12  13  14  
 6                                 
 7          38                     
 8      38  40  38                 
 9  38  40  40  40  38             
10      38  40  38                 
11          38                     
12                                 

The system now has a total of 225000 options
Optional squares exist

System result = ...
The system has a total of 225000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((9, 10), (9, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.388000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (6, 12): {'options': [(7, 12)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 26 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 17
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -13
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -17
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = 13
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(9, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (12, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
9 participants
     7   8   9  10  11  12  13  
 6                             
 7           X                 
 8       X   X   -             
 9   -   X   X   X             
10       X   X   -             
11           X                 
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
9 participants
     7   8   9  10  11  12  13  
 6                             
 7           X                 
 8       X   X   -             
 9   -   X   X   X             
10       X   X   -             
11           X                 
12                             

System can be split into 3 systems
Solving system # 0
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A subsystem...
has 9 members
54000 combinations
determine_ideal_outcome called with [(9, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
simplified...
54000 combinations

Solving system # 1
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(12, 9): {'options': [(11, 9)], 'scores': [2]}
(10, 9): {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
outcome = 
num_optional - 5
optional - [(10, 8), (10, 10), (8, 8), (8, 10), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9)]
available_bots - [(9, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 11), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9)], 38: [(10, 8), (10, 10), (8, 8), (8, 10), (9, 11), (7, 9), (9, 7)]}
max_score - 350

-------------------------------------
TARGET system:
9 participants
()
     7   8   9  10  11  12  13  
 6                             
 7           5                 
 8       5   X   5             
 9   5   X   X                 
10       5   X   5             
11           5                 
12                             


The initial system score was 426
The maximum obtainable for the system is 428
The score gain were looking for is 2
bots_in_optional = [(8, 10), (8, 8), (9, 11), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(10, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 5
num_target_bots_in_occupied = 4
current_bots_in_optional = [(8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (8, 8), (9, 11), (9, 7)]
current_bots_in_occupied = [(9, 10), (9, 8), (9, 9), (8, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 10), (9, 8), (8, 9)]
current_bots_outside = [(10, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 10), (9, 8), (9, 9), (8, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
9 participants
     7   8   9  10  11  12  13  
 6                             
 7           ?                 
 8       ?   0   -             
 9   -   0   0   X             
10       ?   0   -             
11           ?                 
12                             

Cell Scores:
     7   8   9  10  11  12  13  
 6                             
 7          38                 
 8      38  40  38             
 9  38  40  40  40             
10      38  40  38             
11          38                 
12                             

The system now has a total of 54000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 54000 options
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 2
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9)], 'scores': [0, 0, 0, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9)], 'scores': [2]}
(10, 9) - {'options': [(9, 9), (10, 8), (10, 10)], 'scores': [0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (7, 12): {'options': [(7, 11)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(10, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 9)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(7, 9)], 'scores': [-2]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (12, 9): {'options': [(11, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 8)], 'scores': [-2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 27 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 21
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -17
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -21
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 17
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
Awarded move for (9, 5)  to (9, 6)
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (7, 11), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(7, 11)]
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [2, 2, 0, -2, -2]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9), (11, 8), (11, 10)], 'scores': [2, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10)], 'scores': [2, 2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [2, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [2, 0, -2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [2, 0, -2, -2]}


=> INITIAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 6                             
 7               X             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11               X             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 6                             
 7               X             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11               X             
12                             

System can be split into 2 systems
Solving system # 0
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A subsystem...
has 11 members
450000 combinations
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
simplified...
450000 combinations

Solving system # 1
(7, 11) - {'options': [(8, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 8): {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(7, 11): {'options': [(8, 11)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]}
max_score - 428

-------------------------------------
TARGET system:
11 participants
()
     6   7   8   9  10  11  12  
 6                             
 7               6             
 8           6   X   6         
 9       6   X   X   X   6     
10           6   X   6         
11               6             
12                             


The initial system score was 462
The maximum obtainable for the system is 464
The score gain were looking for is 2
bots_in_optional = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 6                             
 7               ?             
 8           ?   0   ?         
 9       ?   0   0   0   ?     
10           -   0   -         
11               ?             
12                             

Cell Scores:
     6   7   8   9  10  11  12  
 6                             
 7              38             
 8          38  40  38         
 9      38  40  40  40  38     
10          38  40  38         
11              38             
12                             

The system now has a total of 450000 options
Optional squares exist

System result = ...
The system has a total of 450000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 8): {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(7, 11): {'options': [(8, 11)], 'scores': [2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 4                             
 5                             
 6                             
 7               X             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11               X             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 4                             
 5                             
 6                             
 7               X             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11               X             
12                             

System can be split into 3 systems
Solving system # 0
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A subsystem...
has 11 members
450000 combinations
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
simplified...
450000 combinations

Solving system # 1
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(7, 11) - {'options': [(8, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 8): {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8): {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(7, 11): {'options': [(8, 11)], 'scores': [2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 6
optional - [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]
occupied - [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
levels - {40: [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9), (9, 7)]}
max_score - 428

-------------------------------------
TARGET system:
11 participants
()
     6   7   8   9  10  11  12  
 4                             
 5                             
 6                             
 7               6             
 8           6   X   6         
 9       6   X   X   X   6     
10           6   X   6         
11               6             
12                             


The initial system score was 496
The maximum obtainable for the system is 500
The score gain were looking for is 4
bots_in_optional = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 5
current_bots_in_optional = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(10, 8), (11, 9), (8, 8), (9, 11), (7, 9), (9, 7)]
current_bots_in_occupied = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (9, 10), (8, 9), (10, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (9, 9), (9, 10), (8, 9), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 4                             
 5                             
 6                             
 7               ?             
 8           ?   0   ?         
 9       ?   0   0   0   ?     
10           -   0   -         
11               ?             
12                             

Cell Scores:
     6   7   8   9  10  11  12  
 4                             
 5                             
 6                             
 7              38             
 8          38  40  38         
 9      38  40  40  40  38     
10          38  40  38         
11              38             
12                             

The system now has a total of 450000 options
Optional squares exist

System result = ...
The system has a total of 450000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(7, 11) - {'options': [(8, 11)], 'scores': [2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((10, 8), (10, 8))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8)], 'scores': [2, 2, 0]}
(9, 8) - {'options': [(9, 8), (9, 9), (10, 8), (8, 8), (9, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(7, 11) - {'options': [(8, 11)], 'scores': [2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7)], 'scores': [2, 0]}
A system with max gain has been found!
It took  1.646000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 11): {'options': [(8, 11)], 'scores': [2]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 28 ---------------------------
frontline_radius = 1
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 25
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -22
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -25
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = 22
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              22  24  26  24  22                              
 2                      20  22  24  26  28  26  24  22  20                      
 3              18  20  22  24  26  28  30  28  26  24  22  20  18              
 4              20  22  24  26  28  30  32  30  28  26  24  22  20              
 5          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
 6          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 7      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
 8      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 9      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
10      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
11      22  24  26  28  30  32  34  36  38  36  34  32  30  28  26  24  22      
12          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
13          20  22  24  26  28  30  32  34  32  30  28  26  24  22  20          
14              20  22  24  26  28  30  32  30  28  26  24  22  20              
15              18  20  22  24  26  28  30  28  26  24  22  20  18              
16                      20  22  24  26  28  26  24  22  20                      
17                              22  24  26  24  22                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (9, 6), (8, 11), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 5                             
 6                             
 7                             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11           X   X             
12                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 5                             
 6                             
 7                             
 8           X   X   X         
 9       X   X   X   X   X     
10           -   X   -         
11           X   X             
12                             

System can be split into 3 systems
Solving system # 0
(10, 8) - {'options': [(10, 9), (10, 8)], 'scores': [2, 0]}
(9, 8) - {'options': [(9, 9), (10, 8), (8, 8)], 'scores': [0, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (8, 8)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10)], 'scores': [2, 2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
A subsystem...
has 11 members
96000 combinations
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (8, 11), (10, 9), (7, 9)]
simplified...
96000 combinations

Solving system # 1
(9, 7) - {'options': [(9, 8)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(10, 8): {'options': [(10, 9), (10, 8)], 'scores': [2, 0]}
(9, 8): {'options': [(9, 9), (10, 8), (8, 8)], 'scores': [0, -2, -2]}
(11, 9): {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0]}
(9, 10): {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8): {'options': [(8, 9), (8, 8)], 'scores': [2, 0]}
(9, 11): {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9): {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(8, 11): {'options': [(9, 11), (8, 10)], 'scores': [2, 2]}
(10, 9): {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8)], 'scores': [2]}
determine_ideal_outcome called with [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9)]
outcome = 
num_optional - 0
optional - []
occupied - [(9, 9), (9, 10), (8, 9), (10, 9), (10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9)]
available_bots - [(10, 8), (9, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (8, 11), (10, 9)]
levels - {40: [(9, 9), (9, 10), (8, 9), (10, 9)], 38: [(10, 8), (10, 10), (11, 9), (8, 10), (8, 8), (9, 11), (7, 9)]}
max_score - 426

-------------------------------------
TARGET system:
11 participants
()
     6   7   8   9  10  11  12  
 5                             
 6                             
 7                             
 8           X       X         
 9       X   X   X   X   X     
10           X   X   X         
11               X             
12                             


The initial system score was 500
The maximum obtainable for the system is 504
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 8), (8, 11)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 8), (8, 11)]
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 11
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(10, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (7, 9), (9, 8), (8, 11)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = [(8, 10), (10, 10)]
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (11, 9), (9, 9), (9, 10), (8, 8), (9, 11), (8, 9), (10, 9), (7, 9), (9, 8), (8, 11)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
11 participants
     6   7   8   9  10  11  12  
 5                             
 6                             
 7                             
 8           0   X   0         
 9       0   0   0   0   0     
10           =   0   =         
11           X   0             
12                             

Cell Scores:
     6   7   8   9  10  11  12  
 5                             
 6                             
 7                             
 8          38  40  38         
 9      38  40  40  40  38     
10          38  40  38         
11          36  38             
12                             

The system now has a total of 96000 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 96000 options
(10, 8) - {'options': [(10, 9), (10, 8)], 'scores': [2, 0]}
(9, 8) - {'options': [(9, 9), (10, 8), (8, 8)], 'scores': [0, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (8, 8)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(8, 11) - {'options': [(9, 11), (8, 10)], 'scores': [2, 2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8)], 'scores': [2]}


The system did not change in simplify system, returning
Ran full set of options and didnt find top result
Score is 4
(10, 8) - {'options': [(10, 9), (10, 8)], 'scores': [2, 0]}
(9, 8) - {'options': [(9, 9), (10, 8), (8, 8)], 'scores': [0, -2, -2]}
(11, 9) - {'options': [(10, 9), (11, 9)], 'scores': [2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 9), (10, 9)], 'scores': [0, 0, 0, 0]}
(9, 10) - {'options': [(9, 10), (9, 9), (9, 11), (8, 10), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(8, 8) - {'options': [(8, 9), (8, 8)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9), (9, 9), (8, 8), (8, 10), (7, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(8, 11) - {'options': [(9, 11), (8, 10)], 'scores': [2, 2]}
(10, 9) - {'options': [(9, 9), (10, 9), (10, 8), (11, 9), (10, 10)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8)], 'scores': [2]}
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (10, 8): {'options': [(10, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [-2]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [-2]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 8)], 'scores': [2]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (8, 11): {'options': [(8, 10)], 'scores': [2]}, (10, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 29 ---------------------------
frontline_radius = 2
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 30
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -26
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -30
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 26
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.838000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
-------------------------- running turn 30 ---------------------------
frontline_radius = 2
(11,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 34
(16, 6) (enemy)     vulnerability = 14 attack_ratio =  0 health_diffs = -30
(11,17) (enemy)     vulnerability = 11 attack_ratio =  0 health_diffs = -34
( 3,14) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 30
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 6, 2) (enemy)     vulnerability = 12 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.885000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 31 ---------------------------
frontline_radius = 2
(11,16) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 1,11) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 1, 8) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.854000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (3, 3): {'options': [(3, 4)], 'scores': [2]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (1, 8): {'options': [(2, 8)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (1, 11): {'options': [(1, 10)], 'scores': [2]}, (2, 5): {'options': [(2, 6)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 32 ---------------------------
frontline_radius = 2
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 2) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,15) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.851000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 8): {'options': [(3, 8)], 'scores': [2]}
(2, 6): {'options': [(2, 7)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (2, 6): {'options': [(2, 7)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 7): {'options': [(15, 8)], 'scores': [2]}, (11, 15): {'options': [(10, 15)], 'scores': [2]}, (1, 10): {'options': [(1, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (11, 2): {'options': [(11, 3)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 33 ---------------------------
frontline_radius = 2
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 4) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 7): {'options': [(2, 8)], 'scores': [2]}
(3, 8): {'options': [(3, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.849000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(2, 7): {'options': [(2, 8)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (4, 4): {'options': [(4, 5)], 'scores': [2]}, (3, 8): {'options': [(3, 9)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 15): {'options': [(10, 14)], 'scores': [2]}, (11, 3): {'options': [(11, 4)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [2]}, (1, 9): {'options': [(2, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 34 ---------------------------
frontline_radius = 2
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 5) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 4) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.829000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 8): {'options': [(3, 8)], 'scores': [2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(2, 9): {'options': [(3, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 4): {'options': [(11, 5)], 'scores': [2]}, (2, 9): {'options': [(3, 9)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (4, 5): {'options': [(5, 5)], 'scores': [2]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 14): {'options': [(10, 13)], 'scores': [2]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 35 ---------------------------
frontline_radius = 2
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 5) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(11, 5) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
Move ((10, 8), (10, 8))
Move ((10, 10), (10, 10))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((10, 10), (10, 10)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8)], 'scores': [0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9)], 'scores': [0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  1.825000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(3, 8): {'options': [(3, 9)], 'scores': [2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (5, 5): {'options': [(5, 6)], 'scores': [2]}, (10, 13): {'options': [(9, 13)], 'scores': [2]}, (11, 5): {'options': [(10, 5)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (3, 8): {'options': [(3, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 36 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5, 6) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
Awarded move for (5, 9)  to (6, 9)
Awarded move for (4, 9)  to (5, 9)
Awarded move for (3, 9)  to (4, 9)
Awarded move for (9, 13)  to (9, 12)
Awarded move for (13, 9)  to (12, 9)
determine_ideal_outcome called with [(8, 9), (10, 8), (10, 10), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (7, 9), (10, 9), (9, 7)]

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10)], 'scores': [0, 0, -2, -2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [0, 0, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (10, 9), (9, 11), (9, 10), (10, 10), (7, 9)]


=> INITIAL
BOT Positions:
13 participants
     2   3   4   5   6   7   8   9  10  11  12  13  14  
 6                               -                     
 7                           -   X   -                 
 8                       -   X   X   X   -             
 9                       X   X   X   X   X             
10                       -   X   X   X   -             
11                           -   X   -                 
12                                                     
13                                                     
14                                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
13 participants
     2   3   4   5   6   7   8   9  10  11  12  13  14  
 6                               -                     
 7                           -   X   -                 
 8                       -   X   X   X   -             
 9                       X   X   X   X   X             
10                       -   X   X   X   -             
11                           -   X   -                 
12                                                     
13                                                     
14                                                     

System can be split into 6 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10)], 'scores': [0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
A subsystem...
has 13 members
500000000 combinations
determine_ideal_outcome called with [(8, 9), (10, 8), (10, 10), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (9, 11), (7, 9), (10, 9), (9, 7)]
simplified...
500000000 combinations

Solving system # 2
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10)], 'scores': [0, 0, -2, -2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [0, 0, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 9): {'options': [(8, 9), (7, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (10, 9), (9, 11), (9, 10), (10, 10), (7, 9)]
outcome = 
num_optional - 1
optional - [(10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 7), (10, 8), (8, 8), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (10, 9), (9, 11), (9, 10), (10, 10), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(10, 11), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8)]}
max_score - 518

-------------------------------------
TARGET system:
13 participants
()
     2   3   4   5   6   7   8   9  10  11  12  13  14  
 6                               1                     
 7                           1   X   1                 
 8                       1   X   X   X   1             
 9                       X   X   1   X   X             
10                       1   X   X   X   1             
11                           1   X   1                 
12                                                     
13                                                     
14                                                     


The initial system score was 692
The maximum obtainable for the system is 702
The score gain were looking for is 10
bots_in_optional = [(9, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 12
current_bots_in_optional = [(9, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
13 participants
     2   3   4   5   6   7   8   9  10  11  12  13  14  
 6                               -                     
 7                           -   0   -                 
 8                       -   0   0   0   -             
 9                       0   0   ?   0   0             
10                       -   0   0   0   -             
11                           -   0   -                 
12                                                     
13                                                     
14                                                     

Cell Scores:
     2   3   4   5   6   7   8   9  10  11  12  13  14  
 6                              38                     
 7                          38  40  38                 
 8                      38  40  40  40  38             
 9                      40  40  38  40  40             
10                      38  40  40  40  38             
11                          38  40  38                 
12                                                     
13                                                     
14                                                     

The system now has a total of 500000000 options
Optional squares exist

System result = ...
The system has a total of 500000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10)], 'scores': [0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 7), (9, 7))
Move ((10, 8), (10, 8))
Move ((8, 8), (8, 8))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((10, 9), (10, 9))
Move ((9, 11), (9, 11))
Move ((9, 10), (9, 10))
Move ((10, 10), (10, 10))
Move ((7, 9), (7, 9))
Works... [((9, 7), (9, 7)), ((10, 8), (10, 8)), ((8, 8), (8, 8)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((10, 9), (10, 9)), ((9, 11), (9, 11)), ((9, 10), (9, 10)), ((10, 10), (10, 10)), ((7, 9), (7, 9))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6)], 'scores': [0, 0, -2, -2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10)], 'scores': [0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11)], 'scores': [0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  2.627000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (10, 5): {'options': [(9, 5)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (5, 6): {'options': [(5, 7)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 37 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
Awarded move for (9, 5)  to (9, 6)
determine_ideal_outcome called with [(5, 9), (6, 9), (9, 7), (4, 9), (10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(4, 9)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10)], 'scores': [2, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9), (6, 10)], 'scores': [2, 0, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9) - {'options': [(5, 9), (4, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [2, 0, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [2, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


=> INITIAL
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 6                                             
 7                       -   X   -             
 8                   -   X   X   X   -         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   -         
11                       -   X   -             
12                           X                 
13                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 6                                             
 7                       -   X   -             
 8                   -   X   X   X   -         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   -         
11                       -   X   -             
12                           X                 
13                                             

System can be split into 4 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
A subsystem...
has 15 members
1875000000 combinations
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (10, 9), (9, 7)]
simplified...
1875000000 combinations

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]
outcome = 
num_optional - 4
optional - [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)]
available_bots - [(9, 7), (10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)], 38: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 592

-------------------------------------
TARGET system:
15 participants
()
     3   4   5   6   7   8   9  10  11  12  13  
 6                                             
 7                       4   X   4             
 8                   4   X   X   X   4         
 9                       X   4   X   X   4     
10                   4   X   X   X   4         
11                       4   X   4             
12                           4                 
13                                             


The initial system score was 702
The maximum obtainable for the system is 706
The score gain were looking for is 4
bots_in_optional = [(9, 9), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 11
current_bots_in_optional = [(9, 9), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 9), (9, 12), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_outside = [(7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 6                                             
 7                       -   0   -             
 8                   -   0   0   0   -         
 9                   X   0   ?   0   0   ?     
10                   -   0   0   0   -         
11                       -   0   -             
12                           ?                 
13                                             

Cell Scores:
     3   4   5   6   7   8   9  10  11  12  13  
 6                                             
 7                      38  40  38             
 8                  38  40  40  40  38         
 9                  40  40  38  40  40  38     
10                  38  40  40  40  38         
11                      38  40  38             
12                          38                 
13                                             

The system now has a total of 1875000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 1875000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(5, 7): {'options': [(6, 7)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (10, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (11, 9), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   X   -             
 8                   -   X   X   X   -         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   -         
11                       -   X   -             
12                           X                 
13                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   X   -             
 8                   -   X   X   X   -         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   -         
11                       -   X   -             
12                           X                 
13                                             

System can be split into 6 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
A subsystem...
has 15 members
1875000000 combinations
determine_ideal_outcome called with [(10, 8), (10, 10), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (10, 9), (9, 7)]
simplified...
1875000000 combinations

Solving system # 3
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(5, 7): {'options': [(6, 7)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (10, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (11, 9), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]
outcome = 
num_optional - 4
optional - [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)]
available_bots - [(9, 7), (10, 8), (10, 10), (9, 8), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (11, 9), (9, 11), (9, 10), (12, 9), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)], 38: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 592

-------------------------------------
TARGET system:
15 participants
()
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       4   X   4             
 8                   4   X   X   X   4         
 9                       X   4   X   X   4     
10                   4   X   X   X   4         
11                       4   X   4             
12                           4                 
13                                             


The initial system score was 770
The maximum obtainable for the system is 778
The score gain were looking for is 8
bots_in_optional = [(9, 9), (9, 12), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 4
num_target_bots_in_occupied = 11
current_bots_in_optional = [(9, 9), (9, 12), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 9), (9, 12), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_outside = [(7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
15 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   0   -             
 8                   -   0   0   0   -         
 9                   X   0   ?   0   0   ?     
10                   -   0   0   0   -         
11                       -   0   -             
12                           ?                 
13                                             

Cell Scores:
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                      38  40  38             
 8                  38  40  40  40  38         
 9                  40  40  38  40  40  38     
10                  38  40  40  40  38         
11                      38  40  38             
12                          38                 
13                                             

The system now has a total of 1875000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 1875000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (8, 7)], 'scores': [0, 0, -2, -2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}


The system did not change in simplify system, returning
Move ((10, 10), (10, 10))
Move ((9, 11), (9, 11))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((9, 10), (9, 10))
Move ((9, 12), (9, 12))
Move ((9, 7), (9, 7))
Works... [((10, 10), (10, 10)), ((9, 11), (9, 11)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 10), (9, 10)), ((9, 12), (9, 12)), ((9, 7), (9, 7))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(11, 9) - {'options': [(11, 8)], 'scores': [-2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 8) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 8) - {'options': [(10, 8)], 'scores': [0]}
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (9, 9)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 8)], 'scores': [0]}
(8, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 7) - {'options': [(9, 7), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
A system with max gain has been found!
It took  1.776000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (11, 9): {'options': [(11, 8)], 'scores': [-2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (11, 9): {'options': [(11, 8)], 'scores': [-2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}}
-------------------------- running turn 38 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (9, 10), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (9, 11), (9, 7), (9, 6), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   -   X   -             
 8               -   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   -         
11                   -   X   -             
12                       X                 
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   -   X   -             
 8               -   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   -         
11                   -   X   -             
12                       X                 
13                                         

System can be split into 3 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 17 members
14062500000 combinations
determine_ideal_outcome called with [(10, 8), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (10, 9), (9, 7)]
simplified...
14062500000 combinations

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 10), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (9, 11), (9, 7), (9, 6), (10, 9), (7, 9)]
outcome = 
num_optional - 6
optional - [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)]
available_bots - [(9, 10), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (9, 11), (9, 7), (9, 6), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)], 38: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 668

-------------------------------------
TARGET system:
17 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       6                 
 7                   6   X   6             
 8               6   X   X   X   6         
 9                   X   6   X   X   6     
10               6   X   X   X   6         
11                   6   X   6             
12                       6                 
13                                         


The initial system score was 744
The maximum obtainable for the system is 746
The score gain were looking for is 2
bots_in_optional = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 11
current_bots_in_optional = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_outside = [(7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       ?                 
 7                   -   0   -             
 8               -   0   0   0   ?         
 9               X   0   ?   0   0   ?     
10               -   0   0   0   -         
11                   -   0   -             
12                       ?                 
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                      38                 
 7                  38  40  38             
 8              38  40  40  40  38         
 9              40  40  38  40  40  38     
10              38  40  40  40  38         
11                  38  40  38             
12                      38                 
13                                         

The system now has a total of 14062500000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 14062500000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(6, 7): {'options': [(7, 7)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (9, 6), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   -   X   -             
 8               -   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   -         
11                   -   X   -             
12                       X                 
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   -   X   -             
 8               -   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   -         
11                   -   X   -             
12                       X                 
13                                         

System can be split into 4 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(6, 7) - {'options': [(7, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 17 members
14062500000 combinations
determine_ideal_outcome called with [(10, 8), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (10, 9), (9, 7)]
simplified...
14062500000 combinations

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(6, 7): {'options': [(7, 7)], 'scores': [2]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(9, 7), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (9, 6), (10, 9), (7, 9)]
outcome = 
num_optional - 6
optional - [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)]
available_bots - [(9, 7), (10, 8), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (9, 11), (9, 10), (9, 6), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)], 38: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 668

-------------------------------------
TARGET system:
17 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       6                 
 7                   6   X   6             
 8               6   X   X   X   6         
 9                   X   6   X   X   6     
10               6   X   X   X   6         
11                   6   X   6             
12                       6                 
13                                         


The initial system score was 778
The maximum obtainable for the system is 782
The score gain were looking for is 4
bots_in_optional = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 11
current_bots_in_optional = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 8), (12, 9), (9, 9), (9, 12), (9, 6)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]
current_bots_outside = [(7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
17 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       ?                 
 7                   -   0   -             
 8               -   0   0   0   ?         
 9               X   0   ?   0   0   ?     
10               -   0   0   0   -         
11                   -   0   -             
12                       ?                 
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                      38                 
 7                  38  40  38             
 8              38  40  40  40  38         
 9              40  40  38  40  40  38     
10              38  40  40  40  38         
11                  38  40  38             
12                      38                 
13                                         

The system now has a total of 14062500000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 14062500000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(6, 7) - {'options': [(7, 7)], 'scores': [2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 7), (9, 7))
Move ((10, 10), (10, 10))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((9, 12), (9, 12))
Move ((9, 11), (9, 11))
Move ((9, 10), (9, 10))
Move ((9, 6), (9, 6))
Works... [((9, 7), (9, 7)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((9, 10), (9, 10)), ((9, 6), (9, 6))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, -2, -2, -2]}
(6, 7) - {'options': [(7, 7)], 'scores': [2]}
(10, 8) - {'options': [(10, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10), (10, 10), (10, 11)], 'scores': [0, 0, -2]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 10)], 'scores': [-2]}
(8, 10) - {'options': [(9, 10), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (9, 9)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 8)], 'scores': [0]}
(8, 8) - {'options': [(9, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(10, 9) - {'options': [(11, 9)], 'scores': [0]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
A system with max gain has been found!
It took  1.974000ms for system_walk to complete
It took  0.013000ms for system_walk to complete
It took  0.019000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 7): {'options': [(7, 7)], 'scores': [2]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 7): {'options': [(7, 7)], 'scores': [2]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}}
-------------------------- running turn 39 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7           X   -   X   -             
 8           -   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7           X   -   X   -             
 8           -   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (7, 7), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 782
The maximum obtainable for the system is 784
The score gain were looking for is 2
bots_in_optional = [(11, 10), (11, 8), (9, 6), (9, 9), (9, 12), (12, 9), (6, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 7)]
bots_outside_system_moving_to_optional  = [(7, 7)]
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(11, 10), (11, 8), (9, 6), (9, 9), (9, 12), (12, 9), (6, 9), (7, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (11, 8), (9, 6), (9, 9), (9, 12), (12, 9), (6, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7           X   -   0   -             
 8           -   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7          36  38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 351562500000 options
Optional squares exist

System result = ...
The system has a total of 351562500000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7)], 'scores': [2, 2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((12, 9), (12, 9))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((10, 9), (10, 9))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((9, 7), (9, 7))
Move ((9, 6), (9, 6))
Move ((6, 9), (6, 9))
Move ((9, 12), (9, 12))
Move ((7, 9), (7, 9))
Works... [((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((12, 9), (12, 9)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((10, 9), (10, 9)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((9, 7), (9, 7)), ((9, 6), (9, 6)), ((6, 9), (6, 9)), ((9, 12), (9, 12)), ((7, 9), (7, 9))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (8, 7)], 'scores': [0, 0, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 7) - {'options': [(7, 8)], 'scores': [2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 10)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  3.387000ms for system_walk to complete
It took  0.013000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 40 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,13) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (7, 8), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (7, 8), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(10, 8), (11, 10), (10, 10), (11, 8), (9, 6), (9, 8), (11, 9), (7, 8), (9, 9), (8, 10), (9, 10), (8, 8), (9, 12), (9, 11), (8, 9), (7, 9), (12, 9), (6, 9), (10, 9), (9, 7)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(11, 10), (11, 8), (12, 9), (9, 9), (9, 12), (9, 6), (7, 8), (6, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(11, 10), (11, 8), (12, 9), (9, 9), (9, 12), (9, 6), (7, 8), (6, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (11, 8), (12, 9), (9, 9), (9, 12), (9, 6), (7, 8), (6, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (7, 9), (10, 9), (9, 7)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 6), (9, 6))
Move ((9, 8), (9, 8))
Move ((11, 9), (11, 9))
Move ((7, 8), (7, 8))
Move ((9, 9), (9, 9))
Move ((8, 10), (8, 10))
Move ((9, 10), (9, 10))
Move ((8, 8), (8, 8))
Move ((9, 12), (9, 12))
Move ((9, 11), (9, 11))
Move ((8, 9), (8, 9))
Move ((7, 9), (7, 9))
Move ((12, 9), (12, 9))
Move ((6, 9), (6, 9))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Works... [((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 6), (9, 6)), ((9, 8), (9, 8)), ((11, 9), (11, 9)), ((7, 8), (7, 8)), ((9, 9), (9, 9)), ((8, 10), (8, 10)), ((9, 10), (9, 10)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((9, 11), (9, 11)), ((8, 9), (8, 9)), ((7, 9), (7, 9)), ((12, 9), (12, 9)), ((6, 9), (6, 9)), ((10, 9), (10, 9)), ((9, 7), (9, 7))]
Can freeze, freezing system
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  3.461000ms for system_walk to complete
solve_sys - assessing possibility {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(10, 8): {'options': [(10, 8)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
-------------------------- running turn 41 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 1) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 6) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs =  0
(12, 2) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  0
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((6, 9), (6, 9))
Move ((11, 9), (11, 9))
Move ((10, 8), (10, 8))
Move ((11, 8), (11, 8))
Move ((9, 6), (9, 6))
Move ((9, 8), (9, 8))
Move ((10, 10), (10, 10))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 12), (9, 12))
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((9, 11), (9, 11))
Move ((9, 7), (9, 7))
Move ((7, 8), (7, 8))
Move ((10, 9), (10, 9))
Move ((7, 9), (7, 9))
Works... [((9, 10), (9, 10)), ((6, 9), (6, 9)), ((11, 9), (11, 9)), ((10, 8), (10, 8)), ((11, 8), (11, 8)), ((9, 6), (9, 6)), ((9, 8), (9, 8)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((12, 9), (12, 9)), ((11, 10), (11, 10)), ((9, 11), (9, 11)), ((9, 7), (9, 7)), ((7, 8), (7, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  3.543000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 1): {'options': [(8, 2)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (1, 10): {'options': [(1, 9)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (2, 6): {'options': [(2, 7)], 'scores': [2]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 42 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -4
( 8, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  4
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 7) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  4
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -4
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((6, 9), (6, 9))
Move ((11, 9), (11, 9))
Move ((10, 8), (10, 8))
Move ((11, 8), (11, 8))
Move ((9, 6), (9, 6))
Move ((9, 8), (9, 8))
Move ((10, 10), (10, 10))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 12), (9, 12))
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((9, 11), (9, 11))
Move ((9, 7), (9, 7))
Move ((7, 8), (7, 8))
Move ((10, 9), (10, 9))
Move ((7, 9), (7, 9))
Works... [((9, 10), (9, 10)), ((6, 9), (6, 9)), ((11, 9), (11, 9)), ((10, 8), (10, 8)), ((11, 8), (11, 8)), ((9, 6), (9, 6)), ((9, 8), (9, 8)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((12, 9), (12, 9)), ((11, 10), (11, 10)), ((9, 11), (9, 11)), ((9, 7), (9, 7)), ((7, 8), (7, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  3.594000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 2): {'options': [(9, 2)], 'scores': [2]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (1, 9): {'options': [(2, 9)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (2, 7): {'options': [(2, 8)], 'scores': [2]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 43 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -8
(12, 2) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  8
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs =  8
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 2) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -8
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((6, 9), (6, 9))
Move ((11, 9), (11, 9))
Move ((10, 8), (10, 8))
Move ((11, 8), (11, 8))
Move ((9, 6), (9, 6))
Move ((9, 8), (9, 8))
Move ((10, 10), (10, 10))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 12), (9, 12))
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((9, 11), (9, 11))
Move ((9, 7), (9, 7))
Move ((7, 8), (7, 8))
Move ((10, 9), (10, 9))
Move ((7, 9), (7, 9))
Works... [((9, 10), (9, 10)), ((6, 9), (6, 9)), ((11, 9), (11, 9)), ((10, 8), (10, 8)), ((11, 8), (11, 8)), ((9, 6), (9, 6)), ((9, 8), (9, 8)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((12, 9), (12, 9)), ((11, 10), (11, 10)), ((9, 11), (9, 11)), ((9, 7), (9, 7)), ((7, 8), (7, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  3.556000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(2, 8): {'options': [(3, 8)], 'scores': [2]}
(2, 9): {'options': [(3, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (2, 9): {'options': [(3, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 44 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 12
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -12
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 12
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -12
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 10), (9, 10))
Move ((6, 9), (6, 9))
Move ((11, 9), (11, 9))
Move ((10, 8), (10, 8))
Move ((11, 8), (11, 8))
Move ((9, 6), (9, 6))
Move ((9, 8), (9, 8))
Move ((10, 10), (10, 10))
Move ((8, 10), (8, 10))
Move ((9, 9), (9, 9))
Move ((8, 9), (8, 9))
Move ((8, 8), (8, 8))
Move ((9, 12), (9, 12))
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((9, 11), (9, 11))
Move ((9, 7), (9, 7))
Move ((7, 8), (7, 8))
Move ((10, 9), (10, 9))
Move ((7, 9), (7, 9))
Works... [((9, 10), (9, 10)), ((6, 9), (6, 9)), ((11, 9), (11, 9)), ((10, 8), (10, 8)), ((11, 8), (11, 8)), ((9, 6), (9, 6)), ((9, 8), (9, 8)), ((10, 10), (10, 10)), ((8, 10), (8, 10)), ((9, 9), (9, 9)), ((8, 9), (8, 9)), ((8, 8), (8, 8)), ((9, 12), (9, 12)), ((12, 9), (12, 9)), ((11, 10), (11, 10)), ((9, 11), (9, 11)), ((9, 7), (9, 7)), ((7, 8), (7, 8)), ((10, 9), (10, 9)), ((7, 9), (7, 9))]
Can freeze, freezing system
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  3.536000ms for system_walk to complete
solve_sys - assessing possibility {(9, 10): {'options': [(9, 10)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(3, 8): {'options': [(3, 9)], 'scores': [2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (3, 8): {'options': [(3, 9)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 45 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 17
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -17
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 16
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -16
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
Awarded move for (4, 9)  to (5, 9)
Awarded move for (3, 9)  to (4, 9)
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]


=> INITIAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               -   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           -   X   X   X   X         
11               -   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   8                 
 7               8   X   8             
 8           8   X   X   X   8         
 9       8   X   X   8   X   X   8     
10           8   X   X   X   8         
11               8   X   8             
12                   8                 
13                                     


The initial system score was 784
The maximum obtainable for the system is 784
The score gain were looking for is 0
bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (9, 9), (9, 12), (11, 10), (9, 6), (12, 9)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (9, 11), (8, 9), (9, 7), (10, 9), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               -   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           -   0   0   0   ?         
11               -   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9): {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
20 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 3                                                 
 4                                                 
 5                                                 
 6                               X                 
 7                           -   X   -             
 8                       X   X   X   X   X         
 9                   X   X   X   X   X   X   X     
10                       -   X   X   X   X         
11                           -   X   -             
12                               X                 
13                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
20 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 3                                                 
 4                                                 
 5                                                 
 6                               X                 
 7                           -   X   -             
 8                       X   X   X   X   X         
 9                   X   X   X   X   X   X   X     
10                       -   X   X   X   X         
11                           -   X   -             
12                               X                 
13                                                 

System can be split into 4 systems
Solving system # 0
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 20 members
527343750000 combinations
determine_ideal_outcome called with [(9, 10), (6, 9), (11, 9), (10, 8), (11, 8), (9, 6), (9, 8), (10, 10), (8, 10), (9, 9), (8, 9), (8, 8), (9, 12), (12, 9), (11, 10), (9, 11), (9, 7), (7, 8), (10, 9), (7, 9)]
simplified...
527343750000 combinations

Solving system # 1
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9): {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 8
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 784

-------------------------------------
TARGET system:
20 participants
()
     2   3   4   5   6   7   8   9  10  11  12  13  
 3                                                 
 4                                                 
 5                                                 
 6                               8                 
 7                           8   X   8             
 8                       8   X   X   X   8         
 9                   8   X   X   8   X   X   8     
10                       8   X   X   X   8         
11                           8   X   8             
12                               8                 
13                                                 


The initial system score was 884
The maximum obtainable for the system is 890
The score gain were looking for is 6
bots_in_optional = [(6, 9), (11, 8), (7, 8), (11, 10), (9, 9), (12, 9), (9, 6), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (9, 11), (10, 9), (8, 9), (9, 7), (8, 8), (7, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (11, 8), (7, 8), (11, 10), (9, 9), (12, 9), (9, 6), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (11, 8), (7, 8), (11, 10), (9, 9), (12, 9), (9, 6), (9, 12)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (9, 11), (10, 9), (8, 9), (9, 7), (8, 8), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (9, 11), (10, 9), (8, 9), (9, 7), (8, 8), (7, 9)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (9, 11), (10, 9), (8, 9), (9, 7), (8, 8), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
20 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 3                                                 
 4                                                 
 5                                                 
 6                               ?                 
 7                           -   0   -             
 8                       ?   0   0   0   ?         
 9                   ?   0   0   ?   0   0   ?     
10                       -   0   0   0   ?         
11                           -   0   -             
12                               ?                 
13                                                 

Cell Scores:
     2   3   4   5   6   7   8   9  10  11  12  13  
 3                                                 
 4                                                 
 5                                                 
 6                              38                 
 7                          38  40  38             
 8                 enen     38  40  40  40  38         
 9                  38  40  40  38  40  40  38     
10                      38  40  40  40  38         
11                          38  40  38             
12                              38                 
13                                                 

The system now has a total of 527343750000 options
Optional squares exist

System result = ...
The system has a total of 527343750000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.336000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 46 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -22
(12, 2) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = 22
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 20
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -20
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (4, 9), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(4, 9)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10)], 'scores': [2, 0, -2]}
(6, 9) - {'options': [(7, 9), (6, 9), (5, 9), (6, 10)], 'scores': [2, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [2, 0, -2]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10), (12, 10)], 'scores': [2, 2, 0, -2]}
(4, 9) - {'options': [(5, 9), (4, 9)], 'scores': [2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6) - {'options': [(9, 7), (9, 6), (8, 6)], 'scores': [2, 0, -2]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8), (11, 7)], 'scores': [2, 2, 0, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8), (6, 8)], 'scores': [2, 2, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [2, 0, -2]}


=> INITIAL
BOT Positions:
18 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   X   -             
 8                   X   X   X   X   X         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   X         
11                       -   X   -             
12                           X                 
13                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
18 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   X   -             
 8                   X   X   X   X   X         
 9                   X   X   X   X   X   X     
10                   -   X   X   X   X         
11                       -   X   -             
12                           X                 
13                                             

System can be split into 6 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
A subsystem...
has 18 members
20250000000 combinations
determine_ideal_outcome called with [(10, 8), (11, 10), (9, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (9, 11), (7, 9), (7, 8), (10, 9), (9, 7)]
simplified...
20250000000 combinations

Solving system # 3
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(7, 8): {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 8
optional - [(11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]
occupied - [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9)]
available_bots - [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9)], 38: [(11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]}
max_score - 704

-------------------------------------
TARGET system:
18 participants
()
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       8       8             
 8                   8   X   X   X   8         
 9                       X   8   X   X   8     
10                   8   X   X   X   8         
11                       8   X   8             
12                           8                 
13                                             


The initial system score was 890
The maximum obtainable for the system is 896
The score gain were looking for is 6
bots_in_optional = [(11, 10), (11, 8), (12, 9), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 7), (7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 8
num_target_bots_in_occupied = 10
current_bots_in_optional = [(11, 10), (11, 8), (12, 9), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (11, 8), (12, 9), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9)]
current_bots_outside = [(9, 7), (7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
18 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                       -   X   -             
 8                   ?   0   0   0   ?         
 9                   X   0   ?   0   0   ?     
10                   -   0   0   0   ?         
11                       -   0   -             
12                           ?                 
13                                             

Cell Scores:
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                                             
 6                                             
 7                      38  40  38             
 8                  38  40  40  40  38         
 9                  40  40  38  40  40  38     
10                  38  40  40  40  38         
11                      38  40  38             
12                          38                 
13                                             

The system now has a total of 20250000000 options
Optional squares exist
2 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 20250000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((8, 10), (8, 10))
Works... [((8, 10), (8, 10))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 9)], 'scores': [0]}
(11, 10) - {'options': [(10, 10)], 'scores': [2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(8, 10), (7, 10)], 'scores': [0, -2]}
(9, 11) - {'options': [(8, 11)], 'scores': [-2]}
(10, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 8)], 'scores': [0]}
(11, 9) - {'options': [(11, 10)], 'scores': [-2]}
(9, 10) - {'options': [(9, 11)], 'scores': [0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 7)], 'scores': [-2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
A system with max gain has been found!
It took  0.976000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.026000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [-2]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 8)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 7)], 'scores': [-2]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [2]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [-2]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 8)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 7)], 'scores': [-2]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 47 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -26
(12, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 26
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 24
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -24
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       X                 
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               -   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         

System can be split into 3 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 21 members
759375000000 combinations
determine_ideal_outcome called with [(12, 9), (10, 8), (11, 10), (9, 10), (10, 10), (11, 8), (7, 8), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (8, 7), (9, 11), (7, 9), (9, 6), (8, 11), (10, 9), (9, 7)]
simplified...
759375000000 combinations

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7): {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 10
optional - [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)]
available_bots - [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (10, 10), (8, 8)], 38: [(10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 820

-------------------------------------
TARGET system:
21 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                      10                 
 7                  10   X  10             
 8              10   X   X   X  10         
 9                   X  10   X   X  10     
10              10   X   X   X  10         
11                  10   X  10             
12                      10                 
13                                         


The initial system score was 896
The maximum obtainable for the system is 898
The score gain were looking for is 2
bots_in_optional = [(11, 10), (12, 9), (11, 8), (9, 6), (9, 9), (8, 7), (7, 8), (8, 11), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9), (9, 7)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 10
num_target_bots_in_occupied = 11
current_bots_in_optional = [(11, 10), (12, 9), (11, 8), (9, 6), (9, 9), (8, 7), (7, 8), (8, 11), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 10), (12, 9), (11, 8), (9, 6), (9, 9), (8, 7), (7, 8), (8, 11), (9, 12)]
current_bots_in_occupied = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9), (9, 7)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9), (9, 7)]
current_bots_outside = [(7, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (10, 10), (9, 8), (11, 9), (8, 10), (9, 10), (8, 8), (10, 9), (9, 11), (8, 9), (9, 7)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                       ?                 
 7                   ?   0   -             
 8               ?   0   0   0   ?         
 9               X   0   ?   0   0   ?     
10               -   0   0   0   ?         
11                   ?   0   -             
12                       ?                 
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                                         
 6                      38                 
 7                  38  40  38             
 8              38  40  40  40  38         
 9              40  40  38  40  40  38     
10              38  40  40  40  38         
11                  38  40  38             
12                      38                 
13                                         

The system now has a total of 759375000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 759375000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((9, 7), (9, 7))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Works... [((9, 7), (9, 7)), ((8, 7), (8, 7)), ((9, 6), (9, 6))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [0]}
(12, 9) - {'options': [(12, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 9)], 'scores': [0]}
(11, 10) - {'options': [(10, 10)], 'scores': [2]}
(8, 10) - {'options': [(7, 10)], 'scores': [-2]}
(9, 11) - {'options': [(8, 11)], 'scores': [-2]}
(10, 9) - {'options': [(11, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, -2, -2, -2]}
(8, 11) - {'options': [(8, 10)], 'scores': [2]}
(11, 9) - {'options': [(11, 10)], 'scores': [-2]}
(9, 10) - {'options': [(9, 11)], 'scores': [0]}
(8, 7) - {'options': [(9, 7), (8, 7)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 10) - {'options': [(9, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 8)], 'scores': [0]}
(9, 9) - {'options': [(9, 9)], 'scores': [0]}
(8, 8) - {'options': [(9, 8)], 'scores': [0]}
(7, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
A system with max gain has been found!
It took  1.253000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.026000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.027000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [-2]}, (9, 11): {'options': [(8, 11)], 'scores': [-2]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [2]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 9)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [-2]}, (9, 11): {'options': [(8, 11)], 'scores': [-2]}, (10, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (8, 11): {'options': [(8, 10)], 'scores': [2]}, (11, 9): {'options': [(11, 10)], 'scores': [-2]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(9, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 48 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -31
(12, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 31
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 29
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -29
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.261000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 49 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -35
(12, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 35
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 34
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -34
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.279000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 50 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,17) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 8) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 2) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -39
(12, 2) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 39
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,12) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 5,16) (friendly)  vulnerability =  8 attack_ratio =  0 health_diffs = 38
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -38
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.296000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (5, 16): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 51 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs =  0
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  0
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 9) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.305000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 1): {'options': [(9, 2)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (6, 2): {'options': [(6, 3)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (1, 9): {'options': [(2, 9)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 52 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -4
( 2, 9) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 3) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  4
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -4
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  4
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.303000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (2, 9): {'options': [(3, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (6, 3): {'options': [(6, 4)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 53 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -8
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs =  8
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -8
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  8
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  4.295000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 4): {'options': [(7, 4)], 'scores': [2]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 54 ---------------------------
frontline_radius = 2
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -12
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 13
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -13
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs = 12
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
Awarded move for (4, 9)  to (5, 9)
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   X                 
 7               X   X   -             
 8           X   X   X   X   X         
 9       X   X   X   X   X   X   X     
10           X   X   X   X   X         
11               X   X   -             
12                   X                 
13                                     

determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  11                 
 7              11   X  11             
 8          11   X   X   X  11         
 9      11   X   X  11   X   X  11     
10          11   X   X   X  11         
11              11   X  11             
12                  11                 
13                                     


The initial system score was 898
The maximum obtainable for the system is 898
The score gain were looking for is 0
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                   ?                 
 7               ?   0   -             
 8           ?   0   0   0   ?         
 9       ?   0   0   ?   0   0   ?     
10           ?   0   0   0   ?         
11               ?   0   -             
12                   ?                 
13                                     

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                                     
 6                  38                 
 7              38  40  38             
 8          38  40  40  40  38         
 9      38  40  40  38  40  40  38     
10          38  40  40  40  38         
11              38  40  38             
12                  38                 
13                                     

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10): {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7): {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9): {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(7, 4): {'options': [(7, 5)], 'scores': [2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
23 participants
     3   4   5   6   7   8   9  10  11  12  13  
 3                                             
 4                                             
 5                                             
 6                           X                 
 7                       X   X   -             
 8                   X   X   X   X   X         
 9               X   X   X   X   X   X   X     
10                   X   X   X   X   X         
11                       X   X   -             
12                           X                 
13                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
23 participants
     3   4   5   6   7   8   9  10  11  12  13  
 3                                             
 4                                             
 5                                             
 6                           X                 
 7                       X   X   -             
 8                   X   X   X   X   X         
 9               X   X   X   X   X   X   X     
10                   X   X   X   X   X         
11                       X   X   -             
12                           X                 
13                                             

System can be split into 4 systems
Solving system # 0
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A subsystem...
has 23 members
14238281250000 combinations
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
simplified...
14238281250000 combinations

Solving system # 1
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(7, 4) - {'options': [(7, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(6, 9): {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10): {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7): {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6): {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9): {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(7, 4): {'options': [(7, 5)], 'scores': [2]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
occupied - [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
available_bots - [(6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)], 38: [(6, 9), (10, 11), (12, 9), (11, 10), (10, 7), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]}
max_score - 898

-------------------------------------
TARGET system:
23 participants
()
     3   4   5   6   7   8   9  10  11  12  13  
 3                                             
 4                                             
 5                                             
 6                          11                 
 7                      11   X  11             
 8                  11   X   X   X  11         
 9              11   X   X  11   X   X  11     
10                  11   X   X   X  11         
11                      11   X  11             
12                          11                 
13                                             


The initial system score was 996
The maximum obtainable for the system is 1002
The score gain were looking for is 6
bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 12
current_bots_in_optional = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(6, 9), (12, 9), (11, 10), (7, 10), (8, 11), (8, 7), (9, 6), (11, 8), (9, 9), (7, 8), (9, 12)]
current_bots_in_occupied = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(9, 8), (8, 9), (10, 8), (8, 10), (9, 11), (10, 9), (9, 7), (11, 9), (9, 10), (7, 9), (10, 10), (8, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
23 participants
     3   4   5   6   7   8   9  10  11  12  13  
 3                                             
 4                                             
 5                                             
 6                           ?                 
 7                       ?   0   -             
 8                   ?   0   0   0   ?         
 9               ?   0   0   ?   0   0   ?     
10                   ?   0   0   0   ?         
11                       ?   0   -             
12                           ?                 
13                                             

Cell Scores:
     3   4   5   6   7   8   9  10  11  12  13  
 3                                             
 4                                             
 5                                             
 6                          38                 
 7                      38  40  38             
 8                  38  40  40  40  38         
 9              38  40  40  38  40  40  38     
10                  38  40  40  40  38         
11                      38  40  38             
12                          38                 
13                                             

The system now has a total of 14238281250000 options
Optional squares exist

System result = ...
The system has a total of 14238281250000 options
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(7, 4) - {'options': [(7, 5)], 'scores': [2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
Move ((6, 9), (6, 9))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((6, 9), (6, 9)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(7, 9), (6, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 7), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (7, 9), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 9), (7, 10)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (9, 7), (10, 7), (9, 6), (8, 7)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (9, 7), (8, 7)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 7), (9, 6)], 'scores': [2, 0]}
(7, 9) - {'options': [(8, 9), (7, 9), (6, 9), (7, 8), (7, 10)], 'scores': [0, 0, -2, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(7, 4) - {'options': [(7, 5)], 'scores': [2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 9), (7, 8)], 'scores': [2, 2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
A system with max gain has been found!
It took  5.297000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 4): {'options': [(7, 5)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (7, 4): {'options': [(7, 5)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 55 ---------------------------
frontline_radius = 2
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -16
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 17
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -17
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 16
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              24  26  28  26  24                              
 2                      22  24  26  28  30  28  26  24  22                      
 3              20  22  24  26  28  30  32  30  28  26  24  22  20              
 4              22  24  26  28  30  32  34  32  30  28  26  24  22              
 5          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
 6          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 7      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
 8      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 9      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
10      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
11      24  26  28  30  32  34  36  38  40  38  36  34  32  30  28  26  24      
12          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
13          22  24  26  28  30  32  34  36  34  32  30  28  26  24  22          
14              22  24  26  28  30  32  34  32  30  28  26  24  22              
15              20  22  24  26  28  30  32  30  28  26  24  22  20              
16                      22  24  26  28  30  28  26  24  22                      
17                              24  26  28  26  24                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (9, 5), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         

System can be split into 5 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
A subsystem...
has 21 members
243000000000 combinations
determine_ideal_outcome called with [(10, 8), (11, 10), (9, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (8, 7), (9, 11), (7, 9), (7, 8), (8, 11), (10, 9), (9, 7)]
simplified...
243000000000 combinations

Solving system # 3
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10): {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7): {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(7, 8): {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]
available_bots - [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9)], 38: [(11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]}
max_score - 818

-------------------------------------
TARGET system:
21 participants
()
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X       X             
 8               X   X   X   X   X         
 9                   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   X             
12                       X                 
13                                         


The initial system score was 970
The maximum obtainable for the system is 974
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 7), (7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 7), (7, 9)]
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 21
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12), (9, 7), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = [(10, 7), (10, 11)]
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12), (9, 7), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   0   X   =             
 8               0   0   0   0   0         
 9               X   0   0   0   0   0     
10               0   0   0   0   0         
11                   0   0   =             
12                       0                 
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                  38  40  38             
 8              38  40  40  40  38         
 9              40  40  38  40  40  38     
10              38  40  40  40  38         
11                  38  40  38             
12                      38                 
13                                         

The system now has a total of 243000000000 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 243000000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10): {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 5): {'options': [(7, 6)], 'scores': [2]}
(8, 7): {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(7, 8): {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X   X   -             
 8               X   X   X   X   X         
 9               X   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   -             
12                       X                 
13                                         

System can be split into 6 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
A subsystem...
has 21 members
243000000000 combinations
determine_ideal_outcome called with [(10, 8), (11, 10), (9, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (9, 9), (8, 10), (8, 9), (8, 8), (9, 12), (8, 7), (9, 11), (7, 9), (7, 8), (8, 11), (10, 9), (9, 7)]
simplified...
243000000000 combinations

Solving system # 3
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 5
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9)], 'scores': [2]}
(9, 8): {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9): {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9): {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8): {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10): {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7): {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(8, 11): {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9): {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10): {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 5): {'options': [(7, 6)], 'scores': [2]}
(8, 7): {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6): {'options': [(9, 7)], 'scores': [2]}
(7, 9): {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10): {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9): {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8): {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6)], 'scores': [2]}
(7, 8): {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12): {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}
determine_ideal_outcome called with [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 0
optional - []
occupied - [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9), (11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]
available_bots - [(9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(10, 8), (9, 10), (10, 10), (9, 8), (11, 9), (8, 10), (8, 9), (8, 8), (9, 11), (10, 9)], 38: [(11, 10), (8, 7), (11, 8), (7, 8), (9, 9), (10, 7), (9, 12), (7, 10), (10, 11), (12, 9), (8, 11)]}
max_score - 818

-------------------------------------
TARGET system:
21 participants
()
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   X       X             
 8               X   X   X   X   X         
 9                   X   X   X   X   X     
10               X   X   X   X   X         
11                   X   X   X             
12                       X                 
13                                         


The initial system score was 1002
The maximum obtainable for the system is 1008
The score gain were looking for is 6
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 7), (7, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = [(9, 7), (7, 9)]
num_target_bots_in_optional = 0
num_target_bots_in_occupied = 21
current_bots_in_optional = []
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12), (9, 7), (7, 9)]
current_bots_in_occupied_that_can_move_to_optional = []
current_bots_outside = []
target_occupied_not_occupied = [(10, 7), (10, 11)]
target_occupied_with_bot_now_or_definite_bot_next = [(10, 8), (11, 10), (7, 10), (10, 10), (11, 8), (12, 9), (9, 8), (11, 9), (8, 10), (9, 9), (9, 10), (8, 8), (10, 9), (8, 7), (9, 11), (8, 9), (7, 8), (8, 11), (9, 12), (9, 7), (7, 9)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
21 participants
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                   0   X   =             
 8               0   0   0   0   0         
 9               X   0   0   0   0   0     
10               0   0   0   0   0         
11                   0   0   =             
12                       0                 
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 4                                         
 5                                         
 6                                         
 7                  38  40  38             
 8              38  40  40  40  38         
 9              40  40  38  40  40  38     
10              38  40  40  40  38         
11                  38  40  38             
12                      38                 
13                                         

The system now has a total of 243000000000 options
No optional squares exist so bots should just be packing into occupied squares

System result = ...
The system has a total of 243000000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8), (9, 8), (8, 8), (9, 9)], 'scores': [0, 0, 0, -2]}
(8, 9) - {'options': [(8, 9), (8, 8), (8, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(9, 8), (10, 9), (10, 8), (11, 8), (10, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10), (8, 9), (8, 10), (8, 11), (7, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(9, 10), (9, 11), (8, 11), (10, 11), (9, 12)], 'scores': [0, 0, -2, -2, -2]}
(7, 10) - {'options': [(8, 10), (7, 10)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8), (10, 7), (8, 7)], 'scores': [0, -2, -2]}
(8, 11) - {'options': [(9, 11), (8, 10), (8, 11)], 'scores': [2, 2, 0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 10), (9, 11), (8, 10), (10, 10), (9, 9)], 'scores': [0, 0, 0, 0, -2]}
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(7, 9) - {'options': [(8, 9), (7, 8), (7, 10)], 'scores': [0, -2, -2]}
(10, 10) - {'options': [(9, 10), (10, 9), (10, 10), (11, 10), (10, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 9), (10, 8), (11, 8)], 'scores': [2, 2, 0]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9), (9, 9)], 'scores': [2, 2, 2, 2, 0]}
(8, 8) - {'options': [(8, 9), (9, 8), (8, 8), (7, 8), (8, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 11), (9, 12)], 'scores': [2, 0]}


The system did not change in simplify system, returning
It took  2.900000ms for system_walk to complete
It took  2.179000ms for system_walk to complete
It took  0.010000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.011000ms for system_walk to complete
It took  2.068000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.013000ms for system_walk to complete
It took  2.240000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  2.052000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  0.013000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((10, 9), (10, 9))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((9, 9), (9, 9))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Works... [((12, 9), (12, 9)), ((11, 10), (11, 10)), ((10, 9), (10, 9)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((9, 9), (9, 9)), ((8, 8), (8, 8)), ((7, 8), (7, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [2]}
(9, 8) - {'options': [(10, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 10)], 'scores': [0]}
(12, 9) - {'options': [(11, 9), (12, 9)], 'scores': [2, 0]}
(10, 8) - {'options': [(10, 7)], 'scores': [-2]}
(11, 10) - {'options': [(11, 9), (10, 10), (11, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10)], 'scores': [0]}
(9, 11) - {'options': [(10, 11)], 'scores': [-2]}
(7, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 9) - {'options': [(11, 9), (10, 9), (10, 10), (9, 9)], 'scores': [0, 0, 0, -2]}
(9, 7) - {'options': [(9, 8)], 'scores': [0]}
(8, 11) - {'options': [(8, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 9), (10, 9), (11, 8), (11, 10), (12, 9)], 'scores': [0, 0, -2, -2, -2]}
(9, 10) - {'options': [(9, 11)], 'scores': [0]}
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7)], 'scores': [2, 0]}
(9, 6) - {'options': [(9, 7)], 'scores': [2]}
(7, 9) - {'options': [(8, 9)], 'scores': [0]}
(10, 10) - {'options': [(10, 9), (10, 10), (11, 10)], 'scores': [0, 0, -2]}
(11, 8) - {'options': [(11, 9), (11, 8)], 'scores': [2, 0]}
(9, 9) - {'options': [(10, 9), (9, 9)], 'scores': [2, 0]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7)], 'scores': [0, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8)], 'scores': [2, 0]}
(9, 12) - {'options': [(9, 12)], 'scores': [0]}
A system with max gain has been found!
It took  2.663000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [-2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [-2]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (7, 5): {'options': [(7, 6)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [2]}, (9, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [-2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [-2]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [0]}, (7, 5): {'options': [(7, 6)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [2]}, (7, 9): {'options': [(8, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 56 ---------------------------
frontline_radius = 3
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -20
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 21
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -21
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs = 20
( 9, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6           X   -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X                 
13                   -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6           X   -   X   -             
 7           -   X   X   X   -         
 8       -   X   X   X   X   X   -     
 9   -   X   X   X   X   X   X   X   - 
10       -   X   X   X   X   X   -     
11           -   X   X   X   -         
12               -   X                 
13                   -                 

determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (9, 9), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     5   6   7   8   9  10  11  12  13  
 5                   6                 
 6               6   X   6             
 7           6   X   X   X   6         
 8       6   X   X   6   X   X   6     
 9   6   X   X   6       6   X   X   6 
10       6   X   X   6   X   X   6     
11           6   X   X   X   6         
12               6   X                 
13                   6                 


The initial system score was 1024
The maximum obtainable for the system is 1028
The score gain were looking for is 4
bots_in_optional = [(9, 8), (8, 9), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 6), (9, 9)]
bots_outside_system_moving_to_optional  = [(7, 6), (9, 9)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(9, 8), (8, 9), (10, 9), (9, 10), (7, 6), (9, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 8), (8, 9), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     5   6   7   8   9  10  11  12  13  
 5                   -                 
 6           X   -   0   -             
 7           -   0   0   0   -         
 8       -   0   0   ?   0   0   -     
 9   -   0   0   ?   X   ?   0   0   - 
10       -   0   0   ?   0   0   -     
11           -   0   0   0   -         
12               -   0                 
13                   -                 

Cell Scores:
     5   6   7   8   9  10  11  12  13  
 5                  38                 
 6          36  38  40  38             
 7          38  40  40  40  38         
 8      38  40  40  38  40  40  38     
 9  38  40  40  38  36  38  40  40  38 
10      38  40  40  38  40  40  38     
11          38  40  40  40  38         
12              38  40                 
13                  38                 

The system now has a total of 21600000000000000 options
Optional squares exist

System result = ...
The system has a total of 21600000000000000 options
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9)], 'scores': [0, 0, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10), (8, 9), (9, 8), (10, 9)], 'scores': [2, 2, 2, 2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8)], 'scores': [0, 0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(6, 9) - {'options': [(5, 9)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11), (10, 10), (11, 11)], 'scores': [0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6)], 'scores': [2]}
(8, 10) - {'options': [(7, 10)], 'scores': [0]}
(9, 11) - {'options': [(8, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 9)], 'scores': [0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 10)], 'scores': [0]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (7, 7)], 'scores': [0, 0, 0, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(6, 9)], 'scores': [0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (10, 9)], 'scores': [0, 0, 0, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 9) - {'options': [(9, 10)], 'scores': [2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (6, 8)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 12), (9, 13)], 'scores': [0, -2]}
A system with max gain has been found!
It took  4.315000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  0.035000ms for system_walk to complete
solve_sys - assessing possibility {(6, 9): {'options': [(5, 9)], 'scores': [-2]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(8, 6)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (9, 9): {'options': [(9, 10)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(6, 9): {'options': [(5, 9)], 'scores': [-2]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(8, 6)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 9): {'options': [(9, 10)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 57 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -24
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 25
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -25
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 24
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.396000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 58 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -29
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 29
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -29
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 29
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.387000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 59 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -33
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 33
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -33
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 33
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.406000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 60 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 3) (enemy)     vulnerability = 20 attack_ratio =  0 health_diffs = -38
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,15) (friendly)  vulnerability =  9 attack_ratio =  0 health_diffs = 37
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,14) (enemy)     vulnerability =  5 attack_ratio =  0 health_diffs = -37
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 9) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 4) (friendly)  vulnerability =  7 attack_ratio =  0 health_diffs = 38
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.425000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (15, 15): {'options': [(15, 14)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (3, 4): {'options': [(4, 4)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 61 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 2) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 5) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.384000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (6, 2): {'options': [(6, 3)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 17): {'options': [(9, 16)], 'scores': [2]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (16, 5): {'options': [(16, 6)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (1, 8): {'options': [(2, 8)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (4, 3): {'options': [(4, 4)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 62 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
(16, 6) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 2, 8) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 3) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.381000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (16, 6): {'options': [(15, 6)], 'scores': [2]}, (2, 8): {'options': [(3, 8)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (4, 4): {'options': [(4, 5)], 'scores': [2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (6, 3): {'options': [(6, 4)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 63 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 8) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X                 
13                       -                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X                 
13                       6                 


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0                 
13                       -                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40                 
13                      38                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  5.371000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 4): {'options': [(7, 4)], 'scores': [2]}, (4, 5): {'options': [(5, 5)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (3, 8): {'options': [(3, 9)], 'scores': [2]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 64 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 5) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(15, 7) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 4) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
Awarded move for (9, 14)  to (9, 13)
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X   -             
13                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               -   X   X   X   -         
12                   -   X   -             
13                                         

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       6                 
 6                   6   X   6             
 7               6   X   X   X   6         
 8           6   X   X   6   X   X   6     
 9       6   X   X   6       6   X   X   6 
10           6   X   X   6   X   X   6     
11               6   X   X   X   6         
12                   6   X   6             
13                                         


The initial system score was 1028
The maximum obtainable for the system is 1028
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               -   0   0   0   -         
12                   -   0   -             
13                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40  38             
13                                         

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14): {'options': [(9, 13)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
26 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 5                               -                 
 6                           X   X   -             
 7                       -   X   X   X   -         
 8                   -   X   X   X   X   X   -     
 9               X   X   X   X       X   X   X   - 
10                   -   X   X   X   X   X   -     
11                       -   X   X   X   -         
12                           -   X   -             
13                                                 
14                                                 
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 5                               -                 
 6                           X   X   -             
 7                       -   X   X   X   -         
 8                   -   X   X   X   X   X   -     
 9               X   X   X   X       X   X   X   - 
10                   -   X   X   X   X   X   -     
11                       -   X   X   X   -         
12                           -   X   -             
13                                                 
14                                                 
15                                                 

System can be split into 3 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}
A subsystem...
has 26 members
33750000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
simplified...
33750000000000000 combinations

Solving system # 1
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14): {'options': [(9, 13)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(3, 9): {'options': [(4, 9)], 'scores': [2]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 6
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1028

-------------------------------------
TARGET system:
26 participants
()
     2   3   4   5   6   7   8   9  10  11  12  13  
 5                               6                 
 6                           6   X   6             
 7                       6   X   X   X   6         
 8                   6   X   X   6   X   X   6     
 9               6   X   X   6       6   X   X   6 
10                   6   X   X   6   X   X   6     
11                       6   X   X   X   6         
12                           6   X   6             
13                                                 
14                                                 
15                                                 


The initial system score was 1098
The maximum obtainable for the system is 1102
The score gain were looking for is 4
bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 6
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     2   3   4   5   6   7   8   9  10  11  12  13  
 5                               -                 
 6                           ?   0   -             
 7                       -   0   0   0   -         
 8                   -   0   0   ?   0   0   -     
 9               ?   0   0   ?       ?   0   0   - 
10                   -   0   0   ?   0   0   -     
11                       -   0   0   0   -         
12                           -   0   -             
13                                                 
14                                                 
15                                                 

Cell Scores:
     2   3   4   5   6   7   8   9  10  11  12  13  
 5                              38                 
 6                          38  40  38             
 7                      38  40  40  40  38         
 8                  38  40  40  38  40  40  38     
 9              38  40  40  38      38  40  40  38 
10                  38  40  40  38  40  40  38     
11                      38  40  40  40  38         
12                          38  40  38             
13                                                 
14                                                 
15                                                 

The system now has a total of 33750000000000000 options
Optional squares exist

System result = ...
The system has a total of 33750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(3, 9) - {'options': [(4, 9)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (10, 12)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  6.374000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (5, 5): {'options': [(5, 6)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (3, 9): {'options': [(4, 9)], 'scores': [2]}, (15, 7): {'options': [(15, 8)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 4): {'options': [(7, 5)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 65 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 5, 6) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 8) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (4, 9), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (7, 5), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(7, 5)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10)], 'scores': [2, 0, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(4, 9) - {'options': [(5, 9), (4, 9)], 'scores': [2, 0]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 5) - {'options': [(7, 6), (8, 5), (7, 5)], 'scores': [2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [2, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}


=> INITIAL
BOT Positions:
26 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                           -                 
 6                       X   X   -             
 7                   -   X   X   X   -         
 8               -   X   X   X   X   X   -     
 9               X   X   X       X   X   X   - 
10               -   X   X   X   X   X   -     
11                   -   X   X   X   -         
12                       -   X   -             
13                           X                 
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
26 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                           -                 
 6                       X   X   -             
 7                   -   X   X   X   -         
 8               -   X   X   X   X   X   -     
 9               X   X   X       X   X   X   - 
10               -   X   X   X   X   X   -     
11                   -   X   X   X   -         
12                       -   X   -             
13                           X                 
14                                             

System can be split into 4 systems
Solving system # 0
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 1
(6, 9) - {'options': [(7, 9), (6, 10), (6, 8)], 'scores': [0, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}
A subsystem...
has 26 members
21600000000000000 combinations
determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
simplified...
21600000000000000 combinations

Solving system # 2
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9)], 'scores': [2]}
(6, 9): {'options': [(7, 9), (6, 10), (6, 8)], 'scores': [0, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(4, 9): {'options': [(5, 9)], 'scores': [2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(7, 5): {'options': [(7, 6)], 'scores': [2]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}
determine_ideal_outcome called with [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 7
optional - [(11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(6, 9), (10, 11), (9, 8), (8, 9), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1026

-------------------------------------
TARGET system:
26 participants
()
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                           7                 
 6                       7   X   7             
 7                   7   X   X   X   7         
 8               7   X   X   7   X   X   7     
 9                   X   7       7   X   X   7 
10               7   X   X   7   X   X   7     
11                   7   X   X   X   7         
12                       7   X   7             
13                           7                 
14                                             


The initial system score was 1136
The maximum obtainable for the system is 1140
The score gain were looking for is 4
bots_in_optional = [(9, 8), (8, 9), (8, 6), (10, 9), (9, 10), (9, 13)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(6, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 7
num_target_bots_in_occupied = 19
current_bots_in_optional = [(9, 8), (8, 9), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_optional_that_can_move_to_occupied = [(9, 8), (8, 9), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_occupied = [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = [(6, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
26 participants
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                           -                 
 6                       ?   0   -             
 7                   -   0   0   0   -         
 8               -   0   0   ?   0   0   -     
 9               X   0   ?       ?   0   0   - 
10               -   0   0   ?   0   0   -     
11                   -   0   0   0   -         
12                       -   0   -             
13                           ?                 
14                                             

Cell Scores:
     3   4   5   6   7   8   9  10  11  12  13  
 4                                             
 5                          38                 
 6                      38  40  38             
 7                  38  40  40  40  38         
 8              38  40  40  38  40  40  38     
 9              40  40  38      38  40  40  38 
10              38  40  40  38  40  40  38     
11                  38  40  40  40  38         
12                      38  40  38             
13                          38                 
14                                             

The system now has a total of 21600000000000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 21600000000000000 options
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9), (6, 10), (6, 8)], 'scores': [0, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((12, 9), (12, 9))
Move ((8, 6), (8, 6))
Move ((9, 6), (9, 6))
Move ((9, 13), (9, 13))
Move ((9, 12), (9, 12))
Works... [((12, 9), (12, 9)), ((8, 6), (8, 6)), ((9, 6), (9, 6)), ((9, 13), (9, 13)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9)], 'scores': [2]}
(6, 9) - {'options': [(7, 9)], 'scores': [0]}
(10, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(12, 9) - {'options': [(12, 9), (13, 9)], 'scores': [0, -2]}
(10, 8) - {'options': [(11, 8)], 'scores': [0]}
(11, 10) - {'options': [(10, 10)], 'scores': [0]}
(4, 9) - {'options': [(5, 9)], 'scores': [2]}
(10, 7) - {'options': [(10, 8)], 'scores': [0]}
(8, 10) - {'options': [(7, 10)], 'scores': [0]}
(9, 11) - {'options': [(8, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 11)], 'scores': [-2]}
(8, 6) - {'options': [(9, 6), (8, 6)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 10)], 'scores': [0]}
(11, 9) - {'options': [(11, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(7, 5) - {'options': [(7, 6)], 'scores': [2]}
(8, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 6) - {'options': [(9, 6), (8, 6), (10, 6), (9, 5)], 'scores': [0, -2, -2, -2]}
(7, 9) - {'options': [(7, 8)], 'scores': [0]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(10, 11)], 'scores': [0]}
(11, 8) - {'options': [(11, 9)], 'scores': [0]}
(8, 8) - {'options': [(8, 7)], 'scores': [0]}
(7, 8) - {'options': [(8, 8)], 'scores': [0]}
(9, 12) - {'options': [(9, 12), (9, 13), (10, 12)], 'scores': [0, -2, -2]}
A system with max gain has been found!
It took  1.850000ms for system_walk to complete
It took  0.019000ms for system_walk to complete
It took  0.019000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.048000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 11)], 'scores': [-2]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (7, 5): {'options': [(7, 6)], 'scores': [2]}, (8, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 8)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 11)], 'scores': [0]}, (11, 8): {'options': [(11, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 7)], 'scores': [0]}, (7, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(6, 9)], 'scores': [2]}, (6, 9): {'options': [(7, 9)], 'scores': [0]}, (10, 11): {'options': [(9, 11)], 'scores': [0]}, (5, 6): {'options': [(5, 7)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [0]}, (4, 9): {'options': [(5, 9)], 'scores': [2]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 11)], 'scores': [-2]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (7, 5): {'options': [(7, 6)], 'scores': [2]}, (8, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 8)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 11)], 'scores': [0]}, (11, 8): {'options': [(11, 9)], 'scores': [0]}, (8, 8): {'options': [(8, 7)], 'scores': [0]}, (7, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 66 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 9
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1142

-------------------------------------
TARGET system:
29 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       9                 
 6                   9   X   9             
 7               9   X   X   X   9         
 8           9   X   X   9   X   X   9     
 9       9   X   X   9       9   X   X   9 
10           9   X   X   9   X   X   9     
11               9   X   X   X   9         
12                   9   X   9             
13                       9                 
14                                         


The initial system score was 1140
The maximum obtainable for the system is 1142
The score gain were looking for is 2
bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 6)]
bots_outside_system_moving_to_optional  = [(7, 6)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 9
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13), (7, 6)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               ?   0   0   0   -         
12                   -   0   -             
13                       ?                 
14                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6              36  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40  38             
13                      38                 
14                                         

The system now has a total of 540000000000000000 options
Optional squares exist

System result = ...
The system has a total of 540000000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6): {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(5, 7): {'options': [(6, 7)], 'scores': [2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   X   X   -             
 7               -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X   - 
10           -   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         

System can be split into 2 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}
A subsystem...
has 29 members
540000000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
simplified...
540000000000000000 combinations

Solving system # 1
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6): {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(5, 7): {'options': [(6, 7)], 'scores': [2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 9
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (9, 5), (6, 10), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1142

-------------------------------------
TARGET system:
29 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                       9                 
 6                   9   X   9             
 7               9   X   X   X   9         
 8           9   X   X   9   X   X   9     
 9       9   X   X   9       9   X   X   9 
10           9   X   X   9   X   X   9     
11               9   X   X   X   9         
12                   9   X   9             
13                       9                 
14                                         


The initial system score was 1174
The maximum obtainable for the system is 1178
The score gain were looking for is 4
bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 6)]
bots_outside_system_moving_to_optional  = [(7, 6)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 9
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13), (7, 6)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (7, 11), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
29 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6               X   ?   0   -             
 7               -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0   - 
10           -   0   0   ?   0   0   -     
11               ?   0   0   0   -         
12                   -   0   -             
13                       ?                 
14                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6              36  38  40  38             
 7              38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40  38 
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40  38             
13                      38                 
14                                         

The system now has a total of 540000000000000000 options
Optional squares exist

System result = ...
The system has a total of 540000000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9)], 'scores': [0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7)], 'scores': [2, 2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12)], 'scores': [0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((12, 9), (12, 9))
Move ((8, 7), (8, 7))
Move ((9, 13), (9, 13))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((9, 8), (9, 8)), ((8, 9), (8, 9)), ((12, 9), (12, 9)), ((8, 7), (8, 7)), ((9, 13), (9, 13)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(6, 10)], 'scores': [-2]}
(10, 11) - {'options': [(9, 11)], 'scores': [0]}
(9, 8) - {'options': [(8, 8), (9, 8)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 8), (8, 9)], 'scores': [2, 0]}
(7, 11) - {'options': [(7, 11)], 'scores': [0]}
(12, 9) - {'options': [(12, 9), (13, 9)], 'scores': [0, -2]}
(10, 8) - {'options': [(11, 8)], 'scores': [0]}
(11, 10) - {'options': [(10, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 8)], 'scores': [0]}
(7, 6) - {'options': [(8, 6)], 'scores': [2]}
(8, 10) - {'options': [(7, 10)], 'scores': [0]}
(9, 11) - {'options': [(8, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 9)], 'scores': [0]}
(8, 6) - {'options': [(9, 6)], 'scores': [2]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(10, 7)], 'scores': [0]}
(8, 11) - {'options': [(8, 10)], 'scores': [0]}
(11, 9) - {'options': [(11, 10)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 8), (8, 7), (7, 7)], 'scores': [0, 0, -2]}
(9, 6) - {'options': [(9, 7)], 'scores': [0]}
(7, 9) - {'options': [(6, 9)], 'scores': [0]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(10, 11)], 'scores': [0]}
(11, 8) - {'options': [(11, 9)], 'scores': [0]}
(5, 7) - {'options': [(6, 7)], 'scores': [2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (6, 8), (7, 7)], 'scores': [0, 0, -2, -2]}
(9, 12) - {'options': [(9, 12), (9, 13), (10, 12)], 'scores': [0, -2, -2]}
A system with max gain has been found!
It took  2.584000ms for system_walk to complete
It took  0.018000ms for system_walk to complete
It took  0.019000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.053000ms for system_walk to complete
It took  0.034000ms for system_walk to complete
It took  0.033000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.027000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 10)], 'scores': [-2]}, (10, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (7, 6): {'options': [(8, 6)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (8, 6): {'options': [(9, 6)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 11)], 'scores': [0]}, (11, 8): {'options': [(11, 9)], 'scores': [0]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 10)], 'scores': [-2]}, (10, 11): {'options': [(9, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(10, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (7, 6): {'options': [(8, 6)], 'scores': [2]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (8, 6): {'options': [(9, 6)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 10)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [0]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 11)], 'scores': [0]}, (11, 8): {'options': [(11, 9)], 'scores': [0]}, (5, 7): {'options': [(6, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 67 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 7) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
Awarded move for (14, 9)  to (13, 9)
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7           X   -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X     
10           X   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   X   X   -             
 7           X   -   X   X   X   -         
 8           -   X   X   X   X   X   -     
 9       X   X   X   X       X   X   X     
10           X   X   X   X   X   X   -     
11               X   X   X   X   -         
12                   -   X   -             
13                       X                 
14                                         

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 10
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]}
max_score - 1180

-------------------------------------
TARGET system:
30 participants
()
     4   5   6   7   8   9  10  11  12  13  
 5                      10                 
 6                  10   X  10             
 7              10   X   X   X  10         
 8          10   X   X  10   X   X  10     
 9      10   X   X  10      10   X   X     
10          10   X   X  10   X   X  10     
11              10   X   X   X  10         
12                  10   X  10             
13                      10                 
14                                         


The initial system score was 1178
The maximum obtainable for the system is 1180
The score gain were looking for is 2
bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(6, 7)]
bots_outside_system_moving_to_optional  = [(6, 7)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 10
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  
 5                       -                 
 6                   ?   0   -             
 7           X   -   0   0   0   -         
 8           -   0   0   ?   0   0   -     
 9       ?   0   0   ?       ?   0   0     
10           ?   0   0   ?   0   0   -     
11               ?   0   0   0   -         
12                   -   0   -             
13                       ?                 
14                                         

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  
 5                      38                 
 6                  38  40  38             
 7          36  38  40  40  40  38         
 8          38  40  40  38  40  40  38     
 9      38  40  40  38      38  40  40     
10          38  40  40  38  40  40  38     
11              38  40  40  40  38         
12                  38  40  38             
13                      38                 
14                                         

The system now has a total of 4218750000000000000 options
Optional squares exist

System result = ...
The system has a total of 4218750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7) - {'options': [(7, 7), (6, 8)], 'scores': [2, 2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9): {'options': [(13, 9)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7): {'options': [(7, 7), (6, 8)], 'scores': [2, 2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   X   X   -                     
 7           X   -   X   X   X   -                 
 8           -   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12                   -   X   -                     
13                       X                         
14                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   X   X   -                     
 7           X   -   X   X   X   -                 
 8           -   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12                   -   X   -                     
13                       X                         
14                                                 

System can be split into 2 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7) - {'options': [(7, 7), (6, 8)], 'scores': [2, 2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 30 members
4218750000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
simplified...
4218750000000000000 combinations

Solving system # 1
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9): {'options': [(13, 9)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7): {'options': [(7, 7), (6, 8)], 'scores': [2, 2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 10
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (6, 7), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]}
max_score - 1180

-------------------------------------
TARGET system:
30 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                      10                         
 6                  10   X  10                     
 7              10   X   X   X  10                 
 8          10   X   X  10   X   X  10             
 9      10   X   X  10      10   X   X             
10          10   X   X  10   X   X  10             
11              10   X   X   X  10                 
12                  10   X  10                     
13                      10                         
14                                                 


The initial system score was 1214
The maximum obtainable for the system is 1218
The score gain were looking for is 4
bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(6, 7)]
bots_outside_system_moving_to_optional  = [(6, 7)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 10
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   ?   0   -                     
 7           X   -   0   0   0   -                 
 8           -   0   0   ?   0   0   -             
 9       ?   0   0   ?       ?   0   0             
10           ?   0   0   ?   0   0   -             
11               ?   0   0   0   -                 
12                   -   0   -                     
13                       ?                         
14                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                      38                         
 6                  38  40  38                     
 7          36  38  40  40  40  38                 
 8          38  40  40  38  40  40  38             
 9      38  40  40  38      38  40  40             
10          38  40  40  38  40  40  38             
11              38  40  40  40  38                 
12                  38  40  38                     
13                      38                         
14                                                 

The system now has a total of 4218750000000000000 options
Optional squares exist

System result = ...
The system has a total of 4218750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7) - {'options': [(7, 7), (6, 8)], 'scores': [2, 2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(6, 7) - {'options': [(7, 7)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6)], 'scores': [0, 0, 0, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8)], 'scores': [0, 0, 0, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.217000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (6, 7): {'options': [(7, 7)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (6, 7): {'options': [(7, 7)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 68 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.487000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 69 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.408000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 70 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (enemy)     vulnerability = 17 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,16) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,13) (enemy)     vulnerability = 13 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17,10) (enemy)     vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.419000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 71 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(17, 7) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 2,12) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  0 health_diffs =  0
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,16) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs =  0
(15, 3) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,17) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.441000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (17, 7): {'options': [(17, 8)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (2, 12): {'options': [(3, 12)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 16): {'options': [(13, 15)], 'scores': [2]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (15, 3): {'options': [(15, 4)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (7, 17): {'options': [(8, 17)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 72 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 4) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,15) (friendly)  vulnerability =  6 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
(17, 8) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,17) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,12) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.399000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (17, 8): {'options': [(16, 8)], 'scores': [2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (15, 4): {'options': [(15, 5)], 'scores': [2]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (13, 15): {'options': [(13, 14)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 17): {'options': [(8, 16)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (3, 12): {'options': [(4, 12)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 73 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,12) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 5) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs =  0
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 8) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.431000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (4, 12): {'options': [(5, 12)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (15, 5): {'options': [(15, 6)], 'scores': [2]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (8, 16): {'options': [(9, 16)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (13, 14): {'options': [(13, 13)], 'scores': [2]}, (16, 8): {'options': [(16, 9)], 'scores': [2]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 74 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,13) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(16, 9) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs =  0
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1218
The maximum obtainable for the system is 1218
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  7.370000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (13, 13): {'options': [(12, 13)], 'scores': [2]}, (16, 9): {'options': [(15, 9)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (5, 12): {'options': [(6, 12)], 'scores': [2]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 75 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -4
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  3 attack_ratio =  0 health_diffs =  4
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
Awarded move for (9, 15)  to (9, 14)
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (6, 12), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(6, 12)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12) - {'options': [(7, 12), (6, 11), (6, 12)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (10, 13)], 'scores': [2, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10)], 'scores': [2, 0, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   -                 
 7               X   X   X   X   -             
 8           -   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   -   X   -                 
13                       X                     
14                                             

System can be split into 2 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 31 members
15820312500000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
simplified...
15820312500000000000 combinations

Solving system # 1
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12): {'options': [(7, 12)], 'scores': [2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      11                     
 6                  11   X  11                 
 7              11   X   X   X  11             
 8          11   X   X  11   X   X  11         
 9      11   X   X  11      11   X   X  11     
10          11   X   X  11   X   X  11         
11              11   X   X   X  11             
12                  11   X  11                 
13                      11                     
14                                             


The initial system score was 1252
The maximum obtainable for the system is 1254
The score gain were looking for is 2
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   -                 
 7               ?   0   0   0   -             
 8           -   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   -   0   -                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 15): {'options': [(9, 14)], 'scores': [2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12): {'options': [(7, 12)], 'scores': [2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9): {'options': [(14, 9)], 'scores': [2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 5                       -                             
 6                   X   X   -                         
 7               X   X   X   X   -                     
 8           -   X   X   X   X   X   -                 
 9       X   X   X   X       X   X   X   X             
10           X   X   X   X   X   X   -                 
11               X   X   X   X   -                     
12                   -   X   -                         
13                       X                             
14                                                     
15                                                     
16                                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 5                       -                             
 6                   X   X   -                         
 7               X   X   X   X   -                     
 8           -   X   X   X   X   X   -                 
 9       X   X   X   X       X   X   X   X             
10           X   X   X   X   X   X   -                 
11               X   X   X   X   -                     
12                   -   X   -                         
13                       X                             
14                                                     
15                                                     
16                                                     

System can be split into 4 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 31 members
15820312500000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
simplified...
15820312500000000000 combinations

Solving system # 1
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 15): {'options': [(9, 14)], 'scores': [2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12): {'options': [(7, 12)], 'scores': [2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9): {'options': [(14, 9)], 'scores': [2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 11
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1218

-------------------------------------
TARGET system:
31 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 5                      11                             
 6                  11   X  11                         
 7              11   X   X   X  11                     
 8          11   X   X  11   X   X  11                 
 9      11   X   X  11      11   X   X  11             
10          11   X   X  11   X   X  11                 
11              11   X   X   X  11                     
12                  11   X  11                         
13                      11                             
14                                                     
15                                                     
16                                                     


The initial system score was 1320
The maximum obtainable for the system is 1326
The score gain were looking for is 6
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 11
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
31 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 5                       -                             
 6                   ?   0   -                         
 7               ?   0   0   0   -                     
 8           -   0   0   ?   0   0   -                 
 9       ?   0   0   ?       ?   0   0   ?             
10           ?   0   0   ?   0   0   -                 
11               ?   0   0   0   -                     
12                   -   0   -                         
13                       ?                             
14                                                     
15                                                     
16                                                     

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 5                      38                             
 6                  38  40  38                         
 7              38  40  40  40  38                     
 8          38  40  40  38  40  40  38                 
 9      38  40  40  38      38  40  40  38             
10          38  40  40  38  40  40  38                 
11              38  40  40  40  38                     
12                  38  40  38                         
13                      38                             
14                                                     
15                                                     
16                                                     

The system now has a total of 15820312500000000000 options
Optional squares exist

System result = ...
The system has a total of 15820312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 12) - {'options': [(7, 12)], 'scores': [2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.243000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (6, 12): {'options': [(7, 12)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (12, 13): {'options': [(12, 12)], 'scores': [2]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (6, 12): {'options': [(7, 12)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 76 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -8
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  4 attack_ratio =  0 health_diffs =  8
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (7, 12), (9, 8), (7, 7), (8, 9), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (9, 14), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (10, 10), (11, 8), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   X   X   -                     
 7               X   X   X   X   -                 
 8           -   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12               X   -   X   -                     
13                                                 
14                                                 
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   X   X   -                     
 7               X   X   X   X   -                 
 8           -   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12               X   -   X   -                     
13                                                 
14                                                 
15                                                 

System can be split into 5 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12)], 'scores': [2, 2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 10)], 'scores': [0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (10, 12), (8, 12)], 'scores': [0, -2, -2]}
A subsystem...
has 30 members
1822500000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (7, 12), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
simplified...
1822500000000000000 combinations

Solving system # 1
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(7, 12): {'options': [(7, 11), (8, 12)], 'scores': [2, 2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9): {'options': [(13, 9)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 10)], 'scores': [0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14): {'options': [(9, 13)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12)], 'scores': [2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (10, 12), (8, 12)], 'scores': [0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (7, 12), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
outcome = 
num_optional - 12
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (7, 12), (9, 8), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]}
max_score - 1176

-------------------------------------
TARGET system:
30 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                      12                         
 6                  12   X  12                     
 7              12   X   X   X  12                 
 8          12   X   X  12   X   X  12             
 9      12   X   X  12      12   X                 
10          12   X   X  12   X   X  12             
11              12   X   X   X  12                 
12                  12      12                     
13                                                 
14                                                 
15                                                 


The initial system score was 1326
The maximum obtainable for the system is 1332
The score gain were looking for is 6
bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(7, 12), (12, 9), (9, 12)]
bots_outside_system_moving_to_optional  = [(7, 12)]
bots_in_occupied = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 12
num_target_bots_in_occupied = 18
current_bots_in_optional = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (7, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10)]
current_bots_in_occupied = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]
current_bots_outside = [(12, 9), (9, 12)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
30 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                       -                         
 6                   ?   0   -                     
 7               ?   0   0   0   -                 
 8           -   0   0   ?   0   0   -             
 9       ?   0   0   ?       ?   0   X             
10           ?   0   0   ?   0   0   -             
11               ?   0   0   0   -                 
12               X   -   X   -                     
13                                                 
14                                                 
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 5                      38                         
 6                  38  40  38                     
 7              38  40  40  40  38                 
 8          38  40  40  38  40  40  38             
 9      38  40  40  38      38  40  40             
10          38  40  40  38  40  40  38             
11              38  40  40  40  38                 
12              36  38  40  38                     
13                                                 
14                                                 
15                                                 

The system now has a total of 1822500000000000000 options
Optional squares exist
2 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 1822500000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12)], 'scores': [2, 2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 10)], 'scores': [0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (10, 12), (8, 12)], 'scores': [0, -2, -2]}


The system did not change in simplify system, returning
It took  3.403000ms for system_walk to complete
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((11, 10), (11, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Works... [((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((11, 10), (11, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((7, 8), (7, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(6, 8)], 'scores': [-2]}
(10, 11) - {'options': [(10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, -2, -2]}
(7, 12) - {'options': [(8, 12)], 'scores': [2]}
(9, 8) - {'options': [(8, 8), (9, 8)], 'scores': [2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 9)], 'scores': [2, 0]}
(7, 11) - {'options': [(7, 11)], 'scores': [0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 7)], 'scores': [0]}
(11, 10) - {'options': [(11, 10), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, -2, -2]}
(10, 7) - {'options': [(9, 7)], 'scores': [0]}
(6, 10) - {'options': [(6, 10)], 'scores': [0]}
(8, 10) - {'options': [(7, 10)], 'scores': [0]}
(9, 11) - {'options': [(8, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 9)], 'scores': [0]}
(8, 6) - {'options': [(8, 7), (8, 6)], 'scores': [2, 0]}
(10, 9) - {'options': [(10, 10), (10, 9)], 'scores': [2, 0]}
(9, 7) - {'options': [(9, 6)], 'scores': [0]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(8, 11) - {'options': [(8, 10)], 'scores': [0]}
(11, 9) - {'options': [(11, 8)], 'scores': [0]}
(9, 10) - {'options': [(10, 10), (9, 10)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (8, 6), (7, 7)], 'scores': [0, 0, -2, -2]}
(9, 6) - {'options': [(10, 6)], 'scores': [-2]}
(7, 9) - {'options': [(6, 9)], 'scores': [0]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(10, 8)], 'scores': [0]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 7)], 'scores': [0, 0, -2]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
A system with max gain has been found!
It took  4.127000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
It took  0.026000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.033000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.026000ms for system_walk to complete
It took  0.033000ms for system_walk to complete
It took  0.036000ms for system_walk to complete
It took  0.034000ms for system_walk to complete
It took  0.036000ms for system_walk to complete
It took  0.056000ms for system_walk to complete
It took  0.039000ms for system_walk to complete
It took  0.066000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 8)], 'scores': [-2]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 12): {'options': [(8, 12)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 6)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(10, 6)], 'scores': [-2]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 8)], 'scores': [-2]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 12): {'options': [(8, 12)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (12, 12): {'options': [(11, 12)], 'scores': [2]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(7, 10)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 9)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 6)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(10, 6)], 'scores': [-2]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(10, 8)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}}
-------------------------- running turn 77 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -12
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 12
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   -   X             
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   -   X             
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1368
The maximum obtainable for the system is 1370
The score gain were looking for is 2
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(11, 12)]
bots_outside_system_moving_to_optional  = [(11, 12)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9), (11, 12)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   -   X             
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38  36             
13                      38                     
14                                             

The system now has a total of 854296875000000000000 options
Optional squares exist

System result = ...
The system has a total of 854296875000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12) - {'options': [(10, 12), (11, 11)], 'scores': [2, 2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((9, 6), (9, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((9, 6), (9, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12) - {'options': [(10, 12)], 'scores': [2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (8, 12)], 'scores': [0, 0, -2, -2]}
A system with max gain has been found!
It took  9.218000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (11, 12): {'options': [(10, 12)], 'scores': [2]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (11, 12): {'options': [(10, 12)], 'scores': [2]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 78 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -17
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 17
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.364000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 79 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -21
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 21
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.270000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 80 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 6) (enemy)     vulnerability = 10 attack_ratio =  0 health_diffs = -25
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,11) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 1) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 3,15) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5, 2) (enemy)     vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  0 health_diffs = 25
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.250000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 81 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 1) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 3,15) (friendly)  vulnerability =  8 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,15) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 6) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.248000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 1): {'options': [(9, 2)], 'scores': [2]}, (3, 15): {'options': [(4, 15)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (12, 2): {'options': [(11, 2)], 'scores': [2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (14, 15): {'options': [(13, 15)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (11, 17): {'options': [(11, 16)], 'scores': [2]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (15, 6): {'options': [(15, 7)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 82 ---------------------------
frontline_radius = 3
(11,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 2) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 7) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 2) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 4,15) (friendly)  vulnerability =  7 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.295000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 2): {'options': [(9, 3)], 'scores': [2]}
(11, 2): {'options': [(11, 3)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 2): {'options': [(11, 3)], 'scores': [2]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (13, 15): {'options': [(13, 14)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (15, 7): {'options': [(15, 8)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (9, 2): {'options': [(9, 3)], 'scores': [2]}, (4, 15): {'options': [(5, 15)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 83 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 8) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 3) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,15) (friendly)  vulnerability =  6 attack_ratio =  0 health_diffs =  0
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 3) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  0 health_diffs =  0
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                      15                     
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                       -                     
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                      38                     
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1281445312500000000000 options
Optional squares exist

System result = ...
The system has a total of 1281445312500000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  9.283000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(9, 3): {'options': [(9, 4)], 'scores': [2]}
(11, 3): {'options': [(11, 4)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (15, 8): {'options': [(15, 9)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 3): {'options': [(9, 4)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (5, 15): {'options': [(5, 14)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (11, 15): {'options': [(10, 15)], 'scores': [2]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (13, 14): {'options': [(13, 13)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 3): {'options': [(11, 4)], 'scores': [2]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 84 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,13) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 4) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,14) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
Awarded move for (9, 4)  to (9, 5)
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                                             
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                                             
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   -         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X                     
14                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 5                                             
 6                  15   X  15                 
 7              15   X   X   X  15             
 8          15   X   X  15   X   X  15         
 9      15   X   X  15      15   X   X  15     
10          15   X   X  15   X   X  15         
11              15   X   X   X  15             
12                  15   X  15                 
13                      15                     
14                                             


The initial system score was 1370
The maximum obtainable for the system is 1370
The score gain were looking for is 0
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  
 5                                             
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   -         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?                     
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 5                                             
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38                     
14                                             

The system now has a total of 1025156250000000000000 options
Optional squares exist

System result = ...
The system has a total of 1025156250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning

Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6): {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12): {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(11, 4): {'options': [(11, 5)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9): {'options': [(14, 9)], 'scores': [2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 3                                                     
 4                                                     
 5                                                     
 6                   X   X   X                         
 7               X   X   X   X   -                     
 8           X   X   X   X   X   X   -                 
 9       X   X   X   X       X   X   X   X             
10           X   X   X   X   X   X   -                 
11               X   X   X   X   -                     
12                   X   X   X                         
13                       X                             
14                                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 3                                                     
 4                                                     
 5                                                     
 6                   X   X   X                         
 7               X   X   X   X   -                     
 8           X   X   X   X   X   X   -                 
 9       X   X   X   X       X   X   X   X             
10           X   X   X   X   X   X   -                 
11               X   X   X   X   -                     
12                   X   X   X                         
13                       X                             
14                                                     

System can be split into 4 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 35 members
1025156250000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
simplified...
1025156250000000000000 combinations

Solving system # 1
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(11, 4) - {'options': [(11, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6): {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12): {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(9, 4): {'options': [(9, 5)], 'scores': [2]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(11, 4): {'options': [(11, 5)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9): {'options': [(14, 9)], 'scores': [2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
outcome = 
num_optional - 15
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (13, 9), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1370

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 3                                                     
 4                                                     
 5                                                     
 6                  15   X  15                         
 7              15   X   X   X  15                     
 8          15   X   X  15   X   X  15                 
 9      15   X   X  15      15   X   X  15             
10          15   X   X  15   X   X  15                 
11              15   X   X   X  15                     
12                  15   X  15                         
13                      15                             
14                                                     


The initial system score was 1472
The maximum obtainable for the system is 1478
The score gain were looking for is 6
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 3                                                     
 4                                                     
 5                                                     
 6                   ?   0   ?                         
 7               ?   0   0   0   -                     
 8           ?   0   0   ?   0   0   -                 
 9       ?   0   0   ?       ?   0   0   ?             
10           ?   0   0   ?   0   0   -                 
11               ?   0   0   0   -                     
12                   ?   0   ?                         
13                       ?                             
14                                                     

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 3                                                     
 4                                                     
 5                                                     
 6                  38  40  38                         
 7              38  40  40  40  38                     
 8          38  40  40  38  40  40  38                 
 9      38  40  40  38      38  40  40  38             
10          38  40  40  38  40  40  38                 
11              38  40  40  40  38                     
12                  38  40  38                         
13                      38                             
14                                                     

The system now has a total of 1025156250000000000000 options
Optional squares exist

System result = ...
The system has a total of 1025156250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(11, 4) - {'options': [(11, 5)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((7, 8), (7, 8)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(9, 4) - {'options': [(9, 5)], 'scores': [2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(11, 4) - {'options': [(11, 5)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6)], 'scores': [0, 0, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A system with max gain has been found!
It took  11.568000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 4): {'options': [(11, 5)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (13, 13): {'options': [(12, 13)], 'scores': [2]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (9, 4): {'options': [(9, 5)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (11, 4): {'options': [(11, 5)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 15): {'options': [(10, 14)], 'scores': [2]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (5, 14): {'options': [(6, 14)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 85 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 5) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,13) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,14) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (11, 5), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (10, 14), (8, 11), (11, 9), (9, 10), (8, 7), (13, 9), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(10, 14), (11, 5)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12)], 'scores': [2, 2, 0, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 5) - {'options': [(10, 5), (11, 6), (11, 5)], 'scores': [2, 2, 0]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(10, 14) - {'options': [(10, 13), (9, 14), (10, 14)], 'scores': [2, 2, 0]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10)], 'scores': [2, 0, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [2, 0, -2, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


=> INITIAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                                                 
 5                       X                         
 6                   X   X   X                     
 7               X   X   X   X   -                 
 8           X   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12                   X   X   X                     
13                       X                         
14                                                 
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                                                 
 5                       X                         
 6                   X   X   X                     
 7               X   X   X   X   -                 
 8           X   X   X   X   X   X   -             
 9       X   X   X   X       X   X   X             
10           X   X   X   X   X   X   -             
11               X   X   X   X   -                 
12                   X   X   X                     
13                       X                         
14                                                 
15                                                 

System can be split into 5 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 35 members
615093750000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12)]
simplified...
615093750000000000000 combinations

Solving system # 1
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(11, 5) - {'options': [(10, 5)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6): {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12): {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9): {'options': [(13, 9)], 'scores': [2]}
(12, 9): {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 5): {'options': [(10, 5)], 'scores': [2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(10, 14): {'options': [(10, 13)], 'scores': [2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 9): {'options': [(12, 9)], 'scores': [2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 16
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (9, 6), (7, 9), (9, 13), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (9, 5), (12, 8)]}
max_score - 1368

-------------------------------------
TARGET system:
35 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                                                 
 5                      16                         
 6                  16   X  16                     
 7              16   X   X   X  16                 
 8          16   X   X  16   X   X  16             
 9      16   X   X  16      16   X                 
10          16   X   X  16   X   X  16             
11              16   X   X   X  16                 
12                  16   X  16                     
13                      16                         
14                                                 
15                                                 


The initial system score was 1512
The maximum obtainable for the system is 1518
The score gain were looking for is 6
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (9, 5)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(12, 9)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 16
num_target_bots_in_occupied = 19
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (9, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (9, 13), (6, 8), (8, 12), (9, 5)]
current_bots_in_occupied = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]
current_bots_outside = [(12, 9)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (11, 8), (10, 10), (8, 8), (7, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
35 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                                                 
 5                       ?                         
 6                   ?   0   ?                     
 7               ?   0   0   0   -                 
 8           ?   0   0   ?   0   0   -             
 9       ?   0   0   ?       ?   0   X             
10           ?   0   0   ?   0   0   -             
11               ?   0   0   0   -                 
12                   ?   0   ?                     
13                       ?                         
14                                                 
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                                                 
 5                      38                         
 6                  38  40  38                     
 7              38  40  40  40  38                 
 8          38  40  40  38  40  40  38             
 9      38  40  40  38      38  40  40             
10          38  40  40  38  40  40  38             
11              38  40  40  40  38                 
12                  38  40  38                     
13                      38                         
14                                                 
15                                                 

The system now has a total of 615093750000000000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 615093750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9), (12, 10), (12, 8)], 'scores': [0, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 5) - {'options': [(10, 5)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (10, 9)], 'scores': [0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
Move ((10, 12), (10, 12))
Move ((9, 13), (9, 13))
Move ((8, 12), (8, 12))
Move ((9, 12), (9, 12))
Works... [((10, 12), (10, 12)), ((9, 13), (9, 13)), ((8, 12), (8, 12)), ((9, 12), (9, 12))]
Can freeze, freezing system
(5, 9) - {'options': [(5, 9)], 'scores': [0]}
(6, 9) - {'options': [(6, 10)], 'scores': [-2]}
(10, 11) - {'options': [(10, 10)], 'scores': [0]}
(9, 8) - {'options': [(9, 8)], 'scores': [0]}
(10, 6) - {'options': [(10, 6)], 'scores': [0]}
(7, 7) - {'options': [(7, 7)], 'scores': [0]}
(10, 12) - {'options': [(9, 12), (10, 12)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 9)], 'scores': [0]}
(7, 11) - {'options': [(7, 11)], 'scores': [0]}
(14, 9) - {'options': [(13, 9)], 'scores': [2]}
(12, 9) - {'options': [(11, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 7)], 'scores': [0]}
(11, 10) - {'options': [(12, 10)], 'scores': [-2]}
(11, 5) - {'options': [(10, 5)], 'scores': [2]}
(10, 7) - {'options': [(9, 7)], 'scores': [0]}
(6, 10) - {'options': [(7, 10)], 'scores': [2]}
(8, 10) - {'options': [(8, 11)], 'scores': [0]}
(9, 11) - {'options': [(10, 11)], 'scores': [0]}
(7, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 6) - {'options': [(8, 7)], 'scores': [2]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(9, 6)], 'scores': [0]}
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
(8, 11) - {'options': [(9, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 8)], 'scores': [0]}
(9, 10) - {'options': [(9, 10)], 'scores': [0]}
(8, 7) - {'options': [(8, 8)], 'scores': [0]}
(13, 9) - {'options': [(12, 9)], 'scores': [2]}
(9, 6) - {'options': [(8, 6)], 'scores': [-2]}
(7, 9) - {'options': [(6, 9)], 'scores': [0]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(6, 8) - {'options': [(6, 8)], 'scores': [0]}
(8, 12) - {'options': [(9, 12), (8, 12)], 'scores': [2, 0]}
(11, 8) - {'options': [(10, 8)], 'scores': [0]}
(10, 10) - {'options': [(11, 10)], 'scores': [0]}
(8, 8) - {'options': [(7, 8)], 'scores': [0]}
(9, 5) - {'options': [(9, 5)], 'scores': [0]}
(7, 8) - {'options': [(7, 9)], 'scores': [0]}
(9, 12) - {'options': [(9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, -2, -2, -2]}
A system with max gain has been found!
It took  2.357000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
It took  0.038000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.033000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.079000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 10)], 'scores': [-2]}, (10, 11): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(11, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [-2]}, (11, 5): {'options': [(10, 5)], 'scores': [2]}, (10, 7): {'options': [(9, 7)], 'scores': [0]}, (6, 10): {'options': [(7, 10)], 'scores': [2]}, (8, 10): {'options': [(8, 11)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 6)], 'scores': [0]}, (10, 14): {'options': [(10, 13)], 'scores': [2]}, (8, 11): {'options': [(9, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (9, 6): {'options': [(8, 6)], 'scores': [-2]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 10)], 'scores': [-2]}, (10, 11): {'options': [(10, 10)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(13, 9)], 'scores': [2]}, (12, 9): {'options': [(11, 9)], 'scores': [0]}, (6, 14): {'options': [(7, 14)], 'scores': [2]}, (10, 8): {'options': [(10, 7)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [-2]}, (11, 5): {'options': [(10, 5)], 'scores': [2]}, (12, 13): {'options': [(12, 12)], 'scores': [2]}, (6, 10): {'options': [(7, 10)], 'scores': [2]}, (8, 10): {'options': [(8, 11)], 'scores': [0]}, (9, 11): {'options': [(10, 11)], 'scores': [0]}, (7, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 6)], 'scores': [0]}, (10, 14): {'options': [(10, 13)], 'scores': [2]}, (8, 11): {'options': [(9, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [-2]}, (7, 9): {'options': [(6, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(10, 8)], 'scores': [0]}, (10, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 8): {'options': [(7, 8)], 'scores': [0]}, (13, 9): {'options': [(12, 9)], 'scores': [2]}, (7, 8): {'options': [(7, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}}
-------------------------- running turn 86 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,12) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (10, 9), (9, 7), (12, 12), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (10, 5), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(12, 12)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12), (10, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13), (10, 14)], 'scores': [2, 2, 0, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(12, 12) - {'options': [(11, 12), (12, 11), (12, 12)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14)], 'scores': [2, 0, -2]}
(10, 5) - {'options': [(9, 5), (10, 6), (10, 5), (10, 4)], 'scores': [2, 2, 0, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


=> INITIAL
BOT Positions:
39 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                                             
 5                       X   X                 
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   X         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X   X                 
14                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
39 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                                             
 5                       X   X                 
 6                   X   X   X                 
 7               X   X   X   X   -             
 8           X   X   X   X   X   X   -         
 9       X   X   X   X       X   X   X   X     
10           X   X   X   X   X   X   X         
11               X   X   X   X   -             
12                   X   X   X                 
13                       X   X                 
14                                             

System can be split into 2 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 13) - {'options': [(9, 13), (10, 12)], 'scores': [2, 2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 5) - {'options': [(9, 5), (10, 6)], 'scores': [2, 2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
A subsystem...
has 39 members
30754687500000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (10, 9), (9, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (10, 5), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12)]
simplified...
30754687500000000000000 combinations

Solving system # 1
(12, 12) - {'options': [(11, 12)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6): {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12): {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 13): {'options': [(9, 13), (10, 12)], 'scores': [2, 2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(12, 12): {'options': [(11, 12)], 'scores': [2]}
(13, 9): {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10): {'options': [(11, 10), (12, 9), (12, 10)], 'scores': [2, 2, 0]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 5): {'options': [(9, 5), (10, 6)], 'scores': [2, 2]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (10, 9), (9, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (10, 5), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12)]
outcome = 
num_optional - 19
optional - [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)]
available_bots - [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (10, 9), (9, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (10, 5), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (7, 8), (9, 12)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1522

-------------------------------------
TARGET system:
39 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                                             
 5                      19                     
 6                  19   X  19                 
 7              19   X   X   X  19             
 8          19   X   X  19   X   X  19         
 9      19   X   X  19      19   X   X  19     
10          19   X   X  19   X   X  19         
11              19   X   X   X  19             
12                  19   X  19                 
13                      19                     
14                                             


The initial system score was 1552
The maximum obtainable for the system is 1558
The score gain were looking for is 6
bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (12, 10), (9, 13), (6, 8), (8, 12), (9, 5), (13, 9)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(10, 13), (10, 5)]
bots_outside_system_moving_to_optional  = [(10, 13), (10, 5)]
bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (8, 8), (9, 12)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 19
num_target_bots_in_occupied = 20
current_bots_in_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (12, 10), (9, 13), (6, 8), (8, 12), (9, 5), (13, 9), (10, 13), (10, 5)]
current_bots_in_optional_that_can_move_to_occupied = [(5, 9), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (6, 10), (8, 6), (10, 9), (9, 10), (12, 10), (9, 13), (6, 8), (8, 12), (9, 5), (13, 9)]
current_bots_in_occupied = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (8, 8), (9, 12)]
current_bots_in_occupied_that_can_move_to_optional = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (8, 8), (9, 12)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(6, 9), (10, 11), (12, 9), (10, 8), (11, 10), (10, 7), (8, 10), (9, 11), (7, 10), (9, 7), (8, 11), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (7, 8), (8, 8), (9, 12)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
39 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                                             
 5                       ?   X                 
 6                   ?   0   ?                 
 7               ?   0   0   0   -             
 8           ?   0   0   ?   0   0   -         
 9       ?   0   0   ?       ?   0   0   ?     
10           ?   0   0   ?   0   0   ?         
11               ?   0   0   0   -             
12                   ?   0   ?                 
13                       ?   X                 
14                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                                             
 5                      38  36                 
 6                  38  40  38                 
 7              38  40  40  40  38             
 8          38  40  40  38  40  40  38         
 9      38  40  40  38      38  40  40  38     
10          38  40  40  38  40  40  38         
11              38  40  40  40  38             
12                  38  40  38                 
13                      38  36                 
14                                             

The system now has a total of 30754687500000000000000 options
Optional squares exist

System result = ...
The system has a total of 30754687500000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (11, 11), (10, 12)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6)], 'scores': [2, 2, 0]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12)], 'scores': [2, 2, 0]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11)], 'scores': [2, 2, 0]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10), (11, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6)], 'scores': [2, 2, 0]}
(10, 13) - {'options': [(9, 13), (10, 12)], 'scores': [2, 2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9)], 'scores': [2, 2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(12, 12) - {'options': [(11, 12)], 'scores': [2]}
(13, 9) - {'options': [(12, 9), (13, 9)], 'scores': [2, 0]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10)], 'scores': [2, 2, 0]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13)], 'scores': [2, 0]}
(10, 5) - {'options': [(9, 5), (10, 6)], 'scores': [2, 2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5)], 'scores': [2, 0]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}


The system did not change in simplify system, returning
It took  3.872000ms for system_walk to complete
It took  6.074000ms for system_walk to complete
It took  3.505000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  3.784000ms for system_walk to complete
It took  3.632000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  3.124000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  4.144000ms for system_walk to complete
It took  6.399000ms for system_walk to complete
It took  3.745000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  4.035000ms for system_walk to complete
It took  3.936000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  3.294000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  4.373000ms for system_walk to complete
It took  6.621000ms for system_walk to complete
It took  3.833000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  4.265000ms for system_walk to complete
It took  4.152000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  3.451000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  3.446000ms for system_walk to complete
It took  5.699000ms for system_walk to complete
It took  3.319000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  4.020000ms for system_walk to complete
It took  6.449000ms for system_walk to complete
It took  3.636000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.029000ms for system_walk to complete
It took  4.294000ms for system_walk to complete
It took  6.724000ms for system_walk to complete
It took  3.959000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.028000ms for system_walk to complete
It took  4.966000ms for system_walk to complete
It took  3.990000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  2.891000ms for system_walk to complete
It took  0.011000ms for system_walk to complete
It took  3.252000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.020000ms for system_walk to complete
It took  4.343000ms for system_walk to complete
It took  4.183000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  3.460000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  3.657000ms for system_walk to complete
It took  5.950000ms for system_walk to complete
It took  3.422000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  3.712000ms for system_walk to complete
It took  3.516000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  3.021000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.013000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  4.021000ms for system_walk to complete
It took  6.282000ms for system_walk to complete
It took  3.702000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  3.917000ms for system_walk to complete
It took  3.803000ms for system_walk to complete
It took  0.008000ms for system_walk to complete
It took  3.251000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  0.036000ms for system_walk to complete
It took  0.036000ms for system_walk to complete
It took  4.173000ms for system_walk to complete
It took  6.241000ms for system_walk to complete
It took  3.846000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
It took  3.944000ms for system_walk to complete
It took  3.776000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  3.197000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  0.026000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
It took  4.928000ms for system_walk to complete
It took  7.298000ms for system_walk to complete
It took  4.327000ms for system_walk to complete
It took  0.019000ms for system_walk to complete
It took  0.015000ms for system_walk to complete
It took  5.145000ms for system_walk to complete
It took  4.693000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  4.112000ms for system_walk to complete
It took  0.021000ms for system_walk to complete
It took  0.016000ms for system_walk to complete
It took  0.033000ms for system_walk to complete
It took  5.102000ms for system_walk to complete
It took  7.244000ms for system_walk to complete
It took  4.403000ms for system_walk to complete
It took  0.022000ms for system_walk to complete
It took  0.018000ms for system_walk to complete
It took  4.838000ms for system_walk to complete
It took  5.003000ms for system_walk to complete
It took  0.017000ms for system_walk to complete
It took  3.780000ms for system_walk to complete
It took  0.009000ms for system_walk to complete
It took  0.014000ms for system_walk to complete
It took  0.025000ms for system_walk to complete
It took  0.030000ms for system_walk to complete
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((6, 10), (6, 10))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((8, 7), (8, 7))
Move ((7, 9), (7, 9))
Move ((6, 8), (6, 8))
Move ((8, 8), (8, 8))
Move ((7, 8), (7, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((6, 10), (6, 10)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((8, 7), (8, 7)), ((7, 9), (7, 9)), ((6, 8), (6, 8)), ((8, 8), (8, 8)), ((7, 8), (7, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9)], 'scores': [2, 0]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(10, 11), (11, 11), (10, 12)], 'scores': [0, -2, -2]}
(9, 8) - {'options': [(8, 8), (9, 8)], 'scores': [2, 0]}
(12, 12) - {'options': [(11, 12)], 'scores': [2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7)], 'scores': [2, 2, 0]}
(10, 12) - {'options': [(10, 11), (10, 12)], 'scores': [2, 0]}
(8, 9) - {'options': [(8, 8), (7, 9), (8, 9)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(7, 10), (7, 11)], 'scores': [2, 0]}
(12, 9) - {'options': [(12, 8)], 'scores': [-2]}
(10, 8) - {'options': [(11, 8)], 'scores': [0]}
(11, 10) - {'options': [(11, 9)], 'scores': [0]}
(10, 7) - {'options': [(10, 8)], 'scores': [0]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10)], 'scores': [2, 2, 0]}
(8, 10) - {'options': [(9, 10)], 'scores': [-2]}
(9, 11) - {'options': [(8, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, -2, -2]}
(8, 6) - {'options': [(8, 7), (8, 6)], 'scores': [2, 0]}
(10, 13) - {'options': [(9, 13)], 'scores': [2]}
(10, 9) - {'options': [(10, 9)], 'scores': [0]}
(9, 7) - {'options': [(10, 7)], 'scores': [0]}
(10, 6) - {'options': [(10, 6)], 'scores': [0]}
(13, 9) - {'options': [(13, 9)], 'scores': [0]}
(8, 11) - {'options': [(8, 10)], 'scores': [0]}
(11, 9) - {'options': [(12, 9)], 'scores': [0]}
(9, 10) - {'options': [(10, 10)], 'scores': [2]}
(8, 7) - {'options': [(8, 8), (8, 7), (8, 6), (7, 7)], 'scores': [0, 0, -2, -2]}
(12, 10) - {'options': [(12, 10)], 'scores': [0]}
(9, 6) - {'options': [(9, 7)], 'scores': [0]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12)], 'scores': [2]}
(10, 5) - {'options': [(9, 5)], 'scores': [2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8)], 'scores': [2, 2, 0]}
(10, 10) - {'options': [(11, 10)], 'scores': [0]}
(11, 8) - {'options': [(11, 7)], 'scores': [-2]}
(8, 12) - {'options': [(8, 12)], 'scores': [0]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6)], 'scores': [2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11)], 'scores': [0]}
A system with max gain has been found!
It took  6.697000ms for system_walk to complete
It took  0.027000ms for system_walk to complete
It took  0.041000ms for system_walk to complete
It took  0.050000ms for system_walk to complete
It took  0.053000ms for system_walk to complete
It took  0.042000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.057000ms for system_walk to complete
It took  0.056000ms for system_walk to complete
It took  0.043000ms for system_walk to complete
It took  0.057000ms for system_walk to complete
It took  0.061000ms for system_walk to complete
It took  0.049000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (12, 12): {'options': [(11, 12)], 'scores': [2]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 8)], 'scores': [-2]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 9)], 'scores': [0]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [-2]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 13): {'options': [(9, 13)], 'scores': [2]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (11, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 5): {'options': [(9, 5)], 'scores': [2]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(11, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [-2]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (12, 12): {'options': [(11, 12)], 'scores': [2]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(9, 10)], 'scores': [-2]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 8)], 'scores': [-2]}, (10, 8): {'options': [(11, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 9)], 'scores': [0]}, (9, 5): {'options': [(9, 6)], 'scores': [2]}, (10, 7): {'options': [(10, 8)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 11): {'options': [(8, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 14): {'options': [(8, 14)], 'scores': [2]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (10, 13): {'options': [(9, 13)], 'scores': [2]}, (11, 9): {'options': [(12, 9)], 'scores': [0]}, (9, 10): {'options': [(10, 10)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 7)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [2]}, (10, 5): {'options': [(9, 5)], 'scores': [2]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(11, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [-2]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 11)], 'scores': [0]}}
-------------------------- running turn 87 ---------------------------
frontline_radius = 3
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              26  28  30  28  26                              
 2                      24  26  28  30  32  30  28  26  24                      
 3              22  24  26  28  30  32  34  32  30  28  26  24  22              
 4              24  26  28  30  32  34  36  34  32  30  28  26  24              
 5          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
 6          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 7      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
 8      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 9      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
10      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
11      26  28  30  32  34  36  38  40  40  40  38  36  34  32  30  28  26      
12          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
13          24  26  28  30  32  34  36  38  36  34  32  30  28  26  24          
14              24  26  28  30  32  34  36  34  32  30  28  26  24              
15              22  24  26  28  30  32  34  32  30  28  26  24  22              
16                      24  26  28  30  32  30  28  26  24                      
17                              26  28  30  28  26                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X   -   X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X   -   -         
12               -   X   X   X   X             
13                   -   X   -                 
14                   X   -                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X   -   X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X   -   -         
12               -   X   X   X   X             
13                   -   X   -                 
14                   X   -                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 1
optional - [(7, 12), (8, 5), (9, 4), (14, 9), (5, 8), (4, 9), (11, 12), (7, 6), (10, 13), (13, 10), (6, 11), (12, 7), (12, 11), (13, 8), (6, 7), (10, 5), (5, 10), (8, 13), (9, 9), (9, 14), (11, 6)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (11, 9), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 12), (7, 8), (5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (11, 12), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (9, 7), (11, 9), (8, 11), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 12), (7, 8)], 36: [(7, 12), (8, 5), (9, 4), (14, 9), (5, 8), (4, 9), (11, 12), (7, 6), (10, 13), (13, 10), (6, 11), (12, 7), (12, 11), (13, 8), (6, 7), (10, 5), (5, 10), (8, 13), (9, 9), (9, 14), (11, 6)], 38: [(5, 9), (11, 11), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 10), (9, 13), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1596

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                       1                     
 5                   1   X   1                 
 6               1   X   X   X   1             
 7           1   X   X   X   X   X   1         
 8       1   X   X   X   X   X   X   X   1     
 9   1   X   X   X   X   1   X   X   X   X   1 
10       1   X   X   X   X   X   X   X   1     
11           1   X   X   X   X   X   1         
12               1   X   X   X   1             
13                   1   X   1                 
14                       1                     
15                                             


The initial system score was 1592
The maximum obtainable for the system is 1596
The score gain were looking for is 4
bots_in_optional = [(11, 12)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 14)]
bots_outside_system_moving_to_optional  = [(8, 14)]
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 40
current_bots_in_optional = [(11, 12), (8, 14)]
current_bots_in_optional_that_can_move_to_occupied = [(11, 12)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (8, 6), (10, 9), (9, 10), (12, 10), (11, 7), (6, 8), (8, 12), (9, 5), (9, 13), (13, 9), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = [(11, 11)]
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               -   0   0   0   -             
 7           -   0   0   0   0   0   -         
 8       -   0   0   0   0   0   0   0   -     
 9   -   0   0   0   0   -   0   0   0   0   - 
10       -   0   0   0   0   0   0   0   -     
11           -   0   0   0   0   =   -         
12               -   0   0   0   ?             
13                   -   0   -                 
14                   X   -                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      36                     
 5                  36  38  36                 
 6              36  38  40  38  36             
 7          36  38  40  40  40  38  36         
 8      36  38  40  40  38  40  40  38  36     
 9  36  38  40  40  38  36  38  40  40  38  36 
10      36  38  40  40  38  40  40  38  36     
11          36  38  40  40  40  38  36         
12              36  38  40  38  36             
13                  36  38  36                 
14                  34  36                     
15                                             

The system now has a total of 6984919309616088867187500000 options
Optional squares exist
1 bots need to move out of optional
Deficit = 0
And 1 bots need to move into occupied
len(current_bots_in_optional_that_can_move_to_occupied) = 1
Precheck for obvious moves
Forced (11, 12) to move into (11, 11) as only bot for this target
simplification made, will repeat
Precheck for obvious moves
It should be possible to make this happen
B - Like by doing one from 0 of the following solutions
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               -   0   0   0   -             
 7           -   0   0   0   0   0   -         
 8       -   0   0   0   0   0   0   0   -     
 9   -   0   0   0   0   -   0   0   0   0   - 
10       -   0   0   0   0   0   0   0   -     
11           -   0   0   0   0   =   -         
12               -   0   0   0   ?             
13                   -   0   -                 
14                   X   -                     
15                                             




TRY MOVEMENT SETS
Identify identical contest sets and grant
no solve_microsystems reductions made
No simplifications made
BOT Positions:
0 participants
    
The tmp_system has under 100 moves, solving NOW
The temp system has TOO MAYNY combinations to solve straight
1
Can be split into 0 subsystems
try_movement_sets dimensions
0 targets
0 candidates
It took  0.005000ms for mixer to complete
It took  0.012000ms for mix_lists to complete

Looking at []
Finished generating path sets
[]

Works... ()
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12), (10, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12) - {'options': [(11, 11)], 'scores': [2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14) - {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [2, 0, -2, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}
The movements were made

System result = ...
The system has a total of 1490116119384765625000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12), (10, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12) - {'options': [(11, 11)], 'scores': [2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14) - {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [2, 0, -2, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}


The system changed while in simplyfy, running system through simplyfy_system again


=> INITIAL
BOT Positions:
40 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X   -   X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X       -         
12               -   X   X   X   -             
13                   -   X   -                 
14                   X   -                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
40 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X   -   X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X       -         
12               -   X   X   X   -             
13                   -   X   -                 
14                   X   -                     
15                                             

System can be split into 2 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12)], 'scores': [2, 2, 0, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14) - {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13)], 'scores': [2, 0, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}
A subsystem...
has 40 members
953674316406250000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
simplified...
953674316406250000000000000 combinations

Solving system # 1
(11, 12) - {'options': [(11, 11)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9): {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11): {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(11, 7): {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(9, 8): {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6): {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7): {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12): {'options': [(10, 11), (9, 12), (10, 12), (11, 12)], 'scores': [2, 2, 0, -2]}
(8, 9): {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9): {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10): {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7): {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12): {'options': [(11, 11)], 'scores': [2]}
(6, 10): {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11): {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10): {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9): {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14): {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(13, 9): {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11): {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10): {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7): {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10): {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6): {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13): {'options': [(9, 12), (9, 13), (9, 14), (10, 13)], 'scores': [2, 0, -2, -2]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8): {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5): {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8): {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8): {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 1
optional - [(12, 11), (7, 12), (8, 5), (9, 4), (14, 9), (5, 8), (4, 9), (10, 13), (11, 12), (7, 6), (13, 10), (9, 14), (6, 11), (12, 7), (13, 8), (6, 7), (10, 5), (5, 10), (8, 13), (9, 9), (11, 6)]
occupied - [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (8, 11), (9, 7), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 12), (7, 8), (5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 7), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 14), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(6, 9), (10, 11), (8, 10), (12, 9), (10, 8), (11, 10), (10, 7), (9, 11), (7, 10), (8, 11), (9, 7), (11, 9), (8, 7), (9, 6), (7, 9), (10, 10), (11, 8), (8, 8), (9, 12), (7, 8)], 36: [(12, 11), (7, 12), (8, 5), (9, 4), (14, 9), (5, 8), (4, 9), (10, 13), (11, 12), (7, 6), (13, 10), (9, 14), (6, 11), (12, 7), (13, 8), (6, 7), (10, 5), (5, 10), (8, 13), (9, 9), (11, 6)], 38: [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (9, 5), (6, 10), (10, 12), (12, 10), (10, 9), (9, 13), (9, 10), (8, 6), (11, 7), (6, 8), (8, 12), (13, 9), (12, 8)]}
max_score - 1558

-------------------------------------
TARGET system:
40 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                       1                     
 5                   1   X   1                 
 6               1   X   X   X   1             
 7           1   X   X   X   X   X   1         
 8       1   X   X   X   X   X   X   X   1     
 9   1   X   X   X   X   1   X   X   X   X   1 
10       1   X   X   X   X   X   X   X   1     
11           1   X   X   X   X       1         
12               1   X   X   X   1             
13                   1   X   1                 
14                       1                     
15                                             


The initial system score was 1592
The maximum obtainable for the system is 1596
The score gain were looking for is 4
bots_in_optional = []
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 14)]
bots_outside_system_moving_to_optional  = [(8, 14)]
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 1
num_target_bots_in_occupied = 39
current_bots_in_optional = [(8, 14)]
current_bots_in_optional_that_can_move_to_occupied = []
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (9, 8), (10, 6), (7, 7), (8, 9), (7, 11), (6, 10), (10, 12), (8, 6), (10, 9), (9, 10), (12, 10), (11, 7), (6, 8), (8, 12), (9, 5), (9, 13), (13, 9), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (9, 8), (10, 6), (7, 7), (8, 10), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (10, 12), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (11, 7), (6, 8), (10, 10), (11, 8), (7, 8), (8, 12), (8, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
40 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               -   0   0   0   -             
 7           -   0   0   0   0   0   -         
 8       -   0   0   0   0   0   0   0   -     
 9   -   0   0   0   0   -   0   0   0   0   - 
10       -   0   0   0   0   0   0   0   -     
11           -   0   0   0   0       -         
12               -   0   0   0   -             
13                   -   0   -                 
14                   X   -                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      36                     
 5                  36  38  36                 
 6              36  38  40  38  36             
 7          36  38  40  40  40  38  36         
 8      36  38  40  40  38  40  40  38  36     
 9  36  38  40  40  38  36  38  40  40  38  36 
10      36  38  40  40  38  40  40  38  36     
11          36  38  40  40  40      36         
12              36  38  40  38  36             
13                  36  38  36                 
14                  34  36                     
15                                             

The system now has a total of 953674316406250000000000000 options
Optional squares exist

System result = ...
The system has a total of 953674316406250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12)], 'scores': [2, 2, 0, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(11, 12) - {'options': [(11, 11)], 'scores': [2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14) - {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13)], 'scores': [2, 0, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((9, 8), (9, 8))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((8, 10), (8, 10))
Move ((8, 9), (8, 9))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((9, 5), (9, 5))
Move ((10, 7), (10, 7))
Move ((9, 6), (9, 6))
Move ((6, 10), (6, 10))
Move ((10, 12), (10, 12))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 9), (10, 9))
Move ((9, 7), (9, 7))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((9, 10), (9, 10))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((7, 9), (7, 9))
Move ((11, 7), (11, 7))
Move ((6, 8), (6, 8))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 12), (8, 12))
Move ((8, 8), (8, 8))
Move ((13, 9), (13, 9))
Move ((9, 13), (9, 13))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((9, 8), (9, 8)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((8, 10), (8, 10)), ((8, 9), (8, 9)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((9, 5), (9, 5)), ((10, 7), (10, 7)), ((9, 6), (9, 6)), ((6, 10), (6, 10)), ((10, 12), (10, 12)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 9), (10, 9)), ((9, 7), (9, 7)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((9, 10), (9, 10)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((7, 9), (7, 9)), ((11, 7), (11, 7)), ((6, 8), (6, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 12), (8, 12)), ((8, 8), (8, 8)), ((13, 9), (13, 9)), ((9, 13), (9, 13)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [2, 0, -2, -2]}
(6, 9) - {'options': [(6, 9), (7, 9), (5, 9), (6, 10), (6, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 11) - {'options': [(9, 11), (10, 11), (10, 10), (10, 12)], 'scores': [0, 0, 0, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7), (9, 8), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(10, 6) - {'options': [(10, 7), (9, 6), (10, 6), (10, 5), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (8, 7), (7, 7), (7, 6), (6, 7)], 'scores': [2, 2, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (8, 10), (7, 10), (9, 10), (8, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9), (8, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [2, 2, 0, -2, -2]}
(12, 9) - {'options': [(11, 9), (12, 9), (13, 9), (12, 10), (12, 8)], 'scores': [0, 0, -2, -2, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 10) - {'options': [(11, 10), (11, 9), (10, 10), (12, 10)], 'scores': [0, 0, 0, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [2, 0, -2, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 8), (9, 7), (10, 6), (11, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(9, 6), (9, 7), (8, 6), (10, 6), (9, 5)], 'scores': [0, 0, -2, -2, -2]}
(6, 10) - {'options': [(6, 9), (7, 10), (6, 10), (6, 11), (5, 10)], 'scores': [2, 2, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (9, 12), (10, 12), (11, 12)], 'scores': [2, 2, 0, -2]}
(9, 11) - {'options': [(8, 11), (9, 11), (10, 11), (9, 12), (9, 10)], 'scores': [0, 0, 0, 0, -2]}
(7, 10) - {'options': [(8, 10), (7, 10), (7, 9), (7, 11), (6, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [2, 2, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10), (10, 9), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [0, 0, 0, 0, -2]}
(8, 14) - {'options': [(9, 14)], 'scores': [2]}
(8, 11) - {'options': [(8, 11), (9, 11), (8, 10), (7, 11), (8, 12)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (11, 9), (12, 9), (10, 9)], 'scores': [0, 0, 0, 0, -2]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10), (9, 10), (9, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 8), (8, 7), (9, 7), (8, 6), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [2, 2, 0, -2, -2]}
(11, 12) - {'options': [(11, 11)], 'scores': [2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [0, 0, 0, 0, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [2, 2, 0, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [2, 2, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 9), (10, 8), (11, 7), (12, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(8, 8), (7, 8), (8, 7), (8, 9), (9, 8)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [2, 0, -2, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (10, 13)], 'scores': [2, 0, -2]}
(7, 8) - {'options': [(8, 8), (7, 8), (7, 9), (6, 8), (7, 7)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 11), (9, 12), (9, 13), (10, 12), (8, 12)], 'scores': [0, 0, -2, -2, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [2, 2, 0, -2, -2]}
A system with max gain has been found!
It took  14.112000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 14): {'options': [(9, 14)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (11, 12): {'options': [(11, 11)], 'scores': [2]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (9, 8): {'options': [(9, 8)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 9)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (10, 9): {'options': [(10, 9)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (8, 14): {'options': [(9, 14)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 10): {'options': [(9, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (11, 12): {'options': [(11, 11)], 'scores': [2]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 88 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (9, 14), (11, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X       X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               -   X   X   X   -             
 7           -   X   X   X   X   X   -         
 8       -   X   X   X   X   X   X   X   -     
 9   -   X   X   X   X       X   X   X   X   - 
10       -   X   X   X   X   X   X   X   -     
11           -   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (9, 14), (11, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (9, 8), (10, 6), (7, 7), (10, 12), (8, 9), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 9), (9, 7), (9, 14), (11, 7), (13, 9), (8, 11), (11, 9), (9, 10), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1606
The maximum obtainable for the system is 1614
The score gain were looking for is 8
bots_in_optional = [(8, 10), (10, 8), (9, 11), (9, 7), (9, 14), (11, 9), (7, 9), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 8), (8, 9), (10, 9), (9, 10)]
bots_outside_system_moving_to_optional  = [(9, 8), (8, 9), (10, 9), (9, 10)]
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (9, 11), (9, 7), (9, 14), (11, 9), (7, 9), (10, 10), (8, 8), (9, 8), (8, 9), (10, 9), (9, 10)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (9, 11), (9, 7), (9, 14), (11, 9), (7, 9), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               -   0   0   0   -             
 7           -   0   0   ?   0   0   -         
 8       -   0   0   ?   X   ?   0   0   -     
 9   -   0   0   ?   X       X   ?   0   0   - 
10       -   0   0   ?   X   ?   0   0   -     
11           -   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38  36  38  40  40  38     
 9  38  40  40  38  36      36  38  40  40  38 
10      38  40  40  38  36  38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8), (8, 8), (9, 7)], 'scores': [2, 2, 2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 9) - {'options': [(8, 8), (8, 10), (7, 9)], 'scores': [2, 2, 2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 9) - {'options': [(10, 8), (11, 9), (10, 10)], 'scores': [2, 2, 2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(9, 10) - {'options': [(9, 11), (8, 10), (10, 10)], 'scores': [2, 2, 2]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((12, 9), (12, 9))
Move ((11, 10), (11, 10))
Move ((10, 12), (10, 12))
Move ((9, 14), (9, 14))
Move ((12, 10), (12, 10))
Move ((9, 13), (9, 13))
Move ((10, 10), (10, 10))
Move ((8, 12), (8, 12))
Move ((9, 5), (9, 5))
Move ((13, 9), (13, 9))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((10, 11), (10, 11)), ((11, 11), (11, 11)), ((12, 9), (12, 9)), ((11, 10), (11, 10)), ((10, 12), (10, 12)), ((9, 14), (9, 14)), ((12, 10), (12, 10)), ((9, 13), (9, 13)), ((10, 10), (10, 10)), ((8, 12), (8, 12)), ((9, 5), (9, 5)), ((13, 9), (13, 9)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(5, 10)], 'scores': [-2]}
(6, 9) - {'options': [(5, 9)], 'scores': [0]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (10, 10)], 'scores': [0, 0, 0, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 8) - {'options': [(10, 8)], 'scores': [2]}
(10, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 7) - {'options': [(7, 6)], 'scores': [-2]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(8, 9) - {'options': [(8, 8)], 'scores': [2]}
(7, 11) - {'options': [(7, 10)], 'scores': [0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8)], 'scores': [0, 0, 0, 0]}
(10, 8) - {'options': [(10, 7)], 'scores': [2]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (10, 10)], 'scores': [0, 0, 0, -2]}
(10, 7) - {'options': [(10, 6)], 'scores': [0]}
(6, 10) - {'options': [(6, 11)], 'scores': [-2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(9, 11) - {'options': [(8, 11)], 'scores': [2]}
(7, 10) - {'options': [(6, 10)], 'scores': [0]}
(8, 6) - {'options': [(8, 7)], 'scores': [0]}
(10, 9) - {'options': [(11, 9)], 'scores': [2]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(12, 7)], 'scores': [-2]}
(8, 11) - {'options': [(7, 11)], 'scores': [0]}
(11, 9) - {'options': [(11, 8)], 'scores': [2]}
(9, 10) - {'options': [(9, 11)], 'scores': [2]}
(8, 7) - {'options': [(7, 7)], 'scores': [0]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(6, 8) - {'options': [(6, 9)], 'scores': [0]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 7)], 'scores': [0]}
(7, 8) - {'options': [(6, 8)], 'scores': [0]}
(8, 12) - {'options': [(9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8)], 'scores': [2]}
(9, 5) - {'options': [(9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, -2, -2, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12)], 'scores': [0, 0, 0, 0]}
(12, 8) - {'options': [(12, 9), (12, 8), (13, 8)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  6.625000ms for system_walk to complete
It took  0.031000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.043000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.059000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.057000ms for system_walk to complete
It took  0.053000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.066000ms for system_walk to complete
It took  0.054000ms for system_walk to complete
It took  0.060000ms for system_walk to complete
It took  0.057000ms for system_walk to complete
It took  0.061000ms for system_walk to complete
It took  0.061000ms for system_walk to complete
It took  0.047000ms for system_walk to complete
It took  0.063000ms for system_walk to complete
It took  0.064000ms for system_walk to complete
It took  0.050000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 10)], 'scores': [-2]}, (6, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [2]}, (10, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 6)], 'scores': [-2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [2]}, (7, 11): {'options': [(7, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 11)], 'scores': [-2]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [2]}, (7, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(12, 7)], 'scores': [-2]}, (8, 11): {'options': [(7, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [2]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (8, 7): {'options': [(7, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [0]}, (7, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(7, 8)], 'scores': [2]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [-2]}, (6, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (9, 8): {'options': [(10, 8)], 'scores': [2]}, (10, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 6)], 'scores': [-2]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (8, 9): {'options': [(8, 8)], 'scores': [2]}, (7, 11): {'options': [(7, 10)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 7)], 'scores': [2]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 11)], 'scores': [-2]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(8, 11)], 'scores': [2]}, (7, 10): {'options': [(6, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (10, 9): {'options': [(11, 9)], 'scores': [2]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(12, 7)], 'scores': [-2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(7, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 8)], 'scores': [2]}, (9, 10): {'options': [(9, 11)], 'scores': [2]}, (8, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (6, 8): {'options': [(6, 9)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 7)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(7, 8)], 'scores': [2]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(6, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 89 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1614
The maximum obtainable for the system is 1614
The score gain were looking for is 0
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               ?   0   0   0   -             
 7           -   0   0   ?   0   0   ?         
 8       -   0   0   ?       ?   0   0   -     
 9   -   0   0   ?               ?   0   0   - 
10       ?   0   0   ?       ?   0   0   -     
11           ?   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38      38  40  40  38     
 9  38  40  40  38              38  40  40  38 
10      38  40  40  38      38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 12), (8, 12))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 12), (8, 12)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  13.940000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 90 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,17) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 3) (enemy)     vulnerability = 10 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4, 3) (enemy)     vulnerability =  5 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (enemy)     vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1614
The maximum obtainable for the system is 1614
The score gain were looking for is 0
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               ?   0   0   0   -             
 7           -   0   0   ?   0   0   ?         
 8       -   0   0   ?       ?   0   0   -     
 9   -   0   0   ?               ?   0   0   - 
10       ?   0   0   ?       ?   0   0   -     
11           ?   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38      38  40  40  38     
 9  38  40  40  38              38  40  40  38 
10      38  40  40  38      38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 12), (8, 12))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 12), (8, 12)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  13.522000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 91 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(17,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,17) (friendly)  vulnerability =  5 attack_ratio =  1 health_diffs = 50
(17, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 4,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (10, 10), (11, 8), (8, 12), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1614
The maximum obtainable for the system is 1614
The score gain were looking for is 0
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (11, 8), (7, 8), (8, 12), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               ?   0   0   0   -             
 7           -   0   0   ?   0   0   ?         
 8       -   0   0   ?       ?   0   0   -     
 9   -   0   0   ?               ?   0   0   - 
10       ?   0   0   ?       ?   0   0   -     
11           ?   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38      38  40  40  38     
 9  38  40  40  38              38  40  40  38 
10      38  40  40  38      38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((10, 10), (10, 10))
Move ((11, 8), (11, 8))
Move ((8, 12), (8, 12))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((10, 10), (10, 10)), ((11, 8), (11, 8)), ((8, 12), (8, 12)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  13.587000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(17, 10): {'options': [(16, 10)], 'scores': [2]}
(17, 8): {'options': [(16, 8)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (17, 10): {'options': [(16, 10)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (17, 8): {'options': [(16, 8)], 'scores': [2]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (11, 17): {'options': [(11, 16)], 'scores': [2]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (4, 15): {'options': [(5, 15)], 'scores': [2]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (6, 16): {'options': [(7, 16)], 'scores': [2]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 92 ---------------------------
frontline_radius = 4
(11,16) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 8) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with []
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1614
The maximum obtainable for the system is 1614
The score gain were looking for is 0
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               ?   0   0   0   -             
 7           -   0   0   ?   0   0   ?         
 8       -   0   0   ?       ?   0   0   -     
 9   -   0   0   ?               ?   0   0   - 
10       ?   0   0   ?       ?   0   0   -     
11           ?   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38      38  40  40  38     
 9  38  40  40  38              38  40  40  38 
10      38  40  40  38      38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  13.812000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
determine_ideal_outcome called with [(16, 8), (16, 10)]
Ran full set of options and didnt find top result
Score is 4
(16, 8) - {'options': [(16, 9), (15, 8)], 'scores': [2, 2]}
(16, 10) - {'options': [(16, 9), (15, 10)], 'scores': [2, 2]}
determine_ideal_outcome called with []
settle_sys returned with {(11, 16): {'options': [(11, 15)], 'scores': [2]}, (5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 16): {'options': [(8, 16)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (16, 10): {'options': [(15, 10)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (5, 15): {'options': [(5, 14)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (16, 8): {'options': [(16, 9)], 'scores': [2]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 93 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(16, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,16) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 5,14) (friendly)  vulnerability =  4 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(11,15) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   X   -                 
 6               X   X   X   X   -             
 7           -   X   X   X   X   X   X         
 8       -   X   X   X       X   X   X   -     
 9   -   X   X   X               X   X   X   - 
10       X   X   X   X       X   X   X   -     
11           X   X   X   X   X   X   -         
12               -   X   X   X   -             
13                   -   X   -                 
14                       X                     
15                                             

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (9, 4), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (13, 8), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  
 4                      13                     
 5                  13   X  13                 
 6              13   X   X   X  13             
 7          13   X   X  13   X   X  13         
 8      13   X   X  13      13   X   X  13     
 9  13   X   X  13              13   X   X  13 
10      13   X   X  13      13   X   X  13     
11          13   X   X  13   X   X  13         
12              13   X   X   X  13             
13                  13   X  13                 
14                      13                     
15                                             


The initial system score was 1614
The maximum obtainable for the system is 1614
The score gain were looking for is 0
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  
 4                       -                     
 5                   -   0   -                 
 6               ?   0   0   0   -             
 7           -   0   0   ?   0   0   ?         
 8       -   0   0   ?       ?   0   0   -     
 9   -   0   0   ?               ?   0   0   - 
10       ?   0   0   ?       ?   0   0   -     
11           ?   0   0   ?   0   0   -         
12               -   0   0   0   -             
13                   -   0   -                 
14                       ?                     
15                                             

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  
 4                      38                     
 5                  38  40  38                 
 6              38  40  40  40  38             
 7          38  40  40  38  40  40  38         
 8      38  40  40  38      38  40  40  38     
 9  38  40  40  38              38  40  40  38 
10      38  40  40  38      38  40  40  38     
11          38  40  40  38  40  40  38         
12              38  40  40  40  38             
13                  38  40  38                 
14                      38                     
15                                             

The system now has a total of 80090332031250000000000000 options
Optional squares exist

System result = ...
The system has a total of 80090332031250000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9)], 'scores': [0, 0, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  13.703000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(16, 9): {'options': [(15, 9)], 'scores': [2]}
(15, 10): {'options': [(14, 10)], 'scores': [2]}
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (16, 9): {'options': [(15, 9)], 'scores': [2]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 16): {'options': [(9, 16)], 'scores': [2]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (15, 10): {'options': [(14, 10)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (5, 14): {'options': [(6, 14)], 'scores': [2]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (11, 15): {'options': [(10, 15)], 'scores': [2]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 94 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,15) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,14) (friendly)  vulnerability =  3 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14,10) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,16) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(15, 9) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (10, 15), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (14, 10), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (9, 16), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (15, 9), (9, 5), (7, 8), (9, 12), (12, 8)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(10, 15), (9, 16)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(10, 15) - {'options': [(10, 14), (9, 15), (10, 15)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [2, 2, 0, -2, -2]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6), (7, 5)], 'scores': [2, 2, 0, -2]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10), (9, 10), (8, 9)], 'scores': [2, 2, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11), (9, 10)], 'scores': [2, 2, 2, 0, -2]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7), (13, 7)], 'scores': [2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0, -2]}
(14, 10) - {'options': [(14, 9), (13, 10), (14, 10)], 'scores': [2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14), (10, 14), (9, 15), (8, 14)], 'scores': [2, 0, -2, -2, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11), (6, 12)], 'scores': [2, 2, 0, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9), (10, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 16) - {'options': [(9, 15), (9, 16)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10), (5, 11)], 'scores': [2, 2, 0, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8), (8, 9), (9, 8)], 'scores': [2, 2, 0, -2, -2]}
(15, 9) - {'options': [(14, 9), (15, 9)], 'scores': [2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


=> INITIAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 4                       -                             
 5                   -   X   -                         
 6               X   X   X   X   -                     
 7           -   X   X   X   X   X   X                 
 8       -   X   X   X       X   X   X   -             
 9   -   X   X   X               X   X   X             
10       X   X   X   X       X   X   X                 
11           X   X   X   X   X   X   -                 
12               -   X   X   X   -                     
13                   -   X   -                         
14                       X                             
15                                                     
16                                                     
17                                                     


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 4                       -                             
 5                   -   X   -                         
 6               X   X   X   X   -                     
 7           -   X   X   X   X   X   X                 
 8       -   X   X   X       X   X   X   -             
 9   -   X   X   X               X   X   X             
10       X   X   X   X       X   X   X                 
11           X   X   X   X   X   X   -                 
12               -   X   X   X   -                     
13                   -   X   -                         
14                       X                             
15                                                     
16                                                     
17                                                     

System can be split into 5 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 8)], 'scores': [0, 0, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (12, 11)], 'scores': [0, 0, 0, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A subsystem...
has 41 members
48054199218750000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
simplified...
48054199218750000000000000 combinations

Solving system # 1
(10, 15) - {'options': [(10, 14)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(14, 10) - {'options': [(13, 10)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 16) - {'options': [(9, 15)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9): {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11): {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11): {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6): {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7): {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12): {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(10, 15): {'options': [(10, 14)], 'scores': [2]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9): {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10): {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7): {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6): {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10): {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11): {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10): {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7): {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(14, 10): {'options': [(13, 10)], 'scores': [2]}
(9, 14): {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7): {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11): {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9): {'options': [(12, 9), (13, 9), (13, 8)], 'scores': [0, 0, -2]}
(8, 11): {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(9, 16): {'options': [(9, 15)], 'scores': [2]}
(8, 7): {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10): {'options': [(11, 10), (12, 9), (12, 10), (12, 11)], 'scores': [0, 0, 0, -2]}
(9, 6): {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13): {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10): {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8): {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(15, 9): {'options': [(14, 9)], 'scores': [2]}
(9, 5): {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8): {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8): {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 13
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (12, 9), (10, 8), (11, 10), (10, 7), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1614

-------------------------------------
TARGET system:
41 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 4                      13                             
 5                  13   X  13                         
 6              13   X   X   X  13                     
 7          13   X   X  13   X   X  13                 
 8      13   X   X  13      13   X   X  13             
 9  13   X   X  13              13   X   X             
10      13   X   X  13      13   X   X                 
11          13   X   X  13   X   X  13                 
12              13   X   X   X  13                     
13                  13   X  13                         
14                      13                             
15                                                     
16                                                     
17                                                     


The initial system score was 1754
The maximum obtainable for the system is 1762
The score gain were looking for is 8
bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 13
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (10, 8), (7, 6), (9, 11), (12, 7), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
41 participants
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 4                       -                             
 5                   -   0   -                         
 6               ?   0   0   0   -                     
 7           -   0   0   ?   0   0   ?                 
 8       -   0   0   ?       ?   0   0   -             
 9   -   0   0   ?               ?   0   0             
10       ?   0   0   ?       ?   0   0                 
11           ?   0   0   ?   0   0   -                 
12               -   0   0   0   -                     
13                   -   0   -                         
14                       ?                             
15                                                     
16                                                     
17                                                     

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  16  
 4                      38                             
 5                  38  40  38                         
 6              38  40  40  40  38                     
 7          38  40  40  38  40  40  38                 
 8      38  40  40  38      38  40  40  38             
 9  38  40  40  38              38  40  40             
10      38  40  40  38      38  40  40                 
11          38  40  40  38  40  40  38                 
12              38  40  40  40  38                     
13                  38  40  38                         
14                      38                             
15                                                     
16                                                     
17                                                     

The system now has a total of 48054199218750000000000000 options
Optional squares exist

System result = ...
The system has a total of 48054199218750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(10, 15) - {'options': [(10, 14)], 'scores': [2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(14, 10) - {'options': [(13, 10)], 'scores': [2]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 8)], 'scores': [0, 0, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(9, 16) - {'options': [(9, 15)], 'scores': [2]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (12, 11)], 'scores': [0, 0, 0, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((7, 11), (7, 11))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((7, 11), (7, 11)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(10, 15) - {'options': [(10, 14)], 'scores': [2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(14, 10) - {'options': [(13, 10)], 'scores': [2]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 8)], 'scores': [0, 0, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(9, 16) - {'options': [(9, 15)], 'scores': [2]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (12, 11)], 'scores': [0, 0, 0, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(15, 9) - {'options': [(14, 9)], 'scores': [2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  17.415000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (10, 15): {'options': [(10, 14)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(13, 10)], 'scores': [2]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
determine_ideal_outcome called with []
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (10, 15): {'options': [(10, 14)], 'scores': [2]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (6, 14): {'options': [(7, 14)], 'scores': [2]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (14, 10): {'options': [(13, 10)], 'scores': [2]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (9, 16): {'options': [(9, 15)], 'scores': [2]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (15, 9): {'options': [(14, 9)], 'scores': [2]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 95 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,15) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,14) (friendly)  vulnerability =  2 attack_ratio =  1 health_diffs = 50
(10,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (9, 15), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (7, 14), (10, 14), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
Determining ideal outcome again as the result changed
ERROR: THE FOLLOWING BOTS WERENT FROZEN - MANUALLY freezing
[(7, 14)]
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9), (14, 10), (14, 8)], 'scores': [2, 0, -2, -2]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8), (9, 8), (10, 9)], 'scores': [2, 2, 0, -2, -2]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 15) - {'options': [(9, 14), (9, 15), (10, 15), (9, 16)], 'scores': [2, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10), (14, 10), (13, 11)], 'scores': [2, 2, 0, -2, -2]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6), (7, 5)], 'scores': [2, 2, 0, -2]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10), (9, 10), (8, 9)], 'scores': [2, 2, 0, -2, -2]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11), (9, 10)], 'scores': [2, 2, 2, 0, -2]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7), (13, 7)], 'scores': [2, 2, 0, -2]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7), (9, 8)], 'scores': [2, 2, 2, 0, -2]}
(7, 14) - {'options': [(8, 14), (7, 13)], 'scores': [2, 2]}
(10, 14) - {'options': [(10, 13), (9, 14), (10, 14), (10, 15), (11, 14)], 'scores': [2, 2, 0, -2, -2]}
(9, 14) - {'options': [(9, 13), (9, 14), (10, 14), (9, 15), (8, 14)], 'scores': [2, 0, -2, -2, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11), (6, 12)], 'scores': [2, 2, 0, -2]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9), (10, 9)], 'scores': [2, 2, 2, 0, -2]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9), (8, 9)], 'scores': [2, 2, 2, 0, -2]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10), (5, 11)], 'scores': [2, 2, 0, -2]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10), (9, 10), (10, 9)], 'scores': [2, 2, 0, -2, -2]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8), (8, 9), (9, 8)], 'scores': [2, 2, 0, -2, -2]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


=> INITIAL
BOT Positions:
42 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   -         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               -   X   X   X   -                 
13                   -   X                         
14                                                 
15                                                 
16                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
42 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   -         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               -   X   X   X   -                 
13                   -   X                         
14                                                 
15                                                 
16                                                 

System can be split into 5 systems
Solving system # 0
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12)], 'scores': [0, 0, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (8, 13)], 'scores': [0, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A subsystem...
has 42 members
76886718750000000000000000 combinations
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
simplified...
76886718750000000000000000 combinations

Solving system # 1
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 2
(7, 14) - {'options': [(8, 14)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 3
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Solving system # 4
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
This system has 1 move so it already solved!
Leaving THE SYSTEM SPLIT AREA AND SYSTEM IS 
(5, 9): {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9): {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11): {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11): {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6): {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7): {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12): {'options': [(10, 11), (10, 12), (9, 12), (11, 12)], 'scores': [0, 0, 0, -2]}
(7, 11): {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9): {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9): {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8): {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10): {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 15): {'options': [(9, 14)], 'scores': [2]}
(10, 7): {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10): {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6): {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10): {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10): {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11): {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10): {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6): {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7): {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7): {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(7, 14): {'options': [(8, 14)], 'scores': [2]}
(10, 14): {'options': [(10, 13)], 'scores': [2]}
(9, 14): {'options': [(9, 13)], 'scores': [2]}
(11, 7): {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11): {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9): {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11): {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9): {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7): {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10): {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6): {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9): {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13): {'options': [(9, 12), (8, 13)], 'scores': [0, -2]}
(5, 10): {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8): {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12): {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8): {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10): {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8): {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5): {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8): {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12): {'options': [(10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, -2]}
(12, 8): {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 15
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (12, 7), (9, 7), (13, 10), (6, 11), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (10, 12), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (12, 7), (9, 7), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (12, 7), (9, 7), (13, 10), (6, 11), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (11, 6)]}
max_score - 1650

-------------------------------------
TARGET system:
42 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      15                         
 5                  15   X  15                     
 6              15   X   X   X  15                 
 7          15   X   X  15   X   X  15             
 8      15   X   X  15      15   X   X  15         
 9  15   X   X  15              15   X   X  15     
10      15   X   X  15      15   X   X  15         
11          15   X   X  15   X   X  15             
12              15   X   X   X  15                 
13                  15                             
14                                                 
15                                                 
16                                                 


The initial system score was 1796
The maximum obtainable for the system is 1802
The score gain were looking for is 6
bots_in_optional = [(8, 10), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (12, 7), (9, 7), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(9, 13)]
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 15
num_target_bots_in_occupied = 27
current_bots_in_optional = [(8, 10), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (12, 7), (9, 7), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (12, 7), (9, 7), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = [(9, 13)]
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
42 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   0   -                     
 6               ?   0   0   0   -                 
 7           -   0   0   ?   0   0   ?             
 8       -   0   0   ?       ?   0   0   -         
 9   -   0   0   ?               ?   0   0   ?     
10       ?   0   0   ?       ?   0   0   ?         
11           ?   0   0   ?   0   0   -             
12               -   0   0   0   -                 
13                   -   X                         
14                                                 
15                                                 
16                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      38                         
 5                  38  40  38                     
 6              38  40  40  40  38                 
 7          38  40  40  38  40  40  38             
 8      38  40  40  38      38  40  40  38         
 9  38  40  40  38              38  40  40  38     
10      38  40  40  38      38  40  40  38         
11          38  40  40  38  40  40  38             
12              38  40  40  40  38                 
13                  38  40                         
14                                                 
15                                                 
16                                                 

The system now has a total of 76886718750000000000000000 options
Optional squares exist
1 bots need to move into optional
But no bots need to move into occupied

System result = ...
The system has a total of 76886718750000000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12)], 'scores': [0, 0, 0, -2]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(7, 14) - {'options': [(8, 14)], 'scores': [2]}
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (8, 13)], 'scores': [0, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((8, 10), (8, 10))
Move ((7, 11), (7, 11))
Move ((10, 8), (10, 8))
Move ((10, 7), (10, 7))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((12, 7), (12, 7))
Move ((9, 7), (9, 7))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((7, 8), (7, 8))
Move ((8, 8), (8, 8))
Move ((9, 5), (9, 5))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((8, 10), (8, 10)), ((7, 11), (7, 11)), ((10, 8), (10, 8)), ((10, 7), (10, 7)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((12, 7), (12, 7)), ((9, 7), (9, 7)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((7, 8), (7, 8)), ((8, 8), (8, 8)), ((9, 5), (9, 5)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11)], 'scores': [0]}
(11, 11) - {'options': [(11, 10)], 'scores': [0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(14, 9)], 'scores': [0]}
(12, 9) - {'options': [(13, 9)], 'scores': [0]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10)], 'scores': [0]}
(9, 15) - {'options': [(9, 14)], 'scores': [2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 10)], 'scores': [0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 11) - {'options': [(8, 11), (9, 11)], 'scores': [2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(7, 14) - {'options': [(8, 14)], 'scores': [2]}
(10, 14) - {'options': [(10, 13)], 'scores': [2]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 9)], 'scores': [2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(12, 9)], 'scores': [0]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(13, 9) - {'options': [(13, 8)], 'scores': [-2]}
(9, 12) - {'options': [(10, 12)], 'scores': [0]}
(12, 8) - {'options': [(11, 8), (12, 8), (12, 7)], 'scores': [0, 0, -2]}
A system with max gain has been found!
It took  14.335000ms for system_walk to complete
It took  0.047000ms for system_walk to complete
It took  0.048000ms for system_walk to complete
It took  0.063000ms for system_walk to complete
It took  0.048000ms for system_walk to complete
It took  0.063000ms for system_walk to complete
It took  0.062000ms for system_walk to complete
It took  0.050000ms for system_walk to complete
It took  0.075000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(11, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 10)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 14): {'options': [(8, 14)], 'scores': [2]}, (10, 14): {'options': [(10, 13)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 9)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (13, 9): {'options': [(13, 8)], 'scores': [-2]}, (9, 12): {'options': [(10, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(11, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 10)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 15): {'options': [(9, 14)], 'scores': [2]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (7, 14): {'options': [(8, 14)], 'scores': [2]}, (10, 14): {'options': [(10, 13)], 'scores': [2]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (13, 9): {'options': [(13, 8)], 'scores': [-2]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 96 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (11, 7), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (8, 14), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               -   X   X   X   -                 
13                   -   X   X                     
14                   X   X                         
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               -   X   X   X   -                 
13                   -   X   X                     
14                   X   X                         
15                                                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (11, 7), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (8, 14), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 18
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (10, 13), (9, 7), (13, 10), (9, 14), (6, 11), (12, 7), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (9, 13), (8, 11), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (11, 7), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (8, 14), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (9, 13), (8, 11), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (10, 13), (9, 7), (13, 10), (9, 14), (6, 11), (12, 7), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (11, 6)]}
max_score - 1804

-------------------------------------
TARGET system:
46 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      18                         
 5                  18   X  18                     
 6              18   X   X   X  18                 
 7          18   X   X  18   X   X  18             
 8      18   X   X  18      18   X   X  18         
 9  18   X   X  18              18   X   X  18     
10      18   X   X  18      18   X   X  18         
11          18   X   X  18   X   X  18             
12              18   X   X   X  18                 
13                  18   X  18                     
14                      18                         
15                                                 


The initial system score was 1802
The maximum obtainable for the system is 1804
The score gain were looking for is 2
bots_in_optional = [(8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = [(8, 14)]
bots_outside_system_moving_to_optional  = [(8, 14)]
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (8, 11), (8, 7), (12, 10), (9, 6), (11, 7), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 18
num_target_bots_in_occupied = 28
current_bots_in_optional = [(8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7), (8, 14)]
current_bots_in_optional_that_can_move_to_occupied = [(8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (8, 11), (8, 7), (12, 10), (9, 6), (11, 7), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (8, 11), (8, 7), (12, 10), (9, 6), (11, 7), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (8, 11), (8, 7), (12, 10), (9, 6), (11, 7), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (9, 13), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   0   -                     
 6               ?   0   0   0   -                 
 7           -   0   0   ?   0   0   ?             
 8       -   0   0   ?       ?   0   0   ?         
 9   -   0   0   ?               ?   0   0   ?     
10       ?   0   0   ?       ?   0   0   ?         
11           ?   0   0   ?   0   0   -             
12               -   0   0   0   -                 
13                   -   0   ?                     
14                   X   ?                         
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      38                         
 5                  38  40  38                     
 6              38  40  40  40  38                 
 7          38  40  40  38  40  40  38             
 8      38  40  40  38      38  40  40  38         
 9  38  40  40  38              38  40  40  38     
10      38  40  40  38      38  40  40  38         
11          38  40  40  38  40  40  38             
12              38  40  40  40  38                 
13                  38  40  38                     
14                  36  38                         
15                                                 

The system now has a total of 10812194824218750000000000000 options
Optional squares exist

System result = ...
The system has a total of 10812194824218750000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(8, 14) - {'options': [(9, 14), (8, 13)], 'scores': [2, 2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((9, 5), (9, 5))
Works... [((9, 5), (9, 5))]
Can freeze, freezing system
(5, 9) - {'options': [(5, 10)], 'scores': [-2]}
(6, 9) - {'options': [(5, 9)], 'scores': [0]}
(10, 11) - {'options': [(11, 11)], 'scores': [0]}
(11, 11) - {'options': [(11, 10)], 'scores': [0]}
(10, 6) - {'options': [(9, 6)], 'scores': [0]}
(7, 7) - {'options': [(7, 8)], 'scores': [0]}
(8, 10) - {'options': [(8, 10)], 'scores': [0]}
(13, 8) - {'options': [(12, 8)], 'scores': [2]}
(7, 11) - {'options': [(8, 11)], 'scores': [0]}
(14, 9) - {'options': [(14, 9)], 'scores': [0]}
(12, 9) - {'options': [(13, 9)], 'scores': [0]}
(10, 8) - {'options': [(10, 8)], 'scores': [0]}
(11, 10) - {'options': [(12, 10)], 'scores': [0]}
(10, 7) - {'options': [(10, 6)], 'scores': [0]}
(13, 10) - {'options': [(13, 10)], 'scores': [0]}
(7, 6) - {'options': [(7, 6)], 'scores': [0]}
(6, 10) - {'options': [(7, 10)], 'scores': [0]}
(10, 12) - {'options': [(10, 11)], 'scores': [0]}
(9, 11) - {'options': [(9, 11)], 'scores': [0]}
(7, 10) - {'options': [(7, 11)], 'scores': [0]}
(8, 6) - {'options': [(8, 7)], 'scores': [0]}
(10, 13) - {'options': [(10, 13)], 'scores': [0]}
(9, 7) - {'options': [(9, 7)], 'scores': [0]}
(9, 14) - {'options': [(9, 13)], 'scores': [2]}
(8, 14) - {'options': [(9, 14)], 'scores': [2]}
(6, 11) - {'options': [(6, 11)], 'scores': [0]}
(8, 11) - {'options': [(8, 12)], 'scores': [0]}
(11, 9) - {'options': [(11, 9)], 'scores': [0]}
(8, 7) - {'options': [(7, 7)], 'scores': [0]}
(12, 10) - {'options': [(12, 9)], 'scores': [0]}
(9, 6) - {'options': [(8, 6)], 'scores': [0]}
(7, 9) - {'options': [(7, 9)], 'scores': [0]}
(11, 7) - {'options': [(10, 7)], 'scores': [0]}
(5, 10) - {'options': [(6, 10)], 'scores': [2]}
(6, 8) - {'options': [(6, 9)], 'scores': [0]}
(8, 12) - {'options': [(7, 12)], 'scores': [-2]}
(11, 8) - {'options': [(11, 7)], 'scores': [0]}
(7, 8) - {'options': [(6, 8)], 'scores': [0]}
(10, 10) - {'options': [(10, 10)], 'scores': [0]}
(8, 8) - {'options': [(8, 8)], 'scores': [0]}
(12, 7) - {'options': [(12, 7)], 'scores': [0]}
(9, 5) - {'options': [(9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, -2, -2, -2]}
(9, 13) - {'options': [(9, 12)], 'scores': [0]}
(13, 9) - {'options': [(13, 8)], 'scores': [-2]}
(9, 12) - {'options': [(10, 12)], 'scores': [0]}
(12, 8) - {'options': [(11, 8)], 'scores': [0]}
A system with max gain has been found!
It took  2.069000ms for system_walk to complete
It took  0.023000ms for system_walk to complete
It took  0.024000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.032000ms for system_walk to complete
It took  0.034000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.049000ms for system_walk to complete
It took  0.148000ms for system_walk to complete
It took  0.043000ms for system_walk to complete
It took  0.040000ms for system_walk to complete
It took  0.053000ms for system_walk to complete
It took  0.054000ms for system_walk to complete
It took  0.065000ms for system_walk to complete
It took  0.078000ms for system_walk to complete
It took  0.046000ms for system_walk to complete
It took  0.043000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.059000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.058000ms for system_walk to complete
It took  0.045000ms for system_walk to complete
It took  0.066000ms for system_walk to complete
It took  0.070000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 10)], 'scores': [-2]}, (6, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 11): {'options': [(11, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 10)], 'scores': [0]}, (10, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 8): {'options': [(12, 8)], 'scores': [2]}, (7, 11): {'options': [(8, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 6)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 11)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 14): {'options': [(9, 14)], 'scores': [2]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 12)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(7, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 9)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (11, 7): {'options': [(10, 7)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [2]}, (6, 8): {'options': [(6, 9)], 'scores': [0]}, (8, 12): {'options': [(7, 12)], 'scores': [-2]}, (11, 8): {'options': [(11, 7)], 'scores': [0]}, (7, 8): {'options': [(6, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [0]}, (13, 9): {'options': [(13, 8)], 'scores': [-2]}, (9, 12): {'options': [(10, 12)], 'scores': [0]}, (12, 8): {'options': [(11, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 10)], 'scores': [-2]}, (6, 9): {'options': [(5, 9)], 'scores': [0]}, (10, 11): {'options': [(11, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 10)], 'scores': [0]}, (10, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 8)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 8): {'options': [(12, 8)], 'scores': [2]}, (7, 11): {'options': [(8, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(12, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 6)], 'scores': [0]}, (9, 6): {'options': [(8, 6)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(7, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 11)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 11)], 'scores': [0]}, (12, 10): {'options': [(12, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 12)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 13)], 'scores': [2]}, (8, 14): {'options': [(9, 14)], 'scores': [2]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 8)], 'scores': [-2]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (11, 7): {'options': [(10, 7)], 'scores': [0]}, (5, 10): {'options': [(6, 10)], 'scores': [2]}, (6, 8): {'options': [(6, 9)], 'scores': [0]}, (8, 12): {'options': [(7, 12)], 'scores': [-2]}, (11, 8): {'options': [(11, 7)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (9, 13): {'options': [(9, 12)], 'scores': [0]}, (7, 8): {'options': [(6, 8)], 'scores': [0]}, (9, 12): {'options': [(10, 12)], 'scores': [0]}, (12, 8): {'options': [(11, 8)], 'scores': [0]}}
-------------------------- running turn 97 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 18
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1804

-------------------------------------
TARGET system:
46 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      18                         
 5                  18   X  18                     
 6              18   X   X   X  18                 
 7          18   X   X  18   X   X  18             
 8      18   X   X  18      18   X   X  18         
 9  18   X   X  18              18   X   X  18     
10      18   X   X  18      18   X   X  18         
11          18   X   X  18   X   X  18             
12              18   X   X   X  18                 
13                  18   X  18                     
14                      18                         
15                                                 


The initial system score was 1804
The maximum obtainable for the system is 1804
The score gain were looking for is 0
bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 18
num_target_bots_in_occupied = 28
current_bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   0   -                     
 6               ?   0   0   0   -                 
 7           -   0   0   ?   0   0   ?             
 8       -   0   0   ?       ?   0   0   ?         
 9   -   0   0   ?               ?   0   0   ?     
10       ?   0   0   ?       ?   0   0   ?         
11           ?   0   0   ?   0   0   -             
12               ?   0   0   0   -                 
13                   -   0   ?                     
14                       ?                         
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      38                         
 5                  38  40  38                     
 6              38  40  40  40  38                 
 7          38  40  40  38  40  40  38             
 8      38  40  40  38      38  40  40  38         
 9  38  40  40  38              38  40  40  38     
10      38  40  40  38      38  40  40  38         
11          38  40  40  38  40  40  38             
12              38  40  40  40  38                 
13                  38  40  38                     
14                      38                         
15                                                 

The system now has a total of 16218292236328125000000000000 options
Optional squares exist

System result = ...
The system has a total of 16218292236328125000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((7, 12), (7, 12))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((13, 8), (13, 8))
Move ((7, 11), (7, 11))
Move ((14, 9), (14, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((13, 10), (13, 10))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 13), (10, 13))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((12, 7), (12, 7))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((7, 12), (7, 12)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((13, 8), (13, 8)), ((7, 11), (7, 11)), ((14, 9), (14, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((13, 10), (13, 10)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 13), (10, 13)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((12, 7), (12, 7)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  17.182000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 98 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 18
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1804

-------------------------------------
TARGET system:
46 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      18                         
 5                  18   X  18                     
 6              18   X   X   X  18                 
 7          18   X   X  18   X   X  18             
 8      18   X   X  18      18   X   X  18         
 9  18   X   X  18              18   X   X  18     
10      18   X   X  18      18   X   X  18         
11          18   X   X  18   X   X  18             
12              18   X   X   X  18                 
13                  18   X  18                     
14                      18                         
15                                                 


The initial system score was 1804
The maximum obtainable for the system is 1804
The score gain were looking for is 0
bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 18
num_target_bots_in_occupied = 28
current_bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   0   -                     
 6               ?   0   0   0   -                 
 7           -   0   0   ?   0   0   ?             
 8       -   0   0   ?       ?   0   0   ?         
 9   -   0   0   ?               ?   0   0   ?     
10       ?   0   0   ?       ?   0   0   ?         
11           ?   0   0   ?   0   0   -             
12               ?   0   0   0   -                 
13                   -   0   ?                     
14                       ?                         
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      38                         
 5                  38  40  38                     
 6              38  40  40  40  38                 
 7          38  40  40  38  40  40  38             
 8      38  40  40  38      38  40  40  38         
 9  38  40  40  38              38  40  40  38     
10      38  40  40  38      38  40  40  38         
11          38  40  40  38  40  40  38             
12              38  40  40  40  38                 
13                  38  40  38                     
14                      38                         
15                                                 

The system now has a total of 16218292236328125000000000000 options
Optional squares exist

System result = ...
The system has a total of 16218292236328125000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((7, 12), (7, 12))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((13, 8), (13, 8))
Move ((7, 11), (7, 11))
Move ((14, 9), (14, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((13, 10), (13, 10))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 13), (10, 13))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((12, 7), (12, 7))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((7, 12), (7, 12)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((13, 8), (13, 8)), ((7, 11), (7, 11)), ((14, 9), (14, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((13, 10), (13, 10)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 13), (10, 13)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((12, 7), (12, 7)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  17.086000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
-------------------------- running turn 99 ---------------------------
frontline_radius = 4
( 5, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 5) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(13,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1,10) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
(12,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,14) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 1) (enemy)     vulnerability =  6 attack_ratio =  1 health_diffs = 50
( 6,11) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9, 6) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 7) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 2) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
( 5,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 6, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 8,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(11, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(10,10) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 1, 8) (enemy)     vulnerability =  2 attack_ratio =  1 health_diffs = 50
( 8, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(14, 3) (enemy)     vulnerability =  3 attack_ratio =  1 health_diffs = 50
(13, 9) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,13) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 7, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
( 9,12) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
(12, 8) (friendly)  vulnerability =  1 attack_ratio =  1 health_diffs = 50
     0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  
 0                                                                              
 1                              28  30  32  30  28                              
 2                      26  28  30  32  34  32  30  28  26                      
 3              24  26  28  30  32  34  36  34  32  30  28  26  24              
 4              26  28  30  32  34  36  38  36  34  32  30  28  26              
 5          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
 6          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
 7      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
 8      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
 9      32  34  36  38  40  40  38  36  34  36  38  40  40  38  36  34  32      
10      30  32  34  36  38  40  40  38  36  38  40  40  38  36  34  32  30      
11      28  30  32  34  36  38  40  40  38  40  40  38  36  34  32  30  28      
12          28  30  32  34  36  38  40  40  40  38  36  34  32  30  28          
13          26  28  30  32  34  36  38  40  38  36  34  32  30  28  26          
14              26  28  30  32  34  36  38  36  34  32  30  28  26              
15              24  26  28  30  32  34  36  34  32  30  28  26  24              
16                      26  28  30  32  34  32  30  28  26                      
17                              28  30  32  30  28                              
18                                                                              
determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]


=> INITIAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 


-------------------------------------
=> AFTER DANGLING GRANTS
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   X   -                     
 6               X   X   X   X   -                 
 7           -   X   X   X   X   X   X             
 8       -   X   X   X       X   X   X   X         
 9   -   X   X   X               X   X   X   X     
10       X   X   X   X       X   X   X   X         
11           X   X   X   X   X   X   -             
12               X   X   X   X   -                 
13                   -   X   X                     
14                       X                         
15                                                 

determine_ideal_outcome called with [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
outcome = 
num_optional - 18
optional - [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]
occupied - [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)]
available_bots - [(5, 9), (6, 9), (10, 11), (11, 11), (7, 12), (10, 6), (7, 7), (10, 12), (13, 8), (7, 11), (14, 9), (12, 9), (10, 8), (11, 10), (10, 7), (13, 10), (7, 6), (6, 10), (8, 10), (9, 11), (7, 10), (8, 6), (10, 13), (9, 7), (9, 14), (11, 7), (6, 11), (13, 9), (8, 11), (11, 9), (8, 7), (12, 10), (9, 6), (7, 9), (9, 13), (5, 10), (6, 8), (8, 12), (11, 8), (10, 10), (8, 8), (12, 7), (9, 5), (7, 8), (9, 12), (12, 8)]
levels - {40: [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (8, 7), (7, 11), (12, 9), (11, 10), (9, 5), (10, 7), (6, 10), (10, 12), (7, 10), (12, 10), (8, 11), (9, 13), (8, 6), (9, 6), (11, 7), (6, 8), (11, 8), (8, 12), (9, 12), (13, 9), (7, 8), (12, 8)], 38: [(7, 12), (8, 5), (8, 10), (13, 8), (14, 9), (5, 8), (10, 8), (4, 9), (11, 12), (7, 6), (9, 4), (9, 11), (9, 7), (13, 10), (9, 14), (6, 11), (10, 13), (11, 9), (12, 11), (6, 7), (7, 9), (10, 5), (5, 10), (8, 13), (10, 10), (8, 8), (12, 7), (11, 6)]}
max_score - 1804

-------------------------------------
TARGET system:
46 participants
()
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      18                         
 5                  18   X  18                     
 6              18   X   X   X  18                 
 7          18   X   X  18   X   X  18             
 8      18   X   X  18      18   X   X  18         
 9  18   X   X  18              18   X   X  18     
10      18   X   X  18      18   X   X  18         
11          18   X   X  18   X   X  18             
12              18   X   X   X  18                 
13                  18   X  18                     
14                      18                         
15                                                 


The initial system score was 1804
The maximum obtainable for the system is 1804
The score gain were looking for is 0
bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
bots_in_optional_moving_to_occupied = []
bots_outside_system = []
bots_outside_system_moving_to_optional  = []
bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
bots_in_occupied_moving_to_optional = []
movable_bots_in_occupied_that_have_to_move = []
num_target_bots_in_optional = 18
num_target_bots_in_occupied = 28
current_bots_in_optional = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_optional_that_can_move_to_occupied = [(7, 12), (8, 10), (13, 8), (14, 9), (10, 8), (13, 10), (7, 6), (9, 11), (10, 13), (9, 7), (9, 14), (6, 11), (11, 9), (7, 9), (5, 10), (10, 10), (8, 8), (12, 7)]
current_bots_in_occupied = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_in_occupied_that_can_move_to_optional = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]
current_bots_outside = []
target_occupied_not_occupied = []
target_occupied_with_bot_now_or_definite_bot_next = [(5, 9), (6, 9), (10, 11), (11, 11), (10, 6), (7, 7), (7, 11), (12, 9), (11, 10), (10, 7), (6, 10), (10, 12), (7, 10), (8, 6), (11, 7), (8, 11), (8, 7), (12, 10), (9, 6), (9, 13), (6, 8), (8, 12), (11, 8), (7, 8), (9, 5), (13, 9), (9, 12), (12, 8)]


-------------------------------------
=> SYSTEM PUSHED TOWARDS IDEAL
BOT Positions:
46 participants
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                       -                         
 5                   -   0   -                     
 6               ?   0   0   0   -                 
 7           -   0   0   ?   0   0   ?             
 8       -   0   0   ?       ?   0   0   ?         
 9   -   0   0   ?               ?   0   0   ?     
10       ?   0   0   ?       ?   0   0   ?         
11           ?   0   0   ?   0   0   -             
12               ?   0   0   0   -                 
13                   -   0   ?                     
14                       ?                         
15                                                 

Cell Scores:
     4   5   6   7   8   9  10  11  12  13  14  15  
 4                      38                         
 5                  38  40  38                     
 6              38  40  40  40  38                 
 7          38  40  40  38  40  40  38             
 8      38  40  40  38      38  40  40  38         
 9  38  40  40  38              38  40  40  38     
10      38  40  40  38      38  40  40  38         
11          38  40  40  38  40  40  38             
12              38  40  40  40  38                 
13                  38  40  38                     
14                      38                         
15                                                 

The system now has a total of 16218292236328125000000000000 options
Optional squares exist

System result = ...
The system has a total of 16218292236328125000000000000 options
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}


The system did not change in simplify system, returning
Move ((5, 9), (5, 9))
Move ((6, 9), (6, 9))
Move ((10, 11), (10, 11))
Move ((11, 11), (11, 11))
Move ((7, 12), (7, 12))
Move ((10, 6), (10, 6))
Move ((7, 7), (7, 7))
Move ((10, 12), (10, 12))
Move ((13, 8), (13, 8))
Move ((7, 11), (7, 11))
Move ((14, 9), (14, 9))
Move ((12, 9), (12, 9))
Move ((10, 8), (10, 8))
Move ((11, 10), (11, 10))
Move ((10, 7), (10, 7))
Move ((13, 10), (13, 10))
Move ((7, 6), (7, 6))
Move ((6, 10), (6, 10))
Move ((8, 10), (8, 10))
Move ((9, 11), (9, 11))
Move ((7, 10), (7, 10))
Move ((8, 6), (8, 6))
Move ((10, 13), (10, 13))
Move ((9, 7), (9, 7))
Move ((9, 14), (9, 14))
Move ((11, 7), (11, 7))
Move ((6, 11), (6, 11))
Move ((13, 9), (13, 9))
Move ((8, 11), (8, 11))
Move ((11, 9), (11, 9))
Move ((8, 7), (8, 7))
Move ((12, 10), (12, 10))
Move ((9, 6), (9, 6))
Move ((7, 9), (7, 9))
Move ((9, 13), (9, 13))
Move ((5, 10), (5, 10))
Move ((6, 8), (6, 8))
Move ((8, 12), (8, 12))
Move ((11, 8), (11, 8))
Move ((10, 10), (10, 10))
Move ((8, 8), (8, 8))
Move ((12, 7), (12, 7))
Move ((9, 5), (9, 5))
Move ((7, 8), (7, 8))
Move ((9, 12), (9, 12))
Move ((12, 8), (12, 8))
Works... [((5, 9), (5, 9)), ((6, 9), (6, 9)), ((10, 11), (10, 11)), ((11, 11), (11, 11)), ((7, 12), (7, 12)), ((10, 6), (10, 6)), ((7, 7), (7, 7)), ((10, 12), (10, 12)), ((13, 8), (13, 8)), ((7, 11), (7, 11)), ((14, 9), (14, 9)), ((12, 9), (12, 9)), ((10, 8), (10, 8)), ((11, 10), (11, 10)), ((10, 7), (10, 7)), ((13, 10), (13, 10)), ((7, 6), (7, 6)), ((6, 10), (6, 10)), ((8, 10), (8, 10)), ((9, 11), (9, 11)), ((7, 10), (7, 10)), ((8, 6), (8, 6)), ((10, 13), (10, 13)), ((9, 7), (9, 7)), ((9, 14), (9, 14)), ((11, 7), (11, 7)), ((6, 11), (6, 11)), ((13, 9), (13, 9)), ((8, 11), (8, 11)), ((11, 9), (11, 9)), ((8, 7), (8, 7)), ((12, 10), (12, 10)), ((9, 6), (9, 6)), ((7, 9), (7, 9)), ((9, 13), (9, 13)), ((5, 10), (5, 10)), ((6, 8), (6, 8)), ((8, 12), (8, 12)), ((11, 8), (11, 8)), ((10, 10), (10, 10)), ((8, 8), (8, 8)), ((12, 7), (12, 7)), ((9, 5), (9, 5)), ((7, 8), (7, 8)), ((9, 12), (9, 12)), ((12, 8), (12, 8))]
Can freeze, freezing system
(5, 9) - {'options': [(6, 9), (5, 9), (5, 10), (4, 9)], 'scores': [0, 0, -2, -2]}
(6, 9) - {'options': [(5, 9), (6, 9), (6, 10), (6, 8), (7, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 11) - {'options': [(11, 11), (10, 11), (10, 12), (9, 11), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 11) - {'options': [(11, 10), (10, 11), (11, 11), (11, 12), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(7, 12) - {'options': [(7, 11), (8, 12), (7, 12)], 'scores': [2, 2, 0]}
(10, 6) - {'options': [(10, 7), (10, 6), (9, 6), (10, 5), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(7, 7) - {'options': [(7, 8), (7, 7), (8, 7), (7, 6), (6, 7)], 'scores': [0, 0, 0, -2, -2]}
(10, 12) - {'options': [(10, 11), (10, 12), (9, 12), (11, 12), (10, 13)], 'scores': [0, 0, 0, -2, -2]}
(13, 8) - {'options': [(13, 9), (12, 8), (13, 8)], 'scores': [2, 2, 0]}
(7, 11) - {'options': [(8, 11), (7, 10), (7, 11), (7, 12), (6, 11)], 'scores': [0, 0, 0, -2, -2]}
(14, 9) - {'options': [(13, 9), (14, 9)], 'scores': [2, 0]}
(12, 9) - {'options': [(13, 9), (12, 10), (12, 9), (12, 8), (11, 9)], 'scores': [0, 0, 0, 0, -2]}
(10, 8) - {'options': [(11, 8), (10, 7), (10, 8)], 'scores': [2, 2, 0]}
(11, 10) - {'options': [(12, 10), (11, 10), (11, 11), (11, 9), (10, 10)], 'scores': [0, 0, 0, -2, -2]}
(10, 7) - {'options': [(10, 7), (10, 6), (11, 7), (10, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(13, 10) - {'options': [(13, 9), (12, 10), (13, 10)], 'scores': [2, 2, 0]}
(7, 6) - {'options': [(8, 6), (7, 7), (7, 6)], 'scores': [2, 2, 0]}
(6, 10) - {'options': [(6, 9), (6, 10), (7, 10), (6, 11), (5, 10)], 'scores': [0, 0, 0, -2, -2]}
(8, 10) - {'options': [(8, 11), (7, 10), (8, 10)], 'scores': [2, 2, 0]}
(9, 11) - {'options': [(8, 11), (10, 11), (9, 12), (9, 11)], 'scores': [2, 2, 2, 0]}
(7, 10) - {'options': [(7, 11), (6, 10), (7, 10), (8, 10), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(8, 6) - {'options': [(9, 6), (8, 7), (8, 6), (7, 6), (8, 5)], 'scores': [0, 0, 0, -2, -2]}
(10, 13) - {'options': [(9, 13), (10, 12), (10, 13)], 'scores': [2, 2, 0]}
(9, 7) - {'options': [(10, 7), (9, 6), (8, 7), (9, 7)], 'scores': [2, 2, 2, 0]}
(9, 14) - {'options': [(9, 13), (9, 14)], 'scores': [2, 0]}
(11, 7) - {'options': [(11, 8), (10, 7), (11, 7), (12, 7), (11, 6)], 'scores': [0, 0, 0, -2, -2]}
(6, 11) - {'options': [(6, 10), (7, 11), (6, 11)], 'scores': [2, 2, 0]}
(13, 9) - {'options': [(12, 9), (13, 9), (13, 10), (14, 9), (13, 8)], 'scores': [0, 0, -2, -2, -2]}
(8, 11) - {'options': [(7, 11), (8, 11), (8, 12), (9, 11), (8, 10)], 'scores': [0, 0, 0, -2, -2]}
(11, 9) - {'options': [(11, 8), (11, 10), (12, 9), (11, 9)], 'scores': [2, 2, 2, 0]}
(8, 7) - {'options': [(8, 6), (7, 7), (8, 7), (8, 8), (9, 7)], 'scores': [0, 0, 0, -2, -2]}
(12, 10) - {'options': [(11, 10), (12, 9), (12, 10), (13, 10), (12, 11)], 'scores': [0, 0, 0, -2, -2]}
(9, 6) - {'options': [(8, 6), (10, 6), (9, 6), (9, 5), (9, 7)], 'scores': [0, 0, 0, 0, -2]}
(7, 9) - {'options': [(6, 9), (7, 8), (7, 10), (7, 9)], 'scores': [2, 2, 2, 0]}
(9, 13) - {'options': [(9, 12), (9, 13), (9, 14), (10, 13), (8, 13)], 'scores': [0, 0, -2, -2, -2]}
(5, 10) - {'options': [(5, 9), (6, 10), (5, 10)], 'scores': [2, 2, 0]}
(6, 8) - {'options': [(7, 8), (6, 9), (6, 8), (6, 7), (5, 8)], 'scores': [0, 0, 0, -2, -2]}
(8, 12) - {'options': [(8, 11), (9, 12), (8, 12), (7, 12), (8, 13)], 'scores': [0, 0, 0, -2, -2]}
(11, 8) - {'options': [(11, 8), (11, 7), (12, 8), (11, 9), (10, 8)], 'scores': [0, 0, 0, -2, -2]}
(10, 10) - {'options': [(11, 10), (10, 11), (10, 10)], 'scores': [2, 2, 0]}
(8, 8) - {'options': [(7, 8), (8, 7), (8, 8)], 'scores': [2, 2, 0]}
(12, 7) - {'options': [(11, 7), (12, 8), (12, 7)], 'scores': [2, 2, 0]}
(9, 5) - {'options': [(9, 6), (9, 5), (10, 5), (8, 5), (9, 4)], 'scores': [0, 0, -2, -2, -2]}
(7, 8) - {'options': [(7, 8), (6, 8), (7, 7), (8, 8), (7, 9)], 'scores': [0, 0, 0, -2, -2]}
(9, 12) - {'options': [(9, 13), (10, 12), (9, 12), (8, 12), (9, 11)], 'scores': [0, 0, 0, 0, -2]}
(12, 8) - {'options': [(11, 8), (12, 9), (12, 8), (12, 7), (13, 8)], 'scores': [0, 0, 0, -2, -2]}
A system with max gain has been found!
It took  17.218000ms for system_walk to complete
solve_sys - assessing possibility {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
top possiblilty found, returning it
settle_sys returned with {(5, 9): {'options': [(5, 9)], 'scores': [0]}, (6, 9): {'options': [(6, 9)], 'scores': [0]}, (10, 11): {'options': [(10, 11)], 'scores': [0]}, (11, 11): {'options': [(11, 11)], 'scores': [0]}, (7, 12): {'options': [(7, 12)], 'scores': [0]}, (10, 6): {'options': [(10, 6)], 'scores': [0]}, (7, 7): {'options': [(7, 7)], 'scores': [0]}, (8, 10): {'options': [(8, 10)], 'scores': [0]}, (13, 8): {'options': [(13, 8)], 'scores': [0]}, (7, 11): {'options': [(7, 11)], 'scores': [0]}, (14, 9): {'options': [(14, 9)], 'scores': [0]}, (12, 9): {'options': [(12, 9)], 'scores': [0]}, (10, 8): {'options': [(10, 8)], 'scores': [0]}, (11, 10): {'options': [(11, 10)], 'scores': [0]}, (10, 7): {'options': [(10, 7)], 'scores': [0]}, (13, 10): {'options': [(13, 10)], 'scores': [0]}, (7, 6): {'options': [(7, 6)], 'scores': [0]}, (6, 10): {'options': [(6, 10)], 'scores': [0]}, (10, 12): {'options': [(10, 12)], 'scores': [0]}, (9, 11): {'options': [(9, 11)], 'scores': [0]}, (7, 10): {'options': [(7, 10)], 'scores': [0]}, (12, 10): {'options': [(12, 10)], 'scores': [0]}, (8, 11): {'options': [(8, 11)], 'scores': [0]}, (9, 7): {'options': [(9, 7)], 'scores': [0]}, (9, 14): {'options': [(9, 14)], 'scores': [0]}, (11, 7): {'options': [(11, 7)], 'scores': [0]}, (6, 11): {'options': [(6, 11)], 'scores': [0]}, (13, 9): {'options': [(13, 9)], 'scores': [0]}, (10, 13): {'options': [(10, 13)], 'scores': [0]}, (11, 9): {'options': [(11, 9)], 'scores': [0]}, (8, 7): {'options': [(8, 7)], 'scores': [0]}, (8, 6): {'options': [(8, 6)], 'scores': [0]}, (9, 6): {'options': [(9, 6)], 'scores': [0]}, (7, 9): {'options': [(7, 9)], 'scores': [0]}, (9, 13): {'options': [(9, 13)], 'scores': [0]}, (5, 10): {'options': [(5, 10)], 'scores': [0]}, (6, 8): {'options': [(6, 8)], 'scores': [0]}, (8, 12): {'options': [(8, 12)], 'scores': [0]}, (11, 8): {'options': [(11, 8)], 'scores': [0]}, (10, 10): {'options': [(10, 10)], 'scores': [0]}, (8, 8): {'options': [(8, 8)], 'scores': [0]}, (12, 7): {'options': [(12, 7)], 'scores': [0]}, (9, 5): {'options': [(9, 5)], 'scores': [0]}, (7, 8): {'options': [(7, 8)], 'scores': [0]}, (9, 12): {'options': [(9, 12)], 'scores': [0]}, (12, 8): {'options': [(12, 8)], 'scores': [0]}}
[5, 46] - seed: 682678103-0
[0, 1, 0]
